// Flash STREAM REPUBLISH v1.0
// by Javier Peletier <jpeletie@akamai.com> (c) Akamai 2009
// Akamai confidential. Customer NDA required.
// AKAMAI CONTRIBUTION LICENSE: If you use or change this code, you accept to contribute the changes back to Akamai.

// This application is provided AS IS, without warranty of any kind.

// This FMS application gets a Stream from an encoder and republishes it to an Akamai EntryPoint
// config.asc file contains the parameters required to use this application


load("md5.asc");
load("config.asc");

var nc;
var ns;

application.onConnect = function(client) {
 	application.acceptConnection(client);
 	trace(client.id + " is connected");	
}

application.onDisconnect = function(client) {
	trace(client.id + "disconnecting at " + new Date());
}

application.onUnpublish = function( client, myStream ) {
	trace(myStream.name + " is unpublishing");
}

application.onStatus = function(info){
    trace("Application.onStatus: "+info.code + ", " +info.details);
};

// Called when the client (i.e. encoder) publishes to FMS
application.onPublish = function(client, myStream) {
	
	trace(myStream.name + " is publishing into application " + application.name);

	// This is an example of using the multi-point publish feature to republish
	// streams to an Akamai EntryPoint

		nc = new NetConnection();
		
		nc.password=AKAMAI_PASSWORD;
		nc.sessionkey="encoder:1.2.3.4:" + AKAMAI_CPCODE;
		nc.sourceStream=myStream;
		nc.streamType=AKAMAI_ENTRYPOINT_TYPE;
		
		nc.setChallenge = NetConnection_setChallenge;
		nc.onClientLogin = NetConnection_onClientLogin;
		nc.onFCPublish = NetConnection_onFCPublish;
		nc.onStatus = NetConnection_onStatus;
	
		var target_url;
		
		if (AKAMAI_ENTRYPOINT_TYPE == "primary")
			target_url = "rtmp://p.ep" + AKAMAI_STREAM_ID + ".i.akamaientrypoint.net/EntryPoint/";
		else 
			target_url = "rtmp://b.ep" + AKAMAI_STREAM_ID + ".i.akamaientrypoint.net/EntryPoint/";
	
	    trace("Target url: " + target_url);
		nc.connect(target_url,nc.sessionkey,"","2.0" );
}

function NetConnection_onStatus(info)
{
	trace("NetConnection_onStatus: " + info.code + ", description: " +info.description);
	
	switch(info.code)
	{
		case "NetConnection.Connect.Success" :
			{
				trace("Target connection succesful");
				break;
			}
		
		case "NetConnection.Connect.Closed" :
			{
				trace("Target connection was lost");
				break;
			}
				
			case "NetConnection.Connect.Failed" :
			{
				trace("Cannot connect to target");
				break;
			}	
	}

}

function NetConnection_setChallenge(sessionid, challenge) 
{
	trace(sessionid + "," + challenge);
	this.sessionkey = this.sessionkey+":"+sessionid;
	this.password = hex_md5(challenge+":"+this.password+hex_md5(this.sessionkey+":"+challenge+":"+this.password));
	trace("challenge-response: " + this.password);
	this.call("ClientLogin", null, this.sessionkey, this.password);
	
}

function NetConnection_onClientLogin(info) 
{
			switch (info.code) 
			{
				case "Akamai.Connect.Success" :
					trace("Connection login successful");
					this.call("FCPublish", null, this.sourceStream.name, this.sessionkey, this.password, this.streamType);
					break;
				case "Akamai.Connect.Rejected" :
					trace("Connection login rejected");
					break;
			}
};

function NetConnection_onFCPublish(info) 
{
trace("onFCPublish: " + info.code + ", description: " + info.description);
		if (info.code == "NetStream.Publish.Start") {
			ns = new NetStream(this);
		
			// called when the server NetStream object has a status
			ns.onStatus = NetStream_onStatus;
			
			//ns.setBufferTime(BUFFER_LENGTH);
			ns.publish( this.sourceStream.name, "live" );
			ns.attach(this.sourceStream);
			
		
		} 
}

function NetStream_onStatus(info)
{
	trace("Stream Status: " + info.code)
	if (info.code == "NetStream.Publish.Start")
	{	
		trace("The stream is now publishing");
	}
}

Client.prototype.FCPublish = function(name)
{
	trace("FCPublish: " + name);
}

// called by Adobe Media Encoder before unpublishing a stream.
// The encoder has a bug where the streamname is not passed in.
Client.prototype.FCUnpublish = function()
{
    trace("FCUnpublish: called ");
nc = null;
}

Client.prototype.releaseStream = function(){
trace("An FME client just called release stream");
ns = null;
} 