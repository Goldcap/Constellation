<?php

/**
 * Base class that represents a row from the 'payment' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:34 PM EDT
 *
 * @package    lib.model.om
 */
abstract class BasePayment extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PaymentPeer
	 */
	protected static $peer;

	/**
	 * The value for the payment_id field.
	 * @var        int
	 */
	protected $payment_id;

	/**
	 * The value for the fk_film_id field.
	 * @var        int
	 */
	protected $fk_film_id;

	/**
	 * The value for the fk_screening_id field.
	 * @var        int
	 */
	protected $fk_screening_id;

	/**
	 * The value for the fk_screening_name field.
	 * @var        string
	 */
	protected $fk_screening_name;

	/**
	 * The value for the fk_audience_id field.
	 * @var        int
	 */
	protected $fk_audience_id;

	/**
	 * The value for the fk_subscription_id field.
	 * @var        int
	 */
	protected $fk_subscription_id;

	/**
	 * The value for the fk_user_id field.
	 * @var        int
	 */
	protected $fk_user_id;

	/**
	 * The value for the payment_unique_code field.
	 * @var        string
	 */
	protected $payment_unique_code;

	/**
	 * The value for the payment_type field.
	 * @var        string
	 */
	protected $payment_type;

	/**
	 * The value for the payment_first_name field.
	 * @var        string
	 */
	protected $payment_first_name;

	/**
	 * The value for the payment_last_name field.
	 * @var        string
	 */
	protected $payment_last_name;

	/**
	 * The value for the payment_email field.
	 * @var        string
	 */
	protected $payment_email;

	/**
	 * The value for the payment_b_addr_1 field.
	 * @var        string
	 */
	protected $payment_b_addr_1;

	/**
	 * The value for the payment_b_addr_2 field.
	 * @var        string
	 */
	protected $payment_b_addr_2;

	/**
	 * The value for the payment_b_city field.
	 * @var        string
	 */
	protected $payment_b_city;

	/**
	 * The value for the payment_b_state field.
	 * @var        string
	 */
	protected $payment_b_state;

	/**
	 * The value for the payment_b_zipcode field.
	 * @var        string
	 */
	protected $payment_b_zipcode;

	/**
	 * The value for the payment_b_country field.
	 * @var        string
	 */
	protected $payment_b_country;

	/**
	 * The value for the payment_status field.
	 * @var        int
	 */
	protected $payment_status;

	/**
	 * The value for the payment_amount field.
	 * @var        double
	 */
	protected $payment_amount;

	/**
	 * The value for the payment_description field.
	 * @var        string
	 */
	protected $payment_description;

	/**
	 * The value for the payment_card_type field.
	 * @var        string
	 */
	protected $payment_card_type;

	/**
	 * The value for the payment_last_four_cc_digits field.
	 * @var        string
	 */
	protected $payment_last_four_cc_digits;

	/**
	 * The value for the payment_cvv2 field.
	 * @var        string
	 */
	protected $payment_cvv2;

	/**
	 * The value for the payment_cc_exp field.
	 * @var        string
	 */
	protected $payment_cc_exp;

	/**
	 * The value for the payment_created_at field.
	 * @var        string
	 */
	protected $payment_created_at;

	/**
	 * The value for the payment_updated_at field.
	 * @var        string
	 */
	protected $payment_updated_at;

	/**
	 * The value for the payment_ip field.
	 * @var        string
	 */
	protected $payment_ip;

	/**
	 * The value for the payment_site_id field.
	 * @var        string
	 */
	protected $payment_site_id;

	/**
	 * The value for the payment_transaction_id field.
	 * @var        string
	 */
	protected $payment_transaction_id;

	/**
	 * The value for the payment_fraud_score field.
	 * @var        int
	 */
	protected $payment_fraud_score;

	/**
	 * The value for the payment_maxmind_object field.
	 * @var        string
	 */
	protected $payment_maxmind_object;

	/**
	 * The value for the payment_order_processor field.
	 * @var        string
	 */
	protected $payment_order_processor;

	/**
	 * The value for the payment_invites field.
	 * @var        int
	 */
	protected $payment_invites;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PaymentPeer';

	/**
	 * Get the [payment_id] column value.
	 * 
	 * @return     int
	 */
	public function getPaymentId()
	{
		return $this->payment_id;
	}

	/**
	 * Get the [fk_film_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkFilmId()
	{
		return $this->fk_film_id;
	}

	/**
	 * Get the [fk_screening_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkScreeningId()
	{
		return $this->fk_screening_id;
	}

	/**
	 * Get the [fk_screening_name] column value.
	 * 
	 * @return     string
	 */
	public function getFkScreeningName()
	{
		return $this->fk_screening_name;
	}

	/**
	 * Get the [fk_audience_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkAudienceId()
	{
		return $this->fk_audience_id;
	}

	/**
	 * Get the [fk_subscription_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkSubscriptionId()
	{
		return $this->fk_subscription_id;
	}

	/**
	 * Get the [fk_user_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkUserId()
	{
		return $this->fk_user_id;
	}

	/**
	 * Get the [payment_unique_code] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentUniqueCode()
	{
		return $this->payment_unique_code;
	}

	/**
	 * Get the [payment_type] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentType()
	{
		return $this->payment_type;
	}

	/**
	 * Get the [payment_first_name] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentFirstName()
	{
		return $this->payment_first_name;
	}

	/**
	 * Get the [payment_last_name] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentLastName()
	{
		return $this->payment_last_name;
	}

	/**
	 * Get the [payment_email] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentEmail()
	{
		return $this->payment_email;
	}

	/**
	 * Get the [payment_b_addr_1] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentBAddr1()
	{
		return $this->payment_b_addr_1;
	}

	/**
	 * Get the [payment_b_addr_2] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentBAddr2()
	{
		return $this->payment_b_addr_2;
	}

	/**
	 * Get the [payment_b_city] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentBCity()
	{
		return $this->payment_b_city;
	}

	/**
	 * Get the [payment_b_state] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentBState()
	{
		return $this->payment_b_state;
	}

	/**
	 * Get the [payment_b_zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentBZipcode()
	{
		return $this->payment_b_zipcode;
	}

	/**
	 * Get the [payment_b_country] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentBCountry()
	{
		return $this->payment_b_country;
	}

	/**
	 * Get the [payment_status] column value.
	 * 
	 * @return     int
	 */
	public function getPaymentStatus()
	{
		return $this->payment_status;
	}

	/**
	 * Get the [payment_amount] column value.
	 * 
	 * @return     double
	 */
	public function getPaymentAmount()
	{
		return $this->payment_amount;
	}

	/**
	 * Get the [payment_description] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentDescription()
	{
		return $this->payment_description;
	}

	/**
	 * Get the [payment_card_type] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentCardType()
	{
		return $this->payment_card_type;
	}

	/**
	 * Get the [payment_last_four_cc_digits] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentLastFourCcDigits()
	{
		return $this->payment_last_four_cc_digits;
	}

	/**
	 * Get the [payment_cvv2] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentCvv2()
	{
		return $this->payment_cvv2;
	}

	/**
	 * Get the [payment_cc_exp] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentCcExp()
	{
		return $this->payment_cc_exp;
	}

	/**
	 * Get the [optionally formatted] temporal [payment_created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPaymentCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->payment_created_at === null) {
			return null;
		}


		if ($this->payment_created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->payment_created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->payment_created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [payment_updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPaymentUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->payment_updated_at === null) {
			return null;
		}


		if ($this->payment_updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->payment_updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->payment_updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [payment_ip] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentIp()
	{
		return $this->payment_ip;
	}

	/**
	 * Get the [payment_site_id] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentSiteId()
	{
		return $this->payment_site_id;
	}

	/**
	 * Get the [payment_transaction_id] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentTransactionId()
	{
		return $this->payment_transaction_id;
	}

	/**
	 * Get the [payment_fraud_score] column value.
	 * 
	 * @return     int
	 */
	public function getPaymentFraudScore()
	{
		return $this->payment_fraud_score;
	}

	/**
	 * Get the [payment_maxmind_object] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentMaxmindObject()
	{
		return $this->payment_maxmind_object;
	}

	/**
	 * Get the [payment_order_processor] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentOrderProcessor()
	{
		return $this->payment_order_processor;
	}

	/**
	 * Get the [payment_invites] column value.
	 * 
	 * @return     int
	 */
	public function getPaymentInvites()
	{
		return $this->payment_invites;
	}

	/**
	 * Set the value of [payment_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->payment_id !== $v) {
			$this->payment_id = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_ID;
		}

		return $this;
	} // setPaymentId()

	/**
	 * Set the value of [fk_film_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setFkFilmId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_film_id !== $v) {
			$this->fk_film_id = $v;
			$this->modifiedColumns[] = PaymentPeer::FK_FILM_ID;
		}

		return $this;
	} // setFkFilmId()

	/**
	 * Set the value of [fk_screening_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setFkScreeningId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_screening_id !== $v) {
			$this->fk_screening_id = $v;
			$this->modifiedColumns[] = PaymentPeer::FK_SCREENING_ID;
		}

		return $this;
	} // setFkScreeningId()

	/**
	 * Set the value of [fk_screening_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setFkScreeningName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fk_screening_name !== $v) {
			$this->fk_screening_name = $v;
			$this->modifiedColumns[] = PaymentPeer::FK_SCREENING_NAME;
		}

		return $this;
	} // setFkScreeningName()

	/**
	 * Set the value of [fk_audience_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setFkAudienceId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_audience_id !== $v) {
			$this->fk_audience_id = $v;
			$this->modifiedColumns[] = PaymentPeer::FK_AUDIENCE_ID;
		}

		return $this;
	} // setFkAudienceId()

	/**
	 * Set the value of [fk_subscription_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setFkSubscriptionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_subscription_id !== $v) {
			$this->fk_subscription_id = $v;
			$this->modifiedColumns[] = PaymentPeer::FK_SUBSCRIPTION_ID;
		}

		return $this;
	} // setFkSubscriptionId()

	/**
	 * Set the value of [fk_user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setFkUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_user_id !== $v) {
			$this->fk_user_id = $v;
			$this->modifiedColumns[] = PaymentPeer::FK_USER_ID;
		}

		return $this;
	} // setFkUserId()

	/**
	 * Set the value of [payment_unique_code] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentUniqueCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_unique_code !== $v) {
			$this->payment_unique_code = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_UNIQUE_CODE;
		}

		return $this;
	} // setPaymentUniqueCode()

	/**
	 * Set the value of [payment_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_type !== $v) {
			$this->payment_type = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_TYPE;
		}

		return $this;
	} // setPaymentType()

	/**
	 * Set the value of [payment_first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_first_name !== $v) {
			$this->payment_first_name = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_FIRST_NAME;
		}

		return $this;
	} // setPaymentFirstName()

	/**
	 * Set the value of [payment_last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_last_name !== $v) {
			$this->payment_last_name = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_LAST_NAME;
		}

		return $this;
	} // setPaymentLastName()

	/**
	 * Set the value of [payment_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_email !== $v) {
			$this->payment_email = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_EMAIL;
		}

		return $this;
	} // setPaymentEmail()

	/**
	 * Set the value of [payment_b_addr_1] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentBAddr1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_b_addr_1 !== $v) {
			$this->payment_b_addr_1 = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_B_ADDR_1;
		}

		return $this;
	} // setPaymentBAddr1()

	/**
	 * Set the value of [payment_b_addr_2] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentBAddr2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_b_addr_2 !== $v) {
			$this->payment_b_addr_2 = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_B_ADDR_2;
		}

		return $this;
	} // setPaymentBAddr2()

	/**
	 * Set the value of [payment_b_city] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentBCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_b_city !== $v) {
			$this->payment_b_city = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_B_CITY;
		}

		return $this;
	} // setPaymentBCity()

	/**
	 * Set the value of [payment_b_state] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentBState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_b_state !== $v) {
			$this->payment_b_state = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_B_STATE;
		}

		return $this;
	} // setPaymentBState()

	/**
	 * Set the value of [payment_b_zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentBZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_b_zipcode !== $v) {
			$this->payment_b_zipcode = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_B_ZIPCODE;
		}

		return $this;
	} // setPaymentBZipcode()

	/**
	 * Set the value of [payment_b_country] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentBCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_b_country !== $v) {
			$this->payment_b_country = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_B_COUNTRY;
		}

		return $this;
	} // setPaymentBCountry()

	/**
	 * Set the value of [payment_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->payment_status !== $v) {
			$this->payment_status = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_STATUS;
		}

		return $this;
	} // setPaymentStatus()

	/**
	 * Set the value of [payment_amount] column.
	 * 
	 * @param      double $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentAmount($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->payment_amount !== $v) {
			$this->payment_amount = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_AMOUNT;
		}

		return $this;
	} // setPaymentAmount()

	/**
	 * Set the value of [payment_description] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_description !== $v) {
			$this->payment_description = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_DESCRIPTION;
		}

		return $this;
	} // setPaymentDescription()

	/**
	 * Set the value of [payment_card_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentCardType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_card_type !== $v) {
			$this->payment_card_type = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_CARD_TYPE;
		}

		return $this;
	} // setPaymentCardType()

	/**
	 * Set the value of [payment_last_four_cc_digits] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentLastFourCcDigits($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_last_four_cc_digits !== $v) {
			$this->payment_last_four_cc_digits = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_LAST_FOUR_CC_DIGITS;
		}

		return $this;
	} // setPaymentLastFourCcDigits()

	/**
	 * Set the value of [payment_cvv2] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentCvv2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_cvv2 !== $v) {
			$this->payment_cvv2 = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_CVV2;
		}

		return $this;
	} // setPaymentCvv2()

	/**
	 * Set the value of [payment_cc_exp] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentCcExp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_cc_exp !== $v) {
			$this->payment_cc_exp = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_CC_EXP;
		}

		return $this;
	} // setPaymentCcExp()

	/**
	 * Sets the value of [payment_created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->payment_created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->payment_created_at !== null && $tmpDt = new DateTime($this->payment_created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->payment_created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PaymentPeer::PAYMENT_CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setPaymentCreatedAt()

	/**
	 * Sets the value of [payment_updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->payment_updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->payment_updated_at !== null && $tmpDt = new DateTime($this->payment_updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->payment_updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PaymentPeer::PAYMENT_UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setPaymentUpdatedAt()

	/**
	 * Set the value of [payment_ip] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentIp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_ip !== $v) {
			$this->payment_ip = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_IP;
		}

		return $this;
	} // setPaymentIp()

	/**
	 * Set the value of [payment_site_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentSiteId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_site_id !== $v) {
			$this->payment_site_id = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_SITE_ID;
		}

		return $this;
	} // setPaymentSiteId()

	/**
	 * Set the value of [payment_transaction_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentTransactionId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_transaction_id !== $v) {
			$this->payment_transaction_id = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_TRANSACTION_ID;
		}

		return $this;
	} // setPaymentTransactionId()

	/**
	 * Set the value of [payment_fraud_score] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentFraudScore($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->payment_fraud_score !== $v) {
			$this->payment_fraud_score = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_FRAUD_SCORE;
		}

		return $this;
	} // setPaymentFraudScore()

	/**
	 * Set the value of [payment_maxmind_object] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentMaxmindObject($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_maxmind_object !== $v) {
			$this->payment_maxmind_object = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_MAXMIND_OBJECT;
		}

		return $this;
	} // setPaymentMaxmindObject()

	/**
	 * Set the value of [payment_order_processor] column.
	 * 
	 * @param      string $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentOrderProcessor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_order_processor !== $v) {
			$this->payment_order_processor = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_ORDER_PROCESSOR;
		}

		return $this;
	} // setPaymentOrderProcessor()

	/**
	 * Set the value of [payment_invites] column.
	 * 
	 * @param      int $v new value
	 * @return     Payment The current object (for fluent API support)
	 */
	public function setPaymentInvites($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->payment_invites !== $v) {
			$this->payment_invites = $v;
			$this->modifiedColumns[] = PaymentPeer::PAYMENT_INVITES;
		}

		return $this;
	} // setPaymentInvites()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->payment_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->fk_film_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->fk_screening_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->fk_screening_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->fk_audience_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->fk_subscription_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->fk_user_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->payment_unique_code = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->payment_type = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->payment_first_name = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->payment_last_name = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->payment_email = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->payment_b_addr_1 = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->payment_b_addr_2 = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->payment_b_city = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->payment_b_state = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->payment_b_zipcode = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->payment_b_country = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->payment_status = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->payment_amount = ($row[$startcol + 19] !== null) ? (double) $row[$startcol + 19] : null;
			$this->payment_description = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->payment_card_type = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->payment_last_four_cc_digits = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->payment_cvv2 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->payment_cc_exp = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->payment_created_at = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->payment_updated_at = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->payment_ip = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->payment_site_id = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->payment_transaction_id = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->payment_fraud_score = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->payment_maxmind_object = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->payment_order_processor = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->payment_invites = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 34; // 34 = PaymentPeer::NUM_COLUMNS - PaymentPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Payment object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaymentPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PaymentPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaymentPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePayment:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PaymentPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePayment:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PaymentPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePayment:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePayment:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PaymentPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PaymentPeer::PAYMENT_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PaymentPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setPaymentId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PaymentPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PaymentPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PaymentPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getPaymentId();
				break;
			case 1:
				return $this->getFkFilmId();
				break;
			case 2:
				return $this->getFkScreeningId();
				break;
			case 3:
				return $this->getFkScreeningName();
				break;
			case 4:
				return $this->getFkAudienceId();
				break;
			case 5:
				return $this->getFkSubscriptionId();
				break;
			case 6:
				return $this->getFkUserId();
				break;
			case 7:
				return $this->getPaymentUniqueCode();
				break;
			case 8:
				return $this->getPaymentType();
				break;
			case 9:
				return $this->getPaymentFirstName();
				break;
			case 10:
				return $this->getPaymentLastName();
				break;
			case 11:
				return $this->getPaymentEmail();
				break;
			case 12:
				return $this->getPaymentBAddr1();
				break;
			case 13:
				return $this->getPaymentBAddr2();
				break;
			case 14:
				return $this->getPaymentBCity();
				break;
			case 15:
				return $this->getPaymentBState();
				break;
			case 16:
				return $this->getPaymentBZipcode();
				break;
			case 17:
				return $this->getPaymentBCountry();
				break;
			case 18:
				return $this->getPaymentStatus();
				break;
			case 19:
				return $this->getPaymentAmount();
				break;
			case 20:
				return $this->getPaymentDescription();
				break;
			case 21:
				return $this->getPaymentCardType();
				break;
			case 22:
				return $this->getPaymentLastFourCcDigits();
				break;
			case 23:
				return $this->getPaymentCvv2();
				break;
			case 24:
				return $this->getPaymentCcExp();
				break;
			case 25:
				return $this->getPaymentCreatedAt();
				break;
			case 26:
				return $this->getPaymentUpdatedAt();
				break;
			case 27:
				return $this->getPaymentIp();
				break;
			case 28:
				return $this->getPaymentSiteId();
				break;
			case 29:
				return $this->getPaymentTransactionId();
				break;
			case 30:
				return $this->getPaymentFraudScore();
				break;
			case 31:
				return $this->getPaymentMaxmindObject();
				break;
			case 32:
				return $this->getPaymentOrderProcessor();
				break;
			case 33:
				return $this->getPaymentInvites();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PaymentPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getPaymentId(),
			$keys[1] => $this->getFkFilmId(),
			$keys[2] => $this->getFkScreeningId(),
			$keys[3] => $this->getFkScreeningName(),
			$keys[4] => $this->getFkAudienceId(),
			$keys[5] => $this->getFkSubscriptionId(),
			$keys[6] => $this->getFkUserId(),
			$keys[7] => $this->getPaymentUniqueCode(),
			$keys[8] => $this->getPaymentType(),
			$keys[9] => $this->getPaymentFirstName(),
			$keys[10] => $this->getPaymentLastName(),
			$keys[11] => $this->getPaymentEmail(),
			$keys[12] => $this->getPaymentBAddr1(),
			$keys[13] => $this->getPaymentBAddr2(),
			$keys[14] => $this->getPaymentBCity(),
			$keys[15] => $this->getPaymentBState(),
			$keys[16] => $this->getPaymentBZipcode(),
			$keys[17] => $this->getPaymentBCountry(),
			$keys[18] => $this->getPaymentStatus(),
			$keys[19] => $this->getPaymentAmount(),
			$keys[20] => $this->getPaymentDescription(),
			$keys[21] => $this->getPaymentCardType(),
			$keys[22] => $this->getPaymentLastFourCcDigits(),
			$keys[23] => $this->getPaymentCvv2(),
			$keys[24] => $this->getPaymentCcExp(),
			$keys[25] => $this->getPaymentCreatedAt(),
			$keys[26] => $this->getPaymentUpdatedAt(),
			$keys[27] => $this->getPaymentIp(),
			$keys[28] => $this->getPaymentSiteId(),
			$keys[29] => $this->getPaymentTransactionId(),
			$keys[30] => $this->getPaymentFraudScore(),
			$keys[31] => $this->getPaymentMaxmindObject(),
			$keys[32] => $this->getPaymentOrderProcessor(),
			$keys[33] => $this->getPaymentInvites(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PaymentPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setPaymentId($value);
				break;
			case 1:
				$this->setFkFilmId($value);
				break;
			case 2:
				$this->setFkScreeningId($value);
				break;
			case 3:
				$this->setFkScreeningName($value);
				break;
			case 4:
				$this->setFkAudienceId($value);
				break;
			case 5:
				$this->setFkSubscriptionId($value);
				break;
			case 6:
				$this->setFkUserId($value);
				break;
			case 7:
				$this->setPaymentUniqueCode($value);
				break;
			case 8:
				$this->setPaymentType($value);
				break;
			case 9:
				$this->setPaymentFirstName($value);
				break;
			case 10:
				$this->setPaymentLastName($value);
				break;
			case 11:
				$this->setPaymentEmail($value);
				break;
			case 12:
				$this->setPaymentBAddr1($value);
				break;
			case 13:
				$this->setPaymentBAddr2($value);
				break;
			case 14:
				$this->setPaymentBCity($value);
				break;
			case 15:
				$this->setPaymentBState($value);
				break;
			case 16:
				$this->setPaymentBZipcode($value);
				break;
			case 17:
				$this->setPaymentBCountry($value);
				break;
			case 18:
				$this->setPaymentStatus($value);
				break;
			case 19:
				$this->setPaymentAmount($value);
				break;
			case 20:
				$this->setPaymentDescription($value);
				break;
			case 21:
				$this->setPaymentCardType($value);
				break;
			case 22:
				$this->setPaymentLastFourCcDigits($value);
				break;
			case 23:
				$this->setPaymentCvv2($value);
				break;
			case 24:
				$this->setPaymentCcExp($value);
				break;
			case 25:
				$this->setPaymentCreatedAt($value);
				break;
			case 26:
				$this->setPaymentUpdatedAt($value);
				break;
			case 27:
				$this->setPaymentIp($value);
				break;
			case 28:
				$this->setPaymentSiteId($value);
				break;
			case 29:
				$this->setPaymentTransactionId($value);
				break;
			case 30:
				$this->setPaymentFraudScore($value);
				break;
			case 31:
				$this->setPaymentMaxmindObject($value);
				break;
			case 32:
				$this->setPaymentOrderProcessor($value);
				break;
			case 33:
				$this->setPaymentInvites($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PaymentPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setPaymentId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFkFilmId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFkScreeningId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFkScreeningName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFkAudienceId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFkSubscriptionId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFkUserId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPaymentUniqueCode($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPaymentType($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPaymentFirstName($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPaymentLastName($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPaymentEmail($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPaymentBAddr1($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPaymentBAddr2($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPaymentBCity($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPaymentBState($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPaymentBZipcode($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPaymentBCountry($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPaymentStatus($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPaymentAmount($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPaymentDescription($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setPaymentCardType($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setPaymentLastFourCcDigits($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setPaymentCvv2($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setPaymentCcExp($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setPaymentCreatedAt($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPaymentUpdatedAt($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setPaymentIp($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setPaymentSiteId($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setPaymentTransactionId($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setPaymentFraudScore($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setPaymentMaxmindObject($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setPaymentOrderProcessor($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setPaymentInvites($arr[$keys[33]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PaymentPeer::DATABASE_NAME);

		if ($this->isColumnModified(PaymentPeer::PAYMENT_ID)) $criteria->add(PaymentPeer::PAYMENT_ID, $this->payment_id);
		if ($this->isColumnModified(PaymentPeer::FK_FILM_ID)) $criteria->add(PaymentPeer::FK_FILM_ID, $this->fk_film_id);
		if ($this->isColumnModified(PaymentPeer::FK_SCREENING_ID)) $criteria->add(PaymentPeer::FK_SCREENING_ID, $this->fk_screening_id);
		if ($this->isColumnModified(PaymentPeer::FK_SCREENING_NAME)) $criteria->add(PaymentPeer::FK_SCREENING_NAME, $this->fk_screening_name);
		if ($this->isColumnModified(PaymentPeer::FK_AUDIENCE_ID)) $criteria->add(PaymentPeer::FK_AUDIENCE_ID, $this->fk_audience_id);
		if ($this->isColumnModified(PaymentPeer::FK_SUBSCRIPTION_ID)) $criteria->add(PaymentPeer::FK_SUBSCRIPTION_ID, $this->fk_subscription_id);
		if ($this->isColumnModified(PaymentPeer::FK_USER_ID)) $criteria->add(PaymentPeer::FK_USER_ID, $this->fk_user_id);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_UNIQUE_CODE)) $criteria->add(PaymentPeer::PAYMENT_UNIQUE_CODE, $this->payment_unique_code);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_TYPE)) $criteria->add(PaymentPeer::PAYMENT_TYPE, $this->payment_type);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_FIRST_NAME)) $criteria->add(PaymentPeer::PAYMENT_FIRST_NAME, $this->payment_first_name);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_LAST_NAME)) $criteria->add(PaymentPeer::PAYMENT_LAST_NAME, $this->payment_last_name);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_EMAIL)) $criteria->add(PaymentPeer::PAYMENT_EMAIL, $this->payment_email);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_B_ADDR_1)) $criteria->add(PaymentPeer::PAYMENT_B_ADDR_1, $this->payment_b_addr_1);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_B_ADDR_2)) $criteria->add(PaymentPeer::PAYMENT_B_ADDR_2, $this->payment_b_addr_2);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_B_CITY)) $criteria->add(PaymentPeer::PAYMENT_B_CITY, $this->payment_b_city);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_B_STATE)) $criteria->add(PaymentPeer::PAYMENT_B_STATE, $this->payment_b_state);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_B_ZIPCODE)) $criteria->add(PaymentPeer::PAYMENT_B_ZIPCODE, $this->payment_b_zipcode);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_B_COUNTRY)) $criteria->add(PaymentPeer::PAYMENT_B_COUNTRY, $this->payment_b_country);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_STATUS)) $criteria->add(PaymentPeer::PAYMENT_STATUS, $this->payment_status);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_AMOUNT)) $criteria->add(PaymentPeer::PAYMENT_AMOUNT, $this->payment_amount);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_DESCRIPTION)) $criteria->add(PaymentPeer::PAYMENT_DESCRIPTION, $this->payment_description);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_CARD_TYPE)) $criteria->add(PaymentPeer::PAYMENT_CARD_TYPE, $this->payment_card_type);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_LAST_FOUR_CC_DIGITS)) $criteria->add(PaymentPeer::PAYMENT_LAST_FOUR_CC_DIGITS, $this->payment_last_four_cc_digits);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_CVV2)) $criteria->add(PaymentPeer::PAYMENT_CVV2, $this->payment_cvv2);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_CC_EXP)) $criteria->add(PaymentPeer::PAYMENT_CC_EXP, $this->payment_cc_exp);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_CREATED_AT)) $criteria->add(PaymentPeer::PAYMENT_CREATED_AT, $this->payment_created_at);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_UPDATED_AT)) $criteria->add(PaymentPeer::PAYMENT_UPDATED_AT, $this->payment_updated_at);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_IP)) $criteria->add(PaymentPeer::PAYMENT_IP, $this->payment_ip);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_SITE_ID)) $criteria->add(PaymentPeer::PAYMENT_SITE_ID, $this->payment_site_id);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_TRANSACTION_ID)) $criteria->add(PaymentPeer::PAYMENT_TRANSACTION_ID, $this->payment_transaction_id);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_FRAUD_SCORE)) $criteria->add(PaymentPeer::PAYMENT_FRAUD_SCORE, $this->payment_fraud_score);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_MAXMIND_OBJECT)) $criteria->add(PaymentPeer::PAYMENT_MAXMIND_OBJECT, $this->payment_maxmind_object);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_ORDER_PROCESSOR)) $criteria->add(PaymentPeer::PAYMENT_ORDER_PROCESSOR, $this->payment_order_processor);
		if ($this->isColumnModified(PaymentPeer::PAYMENT_INVITES)) $criteria->add(PaymentPeer::PAYMENT_INVITES, $this->payment_invites);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PaymentPeer::DATABASE_NAME);

		$criteria->add(PaymentPeer::PAYMENT_ID, $this->payment_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getPaymentId();
	}

	/**
	 * Generic method to set the primary key (payment_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setPaymentId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Payment (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFkFilmId($this->fk_film_id);

		$copyObj->setFkScreeningId($this->fk_screening_id);

		$copyObj->setFkScreeningName($this->fk_screening_name);

		$copyObj->setFkAudienceId($this->fk_audience_id);

		$copyObj->setFkSubscriptionId($this->fk_subscription_id);

		$copyObj->setFkUserId($this->fk_user_id);

		$copyObj->setPaymentUniqueCode($this->payment_unique_code);

		$copyObj->setPaymentType($this->payment_type);

		$copyObj->setPaymentFirstName($this->payment_first_name);

		$copyObj->setPaymentLastName($this->payment_last_name);

		$copyObj->setPaymentEmail($this->payment_email);

		$copyObj->setPaymentBAddr1($this->payment_b_addr_1);

		$copyObj->setPaymentBAddr2($this->payment_b_addr_2);

		$copyObj->setPaymentBCity($this->payment_b_city);

		$copyObj->setPaymentBState($this->payment_b_state);

		$copyObj->setPaymentBZipcode($this->payment_b_zipcode);

		$copyObj->setPaymentBCountry($this->payment_b_country);

		$copyObj->setPaymentStatus($this->payment_status);

		$copyObj->setPaymentAmount($this->payment_amount);

		$copyObj->setPaymentDescription($this->payment_description);

		$copyObj->setPaymentCardType($this->payment_card_type);

		$copyObj->setPaymentLastFourCcDigits($this->payment_last_four_cc_digits);

		$copyObj->setPaymentCvv2($this->payment_cvv2);

		$copyObj->setPaymentCcExp($this->payment_cc_exp);

		$copyObj->setPaymentCreatedAt($this->payment_created_at);

		$copyObj->setPaymentUpdatedAt($this->payment_updated_at);

		$copyObj->setPaymentIp($this->payment_ip);

		$copyObj->setPaymentSiteId($this->payment_site_id);

		$copyObj->setPaymentTransactionId($this->payment_transaction_id);

		$copyObj->setPaymentFraudScore($this->payment_fraud_score);

		$copyObj->setPaymentMaxmindObject($this->payment_maxmind_object);

		$copyObj->setPaymentOrderProcessor($this->payment_order_processor);

		$copyObj->setPaymentInvites($this->payment_invites);


		$copyObj->setNew(true);

		$copyObj->setPaymentId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Payment Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PaymentPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PaymentPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePayment:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePayment::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePayment
