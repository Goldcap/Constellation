<?php

/**
 * Base class that represents a row from the 'film' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:33 PM EDT
 *
 * @package    lib.model.om
 */
abstract class BaseFilm extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FilmPeer
	 */
	protected static $peer;

	/**
	 * The value for the film_id field.
	 * @var        int
	 */
	protected $film_id;

	/**
	 * The value for the film_name field.
	 * @var        string
	 */
	protected $film_name;

	/**
	 * The value for the film_alt_name field.
	 * @var        string
	 */
	protected $film_alt_name;

	/**
	 * The value for the film_makers field.
	 * @var        string
	 */
	protected $film_makers;

	/**
	 * The value for the film_production_company field.
	 * @var        string
	 */
	protected $film_production_company;

	/**
	 * The value for the film_logo field.
	 * @var        string
	 */
	protected $film_logo;

	/**
	 * The value for the film_homelogo field.
	 * @var        string
	 */
	protected $film_homelogo;

	/**
	 * The value for the film_trailer_file field.
	 * @var        string
	 */
	protected $film_trailer_file;

	/**
	 * The value for the film_movie_file field.
	 * @var        string
	 */
	protected $film_movie_file;

	/**
	 * The value for the film_maker_message field.
	 * @var        string
	 */
	protected $film_maker_message;

	/**
	 * The value for the film_ticket_price field.
	 * @var        double
	 */
	protected $film_ticket_price;

	/**
	 * The value for the film_hostbyrequest_price field.
	 * @var        double
	 */
	protected $film_hostbyrequest_price;

	/**
	 * The value for the film_status field.
	 * @var        int
	 */
	protected $film_status;

	/**
	 * The value for the film_featured field.
	 * @var        int
	 */
	protected $film_featured;

	/**
	 * The value for the film_created_at field.
	 * @var        string
	 */
	protected $film_created_at;

	/**
	 * The value for the film_updated_at field.
	 * @var        string
	 */
	protected $film_updated_at;

	/**
	 * The value for the film_setup_price field.
	 * @var        double
	 */
	protected $film_setup_price;

	/**
	 * The value for the film_info field.
	 * @var        string
	 */
	protected $film_info;

	/**
	 * The value for the film_cast field.
	 * @var        string
	 */
	protected $film_cast;

	/**
	 * The value for the film_running_time field.
	 * @var        string
	 */
	protected $film_running_time;

	/**
	 * The value for the film_total_seats field.
	 * @var        int
	 */
	protected $film_total_seats;

	/**
	 * The value for the film_short_name field.
	 * @var        string
	 */
	protected $film_short_name;

	/**
	 * The value for the film_synopsis field.
	 * @var        string
	 */
	protected $film_synopsis;

	/**
	 * The value for the film_still_image field.
	 * @var        string
	 */
	protected $film_still_image;

	/**
	 * The value for the film_background_image field.
	 * @var        string
	 */
	protected $film_background_image;

	/**
	 * The value for the film_splash_image field.
	 * @var        string
	 */
	protected $film_splash_image;

	/**
	 * The value for the film_geoblocking_enabled field.
	 * @var        int
	 */
	protected $film_geoblocking_enabled;

	/**
	 * The value for the film_geoblocking_type field.
	 * @var        string
	 */
	protected $film_geoblocking_type;

	/**
	 * The value for the film_short_url field.
	 * @var        string
	 */
	protected $film_short_url;

	/**
	 * The value for the film_review field.
	 * @var        string
	 */
	protected $film_review;

	/**
	 * The value for the film_startdate field.
	 * @var        string
	 */
	protected $film_startdate;

	/**
	 * The value for the film_enddate field.
	 * @var        string
	 */
	protected $film_enddate;

	/**
	 * The value for the fk_film_sponsor_id field.
	 * @var        int
	 */
	protected $fk_film_sponsor_id;

	/**
	 * The value for the film_bitrate_minimum field.
	 * @var        int
	 */
	protected $film_bitrate_minimum;

	/**
	 * The value for the film_bitrate_low field.
	 * @var        int
	 */
	protected $film_bitrate_low;

	/**
	 * The value for the film_bitrate_small field.
	 * @var        int
	 */
	protected $film_bitrate_small;

	/**
	 * The value for the film_bitrate_medium field.
	 * @var        int
	 */
	protected $film_bitrate_medium;

	/**
	 * The value for the film_bitrate_large field.
	 * @var        int
	 */
	protected $film_bitrate_large;

	/**
	 * The value for the film_bitrate_largest field.
	 * @var        int
	 */
	protected $film_bitrate_largest;

	/**
	 * The value for the film_use_sponsor_codes field.
	 * @var        int
	 */
	protected $film_use_sponsor_codes;

	/**
	 * The value for the film_allow_hostbyrequest field.
	 * @var        int
	 */
	protected $film_allow_hostbyrequest;

	/**
	 * The value for the film_allow_user_hosting field.
	 * @var        int
	 */
	protected $film_allow_user_hosting;

	/**
	 * The value for the film_alternate_template field.
	 * @var        int
	 */
	protected $film_alternate_template;

	/**
	 * The value for the film_alternate_opts field.
	 * @var        string
	 */
	protected $film_alternate_opts;

	/**
	 * The value for the film_cdn field.
	 * @var        int
	 */
	protected $film_cdn;

	/**
	 * The value for the film_share field.
	 * @var        int
	 */
	protected $film_share;

	/**
	 * The value for the film_preuser field.
	 * @var        int
	 */
	protected $film_preuser;

	/**
	 * The value for the film_freewithinvite field.
	 * @var        int
	 */
	protected $film_freewithinvite;

	/**
	 * The value for the film_free_screening field.
	 * @var        int
	 */
	protected $film_free_screening;

	/**
	 * The value for the film_twitter_tags field.
	 * @var        string
	 */
	protected $film_twitter_tags;

	/**
	 * The value for the fk_user_id field.
	 * @var        int
	 */
	protected $fk_user_id;

	/**
	 * The value for the film_website field.
	 * @var        string
	 */
	protected $film_website;

	/**
	 * The value for the film_facebook field.
	 * @var        string
	 */
	protected $film_facebook;

	/**
	 * The value for the film_twitter field.
	 * @var        string
	 */
	protected $film_twitter;

	/**
	 * The value for the film_youtube_trailer field.
	 * @var        string
	 */
	protected $film_youtube_trailer;

	/**
	 * The value for the film_ooyala_embed field.
	 * @var        string
	 */
	protected $film_ooyala_embed;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'FilmPeer';

	/**
	 * Get the [film_id] column value.
	 * 
	 * @return     int
	 */
	public function getFilmId()
	{
		return $this->film_id;
	}

	/**
	 * Get the [film_name] column value.
	 * 
	 * @return     string
	 */
	public function getFilmName()
	{
		return $this->film_name;
	}

	/**
	 * Get the [film_alt_name] column value.
	 * 
	 * @return     string
	 */
	public function getFilmAltName()
	{
		return $this->film_alt_name;
	}

	/**
	 * Get the [film_makers] column value.
	 * 
	 * @return     string
	 */
	public function getFilmMakers()
	{
		return $this->film_makers;
	}

	/**
	 * Get the [film_production_company] column value.
	 * 
	 * @return     string
	 */
	public function getFilmProductionCompany()
	{
		return $this->film_production_company;
	}

	/**
	 * Get the [film_logo] column value.
	 * 
	 * @return     string
	 */
	public function getFilmLogo()
	{
		return $this->film_logo;
	}

	/**
	 * Get the [film_homelogo] column value.
	 * 
	 * @return     string
	 */
	public function getFilmHomelogo()
	{
		return $this->film_homelogo;
	}

	/**
	 * Get the [film_trailer_file] column value.
	 * 
	 * @return     string
	 */
	public function getFilmTrailerFile()
	{
		return $this->film_trailer_file;
	}

	/**
	 * Get the [film_movie_file] column value.
	 * 
	 * @return     string
	 */
	public function getFilmMovieFile()
	{
		return $this->film_movie_file;
	}

	/**
	 * Get the [film_maker_message] column value.
	 * 
	 * @return     string
	 */
	public function getFilmMakerMessage()
	{
		return $this->film_maker_message;
	}

	/**
	 * Get the [film_ticket_price] column value.
	 * 
	 * @return     double
	 */
	public function getFilmTicketPrice()
	{
		return $this->film_ticket_price;
	}

	/**
	 * Get the [film_hostbyrequest_price] column value.
	 * 
	 * @return     double
	 */
	public function getFilmHostbyrequestPrice()
	{
		return $this->film_hostbyrequest_price;
	}

	/**
	 * Get the [film_status] column value.
	 * 
	 * @return     int
	 */
	public function getFilmStatus()
	{
		return $this->film_status;
	}

	/**
	 * Get the [film_featured] column value.
	 * 
	 * @return     int
	 */
	public function getFilmFeatured()
	{
		return $this->film_featured;
	}

	/**
	 * Get the [optionally formatted] temporal [film_created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFilmCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->film_created_at === null) {
			return null;
		}


		if ($this->film_created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->film_created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->film_created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [film_updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFilmUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->film_updated_at === null) {
			return null;
		}


		if ($this->film_updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->film_updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->film_updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [film_setup_price] column value.
	 * 
	 * @return     double
	 */
	public function getFilmSetupPrice()
	{
		return $this->film_setup_price;
	}

	/**
	 * Get the [film_info] column value.
	 * 
	 * @return     string
	 */
	public function getFilmInfo()
	{
		return $this->film_info;
	}

	/**
	 * Get the [film_cast] column value.
	 * 
	 * @return     string
	 */
	public function getFilmCast()
	{
		return $this->film_cast;
	}

	/**
	 * Get the [film_running_time] column value.
	 * 
	 * @return     string
	 */
	public function getFilmRunningTime()
	{
		return $this->film_running_time;
	}

	/**
	 * Get the [film_total_seats] column value.
	 * 
	 * @return     int
	 */
	public function getFilmTotalSeats()
	{
		return $this->film_total_seats;
	}

	/**
	 * Get the [film_short_name] column value.
	 * 
	 * @return     string
	 */
	public function getFilmShortName()
	{
		return $this->film_short_name;
	}

	/**
	 * Get the [film_synopsis] column value.
	 * 
	 * @return     string
	 */
	public function getFilmSynopsis()
	{
		return $this->film_synopsis;
	}

	/**
	 * Get the [film_still_image] column value.
	 * 
	 * @return     string
	 */
	public function getFilmStillImage()
	{
		return $this->film_still_image;
	}

	/**
	 * Get the [film_background_image] column value.
	 * 
	 * @return     string
	 */
	public function getFilmBackgroundImage()
	{
		return $this->film_background_image;
	}

	/**
	 * Get the [film_splash_image] column value.
	 * 
	 * @return     string
	 */
	public function getFilmSplashImage()
	{
		return $this->film_splash_image;
	}

	/**
	 * Get the [film_geoblocking_enabled] column value.
	 * 
	 * @return     int
	 */
	public function getFilmGeoblockingEnabled()
	{
		return $this->film_geoblocking_enabled;
	}

	/**
	 * Get the [film_geoblocking_type] column value.
	 * 
	 * @return     string
	 */
	public function getFilmGeoblockingType()
	{
		return $this->film_geoblocking_type;
	}

	/**
	 * Get the [film_short_url] column value.
	 * 
	 * @return     string
	 */
	public function getFilmShortUrl()
	{
		return $this->film_short_url;
	}

	/**
	 * Get the [film_review] column value.
	 * 
	 * @return     string
	 */
	public function getFilmReview()
	{
		return $this->film_review;
	}

	/**
	 * Get the [optionally formatted] temporal [film_startdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFilmStartdate($format = 'Y-m-d H:i:s')
	{
		if ($this->film_startdate === null) {
			return null;
		}


		if ($this->film_startdate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->film_startdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->film_startdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [film_enddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFilmEnddate($format = 'Y-m-d H:i:s')
	{
		if ($this->film_enddate === null) {
			return null;
		}


		if ($this->film_enddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->film_enddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->film_enddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [fk_film_sponsor_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkFilmSponsorId()
	{
		return $this->fk_film_sponsor_id;
	}

	/**
	 * Get the [film_bitrate_minimum] column value.
	 * 
	 * @return     int
	 */
	public function getFilmBitrateMinimum()
	{
		return $this->film_bitrate_minimum;
	}

	/**
	 * Get the [film_bitrate_low] column value.
	 * 
	 * @return     int
	 */
	public function getFilmBitrateLow()
	{
		return $this->film_bitrate_low;
	}

	/**
	 * Get the [film_bitrate_small] column value.
	 * 
	 * @return     int
	 */
	public function getFilmBitrateSmall()
	{
		return $this->film_bitrate_small;
	}

	/**
	 * Get the [film_bitrate_medium] column value.
	 * 
	 * @return     int
	 */
	public function getFilmBitrateMedium()
	{
		return $this->film_bitrate_medium;
	}

	/**
	 * Get the [film_bitrate_large] column value.
	 * 
	 * @return     int
	 */
	public function getFilmBitrateLarge()
	{
		return $this->film_bitrate_large;
	}

	/**
	 * Get the [film_bitrate_largest] column value.
	 * 
	 * @return     int
	 */
	public function getFilmBitrateLargest()
	{
		return $this->film_bitrate_largest;
	}

	/**
	 * Get the [film_use_sponsor_codes] column value.
	 * 
	 * @return     int
	 */
	public function getFilmUseSponsorCodes()
	{
		return $this->film_use_sponsor_codes;
	}

	/**
	 * Get the [film_allow_hostbyrequest] column value.
	 * 
	 * @return     int
	 */
	public function getFilmAllowHostbyrequest()
	{
		return $this->film_allow_hostbyrequest;
	}

	/**
	 * Get the [film_allow_user_hosting] column value.
	 * 
	 * @return     int
	 */
	public function getFilmAllowUserHosting()
	{
		return $this->film_allow_user_hosting;
	}

	/**
	 * Get the [film_alternate_template] column value.
	 * 
	 * @return     int
	 */
	public function getFilmAlternateTemplate()
	{
		return $this->film_alternate_template;
	}

	/**
	 * Get the [film_alternate_opts] column value.
	 * 
	 * @return     string
	 */
	public function getFilmAlternateOpts()
	{
		return $this->film_alternate_opts;
	}

	/**
	 * Get the [film_cdn] column value.
	 * 
	 * @return     int
	 */
	public function getFilmCdn()
	{
		return $this->film_cdn;
	}

	/**
	 * Get the [film_share] column value.
	 * 
	 * @return     int
	 */
	public function getFilmShare()
	{
		return $this->film_share;
	}

	/**
	 * Get the [film_preuser] column value.
	 * 
	 * @return     int
	 */
	public function getFilmPreuser()
	{
		return $this->film_preuser;
	}

	/**
	 * Get the [film_freewithinvite] column value.
	 * 
	 * @return     int
	 */
	public function getFilmFreewithinvite()
	{
		return $this->film_freewithinvite;
	}

	/**
	 * Get the [film_free_screening] column value.
	 * 
	 * @return     int
	 */
	public function getFilmFreeScreening()
	{
		return $this->film_free_screening;
	}

	/**
	 * Get the [film_twitter_tags] column value.
	 * 
	 * @return     string
	 */
	public function getFilmTwitterTags()
	{
		return $this->film_twitter_tags;
	}

	/**
	 * Get the [fk_user_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkUserId()
	{
		return $this->fk_user_id;
	}

	/**
	 * Get the [film_website] column value.
	 * 
	 * @return     string
	 */
	public function getFilmWebsite()
	{
		return $this->film_website;
	}

	/**
	 * Get the [film_facebook] column value.
	 * 
	 * @return     string
	 */
	public function getFilmFacebook()
	{
		return $this->film_facebook;
	}

	/**
	 * Get the [film_twitter] column value.
	 * 
	 * @return     string
	 */
	public function getFilmTwitter()
	{
		return $this->film_twitter;
	}

	/**
	 * Get the [film_youtube_trailer] column value.
	 * 
	 * @return     string
	 */
	public function getFilmYoutubeTrailer()
	{
		return $this->film_youtube_trailer;
	}

	/**
	 * Get the [film_ooyala_embed] column value.
	 * 
	 * @return     string
	 */
	public function getFilmOoyalaEmbed()
	{
		return $this->film_ooyala_embed;
	}

	/**
	 * Set the value of [film_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_id !== $v) {
			$this->film_id = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_ID;
		}

		return $this;
	} // setFilmId()

	/**
	 * Set the value of [film_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_name !== $v) {
			$this->film_name = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_NAME;
		}

		return $this;
	} // setFilmName()

	/**
	 * Set the value of [film_alt_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmAltName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_alt_name !== $v) {
			$this->film_alt_name = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_ALT_NAME;
		}

		return $this;
	} // setFilmAltName()

	/**
	 * Set the value of [film_makers] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmMakers($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_makers !== $v) {
			$this->film_makers = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_MAKERS;
		}

		return $this;
	} // setFilmMakers()

	/**
	 * Set the value of [film_production_company] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmProductionCompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_production_company !== $v) {
			$this->film_production_company = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_PRODUCTION_COMPANY;
		}

		return $this;
	} // setFilmProductionCompany()

	/**
	 * Set the value of [film_logo] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmLogo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_logo !== $v) {
			$this->film_logo = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_LOGO;
		}

		return $this;
	} // setFilmLogo()

	/**
	 * Set the value of [film_homelogo] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmHomelogo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_homelogo !== $v) {
			$this->film_homelogo = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_HOMELOGO;
		}

		return $this;
	} // setFilmHomelogo()

	/**
	 * Set the value of [film_trailer_file] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmTrailerFile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_trailer_file !== $v) {
			$this->film_trailer_file = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_TRAILER_FILE;
		}

		return $this;
	} // setFilmTrailerFile()

	/**
	 * Set the value of [film_movie_file] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmMovieFile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_movie_file !== $v) {
			$this->film_movie_file = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_MOVIE_FILE;
		}

		return $this;
	} // setFilmMovieFile()

	/**
	 * Set the value of [film_maker_message] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmMakerMessage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_maker_message !== $v) {
			$this->film_maker_message = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_MAKER_MESSAGE;
		}

		return $this;
	} // setFilmMakerMessage()

	/**
	 * Set the value of [film_ticket_price] column.
	 * 
	 * @param      double $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmTicketPrice($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->film_ticket_price !== $v) {
			$this->film_ticket_price = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_TICKET_PRICE;
		}

		return $this;
	} // setFilmTicketPrice()

	/**
	 * Set the value of [film_hostbyrequest_price] column.
	 * 
	 * @param      double $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmHostbyrequestPrice($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->film_hostbyrequest_price !== $v) {
			$this->film_hostbyrequest_price = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_HOSTBYREQUEST_PRICE;
		}

		return $this;
	} // setFilmHostbyrequestPrice()

	/**
	 * Set the value of [film_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_status !== $v) {
			$this->film_status = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_STATUS;
		}

		return $this;
	} // setFilmStatus()

	/**
	 * Set the value of [film_featured] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmFeatured($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_featured !== $v) {
			$this->film_featured = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_FEATURED;
		}

		return $this;
	} // setFilmFeatured()

	/**
	 * Sets the value of [film_created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->film_created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->film_created_at !== null && $tmpDt = new DateTime($this->film_created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->film_created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = FilmPeer::FILM_CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setFilmCreatedAt()

	/**
	 * Sets the value of [film_updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->film_updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->film_updated_at !== null && $tmpDt = new DateTime($this->film_updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->film_updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = FilmPeer::FILM_UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setFilmUpdatedAt()

	/**
	 * Set the value of [film_setup_price] column.
	 * 
	 * @param      double $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmSetupPrice($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->film_setup_price !== $v) {
			$this->film_setup_price = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_SETUP_PRICE;
		}

		return $this;
	} // setFilmSetupPrice()

	/**
	 * Set the value of [film_info] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmInfo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_info !== $v) {
			$this->film_info = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_INFO;
		}

		return $this;
	} // setFilmInfo()

	/**
	 * Set the value of [film_cast] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmCast($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_cast !== $v) {
			$this->film_cast = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_CAST;
		}

		return $this;
	} // setFilmCast()

	/**
	 * Set the value of [film_running_time] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmRunningTime($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_running_time !== $v) {
			$this->film_running_time = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_RUNNING_TIME;
		}

		return $this;
	} // setFilmRunningTime()

	/**
	 * Set the value of [film_total_seats] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmTotalSeats($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_total_seats !== $v) {
			$this->film_total_seats = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_TOTAL_SEATS;
		}

		return $this;
	} // setFilmTotalSeats()

	/**
	 * Set the value of [film_short_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmShortName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_short_name !== $v) {
			$this->film_short_name = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_SHORT_NAME;
		}

		return $this;
	} // setFilmShortName()

	/**
	 * Set the value of [film_synopsis] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmSynopsis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_synopsis !== $v) {
			$this->film_synopsis = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_SYNOPSIS;
		}

		return $this;
	} // setFilmSynopsis()

	/**
	 * Set the value of [film_still_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmStillImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_still_image !== $v) {
			$this->film_still_image = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_STILL_IMAGE;
		}

		return $this;
	} // setFilmStillImage()

	/**
	 * Set the value of [film_background_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmBackgroundImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_background_image !== $v) {
			$this->film_background_image = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_BACKGROUND_IMAGE;
		}

		return $this;
	} // setFilmBackgroundImage()

	/**
	 * Set the value of [film_splash_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmSplashImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_splash_image !== $v) {
			$this->film_splash_image = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_SPLASH_IMAGE;
		}

		return $this;
	} // setFilmSplashImage()

	/**
	 * Set the value of [film_geoblocking_enabled] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmGeoblockingEnabled($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_geoblocking_enabled !== $v) {
			$this->film_geoblocking_enabled = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_GEOBLOCKING_ENABLED;
		}

		return $this;
	} // setFilmGeoblockingEnabled()

	/**
	 * Set the value of [film_geoblocking_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmGeoblockingType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_geoblocking_type !== $v) {
			$this->film_geoblocking_type = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_GEOBLOCKING_TYPE;
		}

		return $this;
	} // setFilmGeoblockingType()

	/**
	 * Set the value of [film_short_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmShortUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_short_url !== $v) {
			$this->film_short_url = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_SHORT_URL;
		}

		return $this;
	} // setFilmShortUrl()

	/**
	 * Set the value of [film_review] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmReview($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_review !== $v) {
			$this->film_review = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_REVIEW;
		}

		return $this;
	} // setFilmReview()

	/**
	 * Sets the value of [film_startdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmStartdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->film_startdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->film_startdate !== null && $tmpDt = new DateTime($this->film_startdate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->film_startdate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = FilmPeer::FILM_STARTDATE;
			}
		} // if either are not null

		return $this;
	} // setFilmStartdate()

	/**
	 * Sets the value of [film_enddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmEnddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->film_enddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->film_enddate !== null && $tmpDt = new DateTime($this->film_enddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->film_enddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = FilmPeer::FILM_ENDDATE;
			}
		} // if either are not null

		return $this;
	} // setFilmEnddate()

	/**
	 * Set the value of [fk_film_sponsor_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFkFilmSponsorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_film_sponsor_id !== $v) {
			$this->fk_film_sponsor_id = $v;
			$this->modifiedColumns[] = FilmPeer::FK_FILM_SPONSOR_ID;
		}

		return $this;
	} // setFkFilmSponsorId()

	/**
	 * Set the value of [film_bitrate_minimum] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmBitrateMinimum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_bitrate_minimum !== $v) {
			$this->film_bitrate_minimum = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_BITRATE_MINIMUM;
		}

		return $this;
	} // setFilmBitrateMinimum()

	/**
	 * Set the value of [film_bitrate_low] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmBitrateLow($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_bitrate_low !== $v) {
			$this->film_bitrate_low = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_BITRATE_LOW;
		}

		return $this;
	} // setFilmBitrateLow()

	/**
	 * Set the value of [film_bitrate_small] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmBitrateSmall($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_bitrate_small !== $v) {
			$this->film_bitrate_small = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_BITRATE_SMALL;
		}

		return $this;
	} // setFilmBitrateSmall()

	/**
	 * Set the value of [film_bitrate_medium] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmBitrateMedium($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_bitrate_medium !== $v) {
			$this->film_bitrate_medium = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_BITRATE_MEDIUM;
		}

		return $this;
	} // setFilmBitrateMedium()

	/**
	 * Set the value of [film_bitrate_large] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmBitrateLarge($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_bitrate_large !== $v) {
			$this->film_bitrate_large = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_BITRATE_LARGE;
		}

		return $this;
	} // setFilmBitrateLarge()

	/**
	 * Set the value of [film_bitrate_largest] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmBitrateLargest($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_bitrate_largest !== $v) {
			$this->film_bitrate_largest = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_BITRATE_LARGEST;
		}

		return $this;
	} // setFilmBitrateLargest()

	/**
	 * Set the value of [film_use_sponsor_codes] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmUseSponsorCodes($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_use_sponsor_codes !== $v) {
			$this->film_use_sponsor_codes = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_USE_SPONSOR_CODES;
		}

		return $this;
	} // setFilmUseSponsorCodes()

	/**
	 * Set the value of [film_allow_hostbyrequest] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmAllowHostbyrequest($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_allow_hostbyrequest !== $v) {
			$this->film_allow_hostbyrequest = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_ALLOW_HOSTBYREQUEST;
		}

		return $this;
	} // setFilmAllowHostbyrequest()

	/**
	 * Set the value of [film_allow_user_hosting] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmAllowUserHosting($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_allow_user_hosting !== $v) {
			$this->film_allow_user_hosting = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_ALLOW_USER_HOSTING;
		}

		return $this;
	} // setFilmAllowUserHosting()

	/**
	 * Set the value of [film_alternate_template] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmAlternateTemplate($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_alternate_template !== $v) {
			$this->film_alternate_template = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_ALTERNATE_TEMPLATE;
		}

		return $this;
	} // setFilmAlternateTemplate()

	/**
	 * Set the value of [film_alternate_opts] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmAlternateOpts($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_alternate_opts !== $v) {
			$this->film_alternate_opts = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_ALTERNATE_OPTS;
		}

		return $this;
	} // setFilmAlternateOpts()

	/**
	 * Set the value of [film_cdn] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmCdn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_cdn !== $v) {
			$this->film_cdn = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_CDN;
		}

		return $this;
	} // setFilmCdn()

	/**
	 * Set the value of [film_share] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmShare($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_share !== $v) {
			$this->film_share = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_SHARE;
		}

		return $this;
	} // setFilmShare()

	/**
	 * Set the value of [film_preuser] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmPreuser($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_preuser !== $v) {
			$this->film_preuser = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_PREUSER;
		}

		return $this;
	} // setFilmPreuser()

	/**
	 * Set the value of [film_freewithinvite] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmFreewithinvite($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_freewithinvite !== $v) {
			$this->film_freewithinvite = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_FREEWITHINVITE;
		}

		return $this;
	} // setFilmFreewithinvite()

	/**
	 * Set the value of [film_free_screening] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmFreeScreening($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->film_free_screening !== $v) {
			$this->film_free_screening = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_FREE_SCREENING;
		}

		return $this;
	} // setFilmFreeScreening()

	/**
	 * Set the value of [film_twitter_tags] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmTwitterTags($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_twitter_tags !== $v) {
			$this->film_twitter_tags = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_TWITTER_TAGS;
		}

		return $this;
	} // setFilmTwitterTags()

	/**
	 * Set the value of [fk_user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFkUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_user_id !== $v) {
			$this->fk_user_id = $v;
			$this->modifiedColumns[] = FilmPeer::FK_USER_ID;
		}

		return $this;
	} // setFkUserId()

	/**
	 * Set the value of [film_website] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmWebsite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_website !== $v) {
			$this->film_website = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_WEBSITE;
		}

		return $this;
	} // setFilmWebsite()

	/**
	 * Set the value of [film_facebook] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmFacebook($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_facebook !== $v) {
			$this->film_facebook = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_FACEBOOK;
		}

		return $this;
	} // setFilmFacebook()

	/**
	 * Set the value of [film_twitter] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmTwitter($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_twitter !== $v) {
			$this->film_twitter = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_TWITTER;
		}

		return $this;
	} // setFilmTwitter()

	/**
	 * Set the value of [film_youtube_trailer] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmYoutubeTrailer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_youtube_trailer !== $v) {
			$this->film_youtube_trailer = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_YOUTUBE_TRAILER;
		}

		return $this;
	} // setFilmYoutubeTrailer()

	/**
	 * Set the value of [film_ooyala_embed] column.
	 * 
	 * @param      string $v new value
	 * @return     Film The current object (for fluent API support)
	 */
	public function setFilmOoyalaEmbed($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->film_ooyala_embed !== $v) {
			$this->film_ooyala_embed = $v;
			$this->modifiedColumns[] = FilmPeer::FILM_OOYALA_EMBED;
		}

		return $this;
	} // setFilmOoyalaEmbed()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->film_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->film_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->film_alt_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->film_makers = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->film_production_company = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->film_logo = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->film_homelogo = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->film_trailer_file = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->film_movie_file = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->film_maker_message = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->film_ticket_price = ($row[$startcol + 10] !== null) ? (double) $row[$startcol + 10] : null;
			$this->film_hostbyrequest_price = ($row[$startcol + 11] !== null) ? (double) $row[$startcol + 11] : null;
			$this->film_status = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->film_featured = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->film_created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->film_updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->film_setup_price = ($row[$startcol + 16] !== null) ? (double) $row[$startcol + 16] : null;
			$this->film_info = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->film_cast = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->film_running_time = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->film_total_seats = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->film_short_name = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->film_synopsis = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->film_still_image = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->film_background_image = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->film_splash_image = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->film_geoblocking_enabled = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->film_geoblocking_type = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->film_short_url = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->film_review = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->film_startdate = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->film_enddate = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->fk_film_sponsor_id = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->film_bitrate_minimum = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->film_bitrate_low = ($row[$startcol + 34] !== null) ? (int) $row[$startcol + 34] : null;
			$this->film_bitrate_small = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->film_bitrate_medium = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->film_bitrate_large = ($row[$startcol + 37] !== null) ? (int) $row[$startcol + 37] : null;
			$this->film_bitrate_largest = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->film_use_sponsor_codes = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->film_allow_hostbyrequest = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->film_allow_user_hosting = ($row[$startcol + 41] !== null) ? (int) $row[$startcol + 41] : null;
			$this->film_alternate_template = ($row[$startcol + 42] !== null) ? (int) $row[$startcol + 42] : null;
			$this->film_alternate_opts = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->film_cdn = ($row[$startcol + 44] !== null) ? (int) $row[$startcol + 44] : null;
			$this->film_share = ($row[$startcol + 45] !== null) ? (int) $row[$startcol + 45] : null;
			$this->film_preuser = ($row[$startcol + 46] !== null) ? (int) $row[$startcol + 46] : null;
			$this->film_freewithinvite = ($row[$startcol + 47] !== null) ? (int) $row[$startcol + 47] : null;
			$this->film_free_screening = ($row[$startcol + 48] !== null) ? (int) $row[$startcol + 48] : null;
			$this->film_twitter_tags = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->fk_user_id = ($row[$startcol + 50] !== null) ? (int) $row[$startcol + 50] : null;
			$this->film_website = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->film_facebook = ($row[$startcol + 52] !== null) ? (string) $row[$startcol + 52] : null;
			$this->film_twitter = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->film_youtube_trailer = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->film_ooyala_embed = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 56; // 56 = FilmPeer::NUM_COLUMNS - FilmPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Film object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FilmPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = FilmPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FilmPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFilm:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				FilmPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFilm:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FilmPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFilm:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFilm:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				FilmPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = FilmPeer::FILM_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FilmPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setFilmId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += FilmPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = FilmPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FilmPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getFilmId();
				break;
			case 1:
				return $this->getFilmName();
				break;
			case 2:
				return $this->getFilmAltName();
				break;
			case 3:
				return $this->getFilmMakers();
				break;
			case 4:
				return $this->getFilmProductionCompany();
				break;
			case 5:
				return $this->getFilmLogo();
				break;
			case 6:
				return $this->getFilmHomelogo();
				break;
			case 7:
				return $this->getFilmTrailerFile();
				break;
			case 8:
				return $this->getFilmMovieFile();
				break;
			case 9:
				return $this->getFilmMakerMessage();
				break;
			case 10:
				return $this->getFilmTicketPrice();
				break;
			case 11:
				return $this->getFilmHostbyrequestPrice();
				break;
			case 12:
				return $this->getFilmStatus();
				break;
			case 13:
				return $this->getFilmFeatured();
				break;
			case 14:
				return $this->getFilmCreatedAt();
				break;
			case 15:
				return $this->getFilmUpdatedAt();
				break;
			case 16:
				return $this->getFilmSetupPrice();
				break;
			case 17:
				return $this->getFilmInfo();
				break;
			case 18:
				return $this->getFilmCast();
				break;
			case 19:
				return $this->getFilmRunningTime();
				break;
			case 20:
				return $this->getFilmTotalSeats();
				break;
			case 21:
				return $this->getFilmShortName();
				break;
			case 22:
				return $this->getFilmSynopsis();
				break;
			case 23:
				return $this->getFilmStillImage();
				break;
			case 24:
				return $this->getFilmBackgroundImage();
				break;
			case 25:
				return $this->getFilmSplashImage();
				break;
			case 26:
				return $this->getFilmGeoblockingEnabled();
				break;
			case 27:
				return $this->getFilmGeoblockingType();
				break;
			case 28:
				return $this->getFilmShortUrl();
				break;
			case 29:
				return $this->getFilmReview();
				break;
			case 30:
				return $this->getFilmStartdate();
				break;
			case 31:
				return $this->getFilmEnddate();
				break;
			case 32:
				return $this->getFkFilmSponsorId();
				break;
			case 33:
				return $this->getFilmBitrateMinimum();
				break;
			case 34:
				return $this->getFilmBitrateLow();
				break;
			case 35:
				return $this->getFilmBitrateSmall();
				break;
			case 36:
				return $this->getFilmBitrateMedium();
				break;
			case 37:
				return $this->getFilmBitrateLarge();
				break;
			case 38:
				return $this->getFilmBitrateLargest();
				break;
			case 39:
				return $this->getFilmUseSponsorCodes();
				break;
			case 40:
				return $this->getFilmAllowHostbyrequest();
				break;
			case 41:
				return $this->getFilmAllowUserHosting();
				break;
			case 42:
				return $this->getFilmAlternateTemplate();
				break;
			case 43:
				return $this->getFilmAlternateOpts();
				break;
			case 44:
				return $this->getFilmCdn();
				break;
			case 45:
				return $this->getFilmShare();
				break;
			case 46:
				return $this->getFilmPreuser();
				break;
			case 47:
				return $this->getFilmFreewithinvite();
				break;
			case 48:
				return $this->getFilmFreeScreening();
				break;
			case 49:
				return $this->getFilmTwitterTags();
				break;
			case 50:
				return $this->getFkUserId();
				break;
			case 51:
				return $this->getFilmWebsite();
				break;
			case 52:
				return $this->getFilmFacebook();
				break;
			case 53:
				return $this->getFilmTwitter();
				break;
			case 54:
				return $this->getFilmYoutubeTrailer();
				break;
			case 55:
				return $this->getFilmOoyalaEmbed();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = FilmPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getFilmId(),
			$keys[1] => $this->getFilmName(),
			$keys[2] => $this->getFilmAltName(),
			$keys[3] => $this->getFilmMakers(),
			$keys[4] => $this->getFilmProductionCompany(),
			$keys[5] => $this->getFilmLogo(),
			$keys[6] => $this->getFilmHomelogo(),
			$keys[7] => $this->getFilmTrailerFile(),
			$keys[8] => $this->getFilmMovieFile(),
			$keys[9] => $this->getFilmMakerMessage(),
			$keys[10] => $this->getFilmTicketPrice(),
			$keys[11] => $this->getFilmHostbyrequestPrice(),
			$keys[12] => $this->getFilmStatus(),
			$keys[13] => $this->getFilmFeatured(),
			$keys[14] => $this->getFilmCreatedAt(),
			$keys[15] => $this->getFilmUpdatedAt(),
			$keys[16] => $this->getFilmSetupPrice(),
			$keys[17] => $this->getFilmInfo(),
			$keys[18] => $this->getFilmCast(),
			$keys[19] => $this->getFilmRunningTime(),
			$keys[20] => $this->getFilmTotalSeats(),
			$keys[21] => $this->getFilmShortName(),
			$keys[22] => $this->getFilmSynopsis(),
			$keys[23] => $this->getFilmStillImage(),
			$keys[24] => $this->getFilmBackgroundImage(),
			$keys[25] => $this->getFilmSplashImage(),
			$keys[26] => $this->getFilmGeoblockingEnabled(),
			$keys[27] => $this->getFilmGeoblockingType(),
			$keys[28] => $this->getFilmShortUrl(),
			$keys[29] => $this->getFilmReview(),
			$keys[30] => $this->getFilmStartdate(),
			$keys[31] => $this->getFilmEnddate(),
			$keys[32] => $this->getFkFilmSponsorId(),
			$keys[33] => $this->getFilmBitrateMinimum(),
			$keys[34] => $this->getFilmBitrateLow(),
			$keys[35] => $this->getFilmBitrateSmall(),
			$keys[36] => $this->getFilmBitrateMedium(),
			$keys[37] => $this->getFilmBitrateLarge(),
			$keys[38] => $this->getFilmBitrateLargest(),
			$keys[39] => $this->getFilmUseSponsorCodes(),
			$keys[40] => $this->getFilmAllowHostbyrequest(),
			$keys[41] => $this->getFilmAllowUserHosting(),
			$keys[42] => $this->getFilmAlternateTemplate(),
			$keys[43] => $this->getFilmAlternateOpts(),
			$keys[44] => $this->getFilmCdn(),
			$keys[45] => $this->getFilmShare(),
			$keys[46] => $this->getFilmPreuser(),
			$keys[47] => $this->getFilmFreewithinvite(),
			$keys[48] => $this->getFilmFreeScreening(),
			$keys[49] => $this->getFilmTwitterTags(),
			$keys[50] => $this->getFkUserId(),
			$keys[51] => $this->getFilmWebsite(),
			$keys[52] => $this->getFilmFacebook(),
			$keys[53] => $this->getFilmTwitter(),
			$keys[54] => $this->getFilmYoutubeTrailer(),
			$keys[55] => $this->getFilmOoyalaEmbed(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FilmPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setFilmId($value);
				break;
			case 1:
				$this->setFilmName($value);
				break;
			case 2:
				$this->setFilmAltName($value);
				break;
			case 3:
				$this->setFilmMakers($value);
				break;
			case 4:
				$this->setFilmProductionCompany($value);
				break;
			case 5:
				$this->setFilmLogo($value);
				break;
			case 6:
				$this->setFilmHomelogo($value);
				break;
			case 7:
				$this->setFilmTrailerFile($value);
				break;
			case 8:
				$this->setFilmMovieFile($value);
				break;
			case 9:
				$this->setFilmMakerMessage($value);
				break;
			case 10:
				$this->setFilmTicketPrice($value);
				break;
			case 11:
				$this->setFilmHostbyrequestPrice($value);
				break;
			case 12:
				$this->setFilmStatus($value);
				break;
			case 13:
				$this->setFilmFeatured($value);
				break;
			case 14:
				$this->setFilmCreatedAt($value);
				break;
			case 15:
				$this->setFilmUpdatedAt($value);
				break;
			case 16:
				$this->setFilmSetupPrice($value);
				break;
			case 17:
				$this->setFilmInfo($value);
				break;
			case 18:
				$this->setFilmCast($value);
				break;
			case 19:
				$this->setFilmRunningTime($value);
				break;
			case 20:
				$this->setFilmTotalSeats($value);
				break;
			case 21:
				$this->setFilmShortName($value);
				break;
			case 22:
				$this->setFilmSynopsis($value);
				break;
			case 23:
				$this->setFilmStillImage($value);
				break;
			case 24:
				$this->setFilmBackgroundImage($value);
				break;
			case 25:
				$this->setFilmSplashImage($value);
				break;
			case 26:
				$this->setFilmGeoblockingEnabled($value);
				break;
			case 27:
				$this->setFilmGeoblockingType($value);
				break;
			case 28:
				$this->setFilmShortUrl($value);
				break;
			case 29:
				$this->setFilmReview($value);
				break;
			case 30:
				$this->setFilmStartdate($value);
				break;
			case 31:
				$this->setFilmEnddate($value);
				break;
			case 32:
				$this->setFkFilmSponsorId($value);
				break;
			case 33:
				$this->setFilmBitrateMinimum($value);
				break;
			case 34:
				$this->setFilmBitrateLow($value);
				break;
			case 35:
				$this->setFilmBitrateSmall($value);
				break;
			case 36:
				$this->setFilmBitrateMedium($value);
				break;
			case 37:
				$this->setFilmBitrateLarge($value);
				break;
			case 38:
				$this->setFilmBitrateLargest($value);
				break;
			case 39:
				$this->setFilmUseSponsorCodes($value);
				break;
			case 40:
				$this->setFilmAllowHostbyrequest($value);
				break;
			case 41:
				$this->setFilmAllowUserHosting($value);
				break;
			case 42:
				$this->setFilmAlternateTemplate($value);
				break;
			case 43:
				$this->setFilmAlternateOpts($value);
				break;
			case 44:
				$this->setFilmCdn($value);
				break;
			case 45:
				$this->setFilmShare($value);
				break;
			case 46:
				$this->setFilmPreuser($value);
				break;
			case 47:
				$this->setFilmFreewithinvite($value);
				break;
			case 48:
				$this->setFilmFreeScreening($value);
				break;
			case 49:
				$this->setFilmTwitterTags($value);
				break;
			case 50:
				$this->setFkUserId($value);
				break;
			case 51:
				$this->setFilmWebsite($value);
				break;
			case 52:
				$this->setFilmFacebook($value);
				break;
			case 53:
				$this->setFilmTwitter($value);
				break;
			case 54:
				$this->setFilmYoutubeTrailer($value);
				break;
			case 55:
				$this->setFilmOoyalaEmbed($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = FilmPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setFilmId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFilmName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFilmAltName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFilmMakers($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFilmProductionCompany($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFilmLogo($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFilmHomelogo($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setFilmTrailerFile($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setFilmMovieFile($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setFilmMakerMessage($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFilmTicketPrice($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFilmHostbyrequestPrice($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setFilmStatus($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setFilmFeatured($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setFilmCreatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFilmUpdatedAt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFilmSetupPrice($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setFilmInfo($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setFilmCast($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setFilmRunningTime($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setFilmTotalSeats($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setFilmShortName($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setFilmSynopsis($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setFilmStillImage($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setFilmBackgroundImage($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setFilmSplashImage($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setFilmGeoblockingEnabled($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setFilmGeoblockingType($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setFilmShortUrl($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setFilmReview($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setFilmStartdate($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setFilmEnddate($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setFkFilmSponsorId($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setFilmBitrateMinimum($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setFilmBitrateLow($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setFilmBitrateSmall($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setFilmBitrateMedium($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setFilmBitrateLarge($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setFilmBitrateLargest($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setFilmUseSponsorCodes($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setFilmAllowHostbyrequest($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setFilmAllowUserHosting($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setFilmAlternateTemplate($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setFilmAlternateOpts($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setFilmCdn($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setFilmShare($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setFilmPreuser($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setFilmFreewithinvite($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setFilmFreeScreening($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setFilmTwitterTags($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setFkUserId($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setFilmWebsite($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setFilmFacebook($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setFilmTwitter($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setFilmYoutubeTrailer($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setFilmOoyalaEmbed($arr[$keys[55]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FilmPeer::DATABASE_NAME);

		if ($this->isColumnModified(FilmPeer::FILM_ID)) $criteria->add(FilmPeer::FILM_ID, $this->film_id);
		if ($this->isColumnModified(FilmPeer::FILM_NAME)) $criteria->add(FilmPeer::FILM_NAME, $this->film_name);
		if ($this->isColumnModified(FilmPeer::FILM_ALT_NAME)) $criteria->add(FilmPeer::FILM_ALT_NAME, $this->film_alt_name);
		if ($this->isColumnModified(FilmPeer::FILM_MAKERS)) $criteria->add(FilmPeer::FILM_MAKERS, $this->film_makers);
		if ($this->isColumnModified(FilmPeer::FILM_PRODUCTION_COMPANY)) $criteria->add(FilmPeer::FILM_PRODUCTION_COMPANY, $this->film_production_company);
		if ($this->isColumnModified(FilmPeer::FILM_LOGO)) $criteria->add(FilmPeer::FILM_LOGO, $this->film_logo);
		if ($this->isColumnModified(FilmPeer::FILM_HOMELOGO)) $criteria->add(FilmPeer::FILM_HOMELOGO, $this->film_homelogo);
		if ($this->isColumnModified(FilmPeer::FILM_TRAILER_FILE)) $criteria->add(FilmPeer::FILM_TRAILER_FILE, $this->film_trailer_file);
		if ($this->isColumnModified(FilmPeer::FILM_MOVIE_FILE)) $criteria->add(FilmPeer::FILM_MOVIE_FILE, $this->film_movie_file);
		if ($this->isColumnModified(FilmPeer::FILM_MAKER_MESSAGE)) $criteria->add(FilmPeer::FILM_MAKER_MESSAGE, $this->film_maker_message);
		if ($this->isColumnModified(FilmPeer::FILM_TICKET_PRICE)) $criteria->add(FilmPeer::FILM_TICKET_PRICE, $this->film_ticket_price);
		if ($this->isColumnModified(FilmPeer::FILM_HOSTBYREQUEST_PRICE)) $criteria->add(FilmPeer::FILM_HOSTBYREQUEST_PRICE, $this->film_hostbyrequest_price);
		if ($this->isColumnModified(FilmPeer::FILM_STATUS)) $criteria->add(FilmPeer::FILM_STATUS, $this->film_status);
		if ($this->isColumnModified(FilmPeer::FILM_FEATURED)) $criteria->add(FilmPeer::FILM_FEATURED, $this->film_featured);
		if ($this->isColumnModified(FilmPeer::FILM_CREATED_AT)) $criteria->add(FilmPeer::FILM_CREATED_AT, $this->film_created_at);
		if ($this->isColumnModified(FilmPeer::FILM_UPDATED_AT)) $criteria->add(FilmPeer::FILM_UPDATED_AT, $this->film_updated_at);
		if ($this->isColumnModified(FilmPeer::FILM_SETUP_PRICE)) $criteria->add(FilmPeer::FILM_SETUP_PRICE, $this->film_setup_price);
		if ($this->isColumnModified(FilmPeer::FILM_INFO)) $criteria->add(FilmPeer::FILM_INFO, $this->film_info);
		if ($this->isColumnModified(FilmPeer::FILM_CAST)) $criteria->add(FilmPeer::FILM_CAST, $this->film_cast);
		if ($this->isColumnModified(FilmPeer::FILM_RUNNING_TIME)) $criteria->add(FilmPeer::FILM_RUNNING_TIME, $this->film_running_time);
		if ($this->isColumnModified(FilmPeer::FILM_TOTAL_SEATS)) $criteria->add(FilmPeer::FILM_TOTAL_SEATS, $this->film_total_seats);
		if ($this->isColumnModified(FilmPeer::FILM_SHORT_NAME)) $criteria->add(FilmPeer::FILM_SHORT_NAME, $this->film_short_name);
		if ($this->isColumnModified(FilmPeer::FILM_SYNOPSIS)) $criteria->add(FilmPeer::FILM_SYNOPSIS, $this->film_synopsis);
		if ($this->isColumnModified(FilmPeer::FILM_STILL_IMAGE)) $criteria->add(FilmPeer::FILM_STILL_IMAGE, $this->film_still_image);
		if ($this->isColumnModified(FilmPeer::FILM_BACKGROUND_IMAGE)) $criteria->add(FilmPeer::FILM_BACKGROUND_IMAGE, $this->film_background_image);
		if ($this->isColumnModified(FilmPeer::FILM_SPLASH_IMAGE)) $criteria->add(FilmPeer::FILM_SPLASH_IMAGE, $this->film_splash_image);
		if ($this->isColumnModified(FilmPeer::FILM_GEOBLOCKING_ENABLED)) $criteria->add(FilmPeer::FILM_GEOBLOCKING_ENABLED, $this->film_geoblocking_enabled);
		if ($this->isColumnModified(FilmPeer::FILM_GEOBLOCKING_TYPE)) $criteria->add(FilmPeer::FILM_GEOBLOCKING_TYPE, $this->film_geoblocking_type);
		if ($this->isColumnModified(FilmPeer::FILM_SHORT_URL)) $criteria->add(FilmPeer::FILM_SHORT_URL, $this->film_short_url);
		if ($this->isColumnModified(FilmPeer::FILM_REVIEW)) $criteria->add(FilmPeer::FILM_REVIEW, $this->film_review);
		if ($this->isColumnModified(FilmPeer::FILM_STARTDATE)) $criteria->add(FilmPeer::FILM_STARTDATE, $this->film_startdate);
		if ($this->isColumnModified(FilmPeer::FILM_ENDDATE)) $criteria->add(FilmPeer::FILM_ENDDATE, $this->film_enddate);
		if ($this->isColumnModified(FilmPeer::FK_FILM_SPONSOR_ID)) $criteria->add(FilmPeer::FK_FILM_SPONSOR_ID, $this->fk_film_sponsor_id);
		if ($this->isColumnModified(FilmPeer::FILM_BITRATE_MINIMUM)) $criteria->add(FilmPeer::FILM_BITRATE_MINIMUM, $this->film_bitrate_minimum);
		if ($this->isColumnModified(FilmPeer::FILM_BITRATE_LOW)) $criteria->add(FilmPeer::FILM_BITRATE_LOW, $this->film_bitrate_low);
		if ($this->isColumnModified(FilmPeer::FILM_BITRATE_SMALL)) $criteria->add(FilmPeer::FILM_BITRATE_SMALL, $this->film_bitrate_small);
		if ($this->isColumnModified(FilmPeer::FILM_BITRATE_MEDIUM)) $criteria->add(FilmPeer::FILM_BITRATE_MEDIUM, $this->film_bitrate_medium);
		if ($this->isColumnModified(FilmPeer::FILM_BITRATE_LARGE)) $criteria->add(FilmPeer::FILM_BITRATE_LARGE, $this->film_bitrate_large);
		if ($this->isColumnModified(FilmPeer::FILM_BITRATE_LARGEST)) $criteria->add(FilmPeer::FILM_BITRATE_LARGEST, $this->film_bitrate_largest);
		if ($this->isColumnModified(FilmPeer::FILM_USE_SPONSOR_CODES)) $criteria->add(FilmPeer::FILM_USE_SPONSOR_CODES, $this->film_use_sponsor_codes);
		if ($this->isColumnModified(FilmPeer::FILM_ALLOW_HOSTBYREQUEST)) $criteria->add(FilmPeer::FILM_ALLOW_HOSTBYREQUEST, $this->film_allow_hostbyrequest);
		if ($this->isColumnModified(FilmPeer::FILM_ALLOW_USER_HOSTING)) $criteria->add(FilmPeer::FILM_ALLOW_USER_HOSTING, $this->film_allow_user_hosting);
		if ($this->isColumnModified(FilmPeer::FILM_ALTERNATE_TEMPLATE)) $criteria->add(FilmPeer::FILM_ALTERNATE_TEMPLATE, $this->film_alternate_template);
		if ($this->isColumnModified(FilmPeer::FILM_ALTERNATE_OPTS)) $criteria->add(FilmPeer::FILM_ALTERNATE_OPTS, $this->film_alternate_opts);
		if ($this->isColumnModified(FilmPeer::FILM_CDN)) $criteria->add(FilmPeer::FILM_CDN, $this->film_cdn);
		if ($this->isColumnModified(FilmPeer::FILM_SHARE)) $criteria->add(FilmPeer::FILM_SHARE, $this->film_share);
		if ($this->isColumnModified(FilmPeer::FILM_PREUSER)) $criteria->add(FilmPeer::FILM_PREUSER, $this->film_preuser);
		if ($this->isColumnModified(FilmPeer::FILM_FREEWITHINVITE)) $criteria->add(FilmPeer::FILM_FREEWITHINVITE, $this->film_freewithinvite);
		if ($this->isColumnModified(FilmPeer::FILM_FREE_SCREENING)) $criteria->add(FilmPeer::FILM_FREE_SCREENING, $this->film_free_screening);
		if ($this->isColumnModified(FilmPeer::FILM_TWITTER_TAGS)) $criteria->add(FilmPeer::FILM_TWITTER_TAGS, $this->film_twitter_tags);
		if ($this->isColumnModified(FilmPeer::FK_USER_ID)) $criteria->add(FilmPeer::FK_USER_ID, $this->fk_user_id);
		if ($this->isColumnModified(FilmPeer::FILM_WEBSITE)) $criteria->add(FilmPeer::FILM_WEBSITE, $this->film_website);
		if ($this->isColumnModified(FilmPeer::FILM_FACEBOOK)) $criteria->add(FilmPeer::FILM_FACEBOOK, $this->film_facebook);
		if ($this->isColumnModified(FilmPeer::FILM_TWITTER)) $criteria->add(FilmPeer::FILM_TWITTER, $this->film_twitter);
		if ($this->isColumnModified(FilmPeer::FILM_YOUTUBE_TRAILER)) $criteria->add(FilmPeer::FILM_YOUTUBE_TRAILER, $this->film_youtube_trailer);
		if ($this->isColumnModified(FilmPeer::FILM_OOYALA_EMBED)) $criteria->add(FilmPeer::FILM_OOYALA_EMBED, $this->film_ooyala_embed);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FilmPeer::DATABASE_NAME);

		$criteria->add(FilmPeer::FILM_ID, $this->film_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getFilmId();
	}

	/**
	 * Generic method to set the primary key (film_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setFilmId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Film (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFilmName($this->film_name);

		$copyObj->setFilmAltName($this->film_alt_name);

		$copyObj->setFilmMakers($this->film_makers);

		$copyObj->setFilmProductionCompany($this->film_production_company);

		$copyObj->setFilmLogo($this->film_logo);

		$copyObj->setFilmHomelogo($this->film_homelogo);

		$copyObj->setFilmTrailerFile($this->film_trailer_file);

		$copyObj->setFilmMovieFile($this->film_movie_file);

		$copyObj->setFilmMakerMessage($this->film_maker_message);

		$copyObj->setFilmTicketPrice($this->film_ticket_price);

		$copyObj->setFilmHostbyrequestPrice($this->film_hostbyrequest_price);

		$copyObj->setFilmStatus($this->film_status);

		$copyObj->setFilmFeatured($this->film_featured);

		$copyObj->setFilmCreatedAt($this->film_created_at);

		$copyObj->setFilmUpdatedAt($this->film_updated_at);

		$copyObj->setFilmSetupPrice($this->film_setup_price);

		$copyObj->setFilmInfo($this->film_info);

		$copyObj->setFilmCast($this->film_cast);

		$copyObj->setFilmRunningTime($this->film_running_time);

		$copyObj->setFilmTotalSeats($this->film_total_seats);

		$copyObj->setFilmShortName($this->film_short_name);

		$copyObj->setFilmSynopsis($this->film_synopsis);

		$copyObj->setFilmStillImage($this->film_still_image);

		$copyObj->setFilmBackgroundImage($this->film_background_image);

		$copyObj->setFilmSplashImage($this->film_splash_image);

		$copyObj->setFilmGeoblockingEnabled($this->film_geoblocking_enabled);

		$copyObj->setFilmGeoblockingType($this->film_geoblocking_type);

		$copyObj->setFilmShortUrl($this->film_short_url);

		$copyObj->setFilmReview($this->film_review);

		$copyObj->setFilmStartdate($this->film_startdate);

		$copyObj->setFilmEnddate($this->film_enddate);

		$copyObj->setFkFilmSponsorId($this->fk_film_sponsor_id);

		$copyObj->setFilmBitrateMinimum($this->film_bitrate_minimum);

		$copyObj->setFilmBitrateLow($this->film_bitrate_low);

		$copyObj->setFilmBitrateSmall($this->film_bitrate_small);

		$copyObj->setFilmBitrateMedium($this->film_bitrate_medium);

		$copyObj->setFilmBitrateLarge($this->film_bitrate_large);

		$copyObj->setFilmBitrateLargest($this->film_bitrate_largest);

		$copyObj->setFilmUseSponsorCodes($this->film_use_sponsor_codes);

		$copyObj->setFilmAllowHostbyrequest($this->film_allow_hostbyrequest);

		$copyObj->setFilmAllowUserHosting($this->film_allow_user_hosting);

		$copyObj->setFilmAlternateTemplate($this->film_alternate_template);

		$copyObj->setFilmAlternateOpts($this->film_alternate_opts);

		$copyObj->setFilmCdn($this->film_cdn);

		$copyObj->setFilmShare($this->film_share);

		$copyObj->setFilmPreuser($this->film_preuser);

		$copyObj->setFilmFreewithinvite($this->film_freewithinvite);

		$copyObj->setFilmFreeScreening($this->film_free_screening);

		$copyObj->setFilmTwitterTags($this->film_twitter_tags);

		$copyObj->setFkUserId($this->fk_user_id);

		$copyObj->setFilmWebsite($this->film_website);

		$copyObj->setFilmFacebook($this->film_facebook);

		$copyObj->setFilmTwitter($this->film_twitter);

		$copyObj->setFilmYoutubeTrailer($this->film_youtube_trailer);

		$copyObj->setFilmOoyalaEmbed($this->film_ooyala_embed);


		$copyObj->setNew(true);

		$copyObj->setFilmId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Film Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FilmPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FilmPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseFilm:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseFilm::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseFilm
