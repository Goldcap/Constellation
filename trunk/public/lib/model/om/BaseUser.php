<?php

/**
 * Base class that represents a row from the 'user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:36 PM EDT
 *
 * @package    lib.model.om
 */
abstract class BaseUser extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserPeer
	 */
	protected static $peer;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the user_fb_uid field.
	 * @var        string
	 */
	protected $user_fb_uid;

	/**
	 * The value for the user_t_uid field.
	 * @var        string
	 */
	protected $user_t_uid;

	/**
	 * The value for the user_full_name field.
	 * @var        string
	 */
	protected $user_full_name;

	/**
	 * The value for the user_fname field.
	 * @var        string
	 */
	protected $user_fname;

	/**
	 * The value for the user_lname field.
	 * @var        string
	 */
	protected $user_lname;

	/**
	 * The value for the user_username field.
	 * @var        string
	 */
	protected $user_username;

	/**
	 * The value for the user_email field.
	 * @var        string
	 */
	protected $user_email;

	/**
	 * The value for the user_editable_email field.
	 * @var        string
	 */
	protected $user_editable_email;

	/**
	 * The value for the user_password field.
	 * @var        string
	 */
	protected $user_password;

	/**
	 * The value for the user_password_legacy field.
	 * @var        string
	 */
	protected $user_password_legacy;

	/**
	 * The value for the user_bio field.
	 * @var        string
	 */
	protected $user_bio;

	/**
	 * The value for the user_facebook_url field.
	 * @var        string
	 */
	protected $user_facebook_url;

	/**
	 * The value for the user_twitter_url field.
	 * @var        string
	 */
	protected $user_twitter_url;

	/**
	 * The value for the user_website_url field.
	 * @var        string
	 */
	protected $user_website_url;

	/**
	 * The value for the user_status field.
	 * @var        int
	 */
	protected $user_status;

	/**
	 * The value for the user_created_at field.
	 * @var        string
	 */
	protected $user_created_at;

	/**
	 * The value for the user_updated_at field.
	 * @var        string
	 */
	protected $user_updated_at;

	/**
	 * The value for the user_type field.
	 * @var        int
	 */
	protected $user_type;

	/**
	 * The value for the user_contact_email_id field.
	 * @var        int
	 */
	protected $user_contact_email_id;

	/**
	 * The value for the user_t_username field.
	 * @var        string
	 */
	protected $user_t_username;

	/**
	 * The value for the user_photo_url field.
	 * @var        string
	 */
	protected $user_photo_url;

	/**
	 * The value for the user_image field.
	 * @var        string
	 */
	protected $user_image;

	/**
	 * The value for the user_default_timezone field.
	 * @var        string
	 */
	protected $user_default_timezone;

	/**
	 * The value for the user_birthday_date field.
	 * @var        string
	 */
	protected $user_birthday_date;

	/**
	 * The value for the user_broadcast_status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $user_broadcast_status;

	/**
	 * The value for the user_t_oauth_token field.
	 * @var        string
	 */
	protected $user_t_oauth_token;

	/**
	 * The value for the user_t_oauth_token_secret field.
	 * @var        string
	 */
	protected $user_t_oauth_token_secret;

	/**
	 * The value for the user_ual field.
	 * @var        string
	 */
	protected $user_ual;

	/**
	 * The value for the user_optin field.
	 * @var        int
	 */
	protected $user_optin;

	/**
	 * The value for the user_optin_date field.
	 * @var        string
	 */
	protected $user_optin_date;

	/**
	 * The value for the user_tagline field.
	 * @var        string
	 */
	protected $user_tagline;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UserPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->user_broadcast_status = 0;
	}

	/**
	 * Initializes internal state of BaseUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [user_fb_uid] column value.
	 * 
	 * @return     string
	 */
	public function getUserFbUid()
	{
		return $this->user_fb_uid;
	}

	/**
	 * Get the [user_t_uid] column value.
	 * 
	 * @return     string
	 */
	public function getUserTUid()
	{
		return $this->user_t_uid;
	}

	/**
	 * Get the [user_full_name] column value.
	 * 
	 * @return     string
	 */
	public function getUserFullName()
	{
		return $this->user_full_name;
	}

	/**
	 * Get the [user_fname] column value.
	 * 
	 * @return     string
	 */
	public function getUserFname()
	{
		return $this->user_fname;
	}

	/**
	 * Get the [user_lname] column value.
	 * 
	 * @return     string
	 */
	public function getUserLname()
	{
		return $this->user_lname;
	}

	/**
	 * Get the [user_username] column value.
	 * 
	 * @return     string
	 */
	public function getUserUsername()
	{
		return $this->user_username;
	}

	/**
	 * Get the [user_email] column value.
	 * 
	 * @return     string
	 */
	public function getUserEmail()
	{
		return $this->user_email;
	}

	/**
	 * Get the [user_editable_email] column value.
	 * 
	 * @return     string
	 */
	public function getUserEditableEmail()
	{
		return $this->user_editable_email;
	}

	/**
	 * Get the [user_password] column value.
	 * 
	 * @return     string
	 */
	public function getUserPassword()
	{
		return $this->user_password;
	}

	/**
	 * Get the [user_password_legacy] column value.
	 * 
	 * @return     string
	 */
	public function getUserPasswordLegacy()
	{
		return $this->user_password_legacy;
	}

	/**
	 * Get the [user_bio] column value.
	 * 
	 * @return     string
	 */
	public function getUserBio()
	{
		return $this->user_bio;
	}

	/**
	 * Get the [user_facebook_url] column value.
	 * 
	 * @return     string
	 */
	public function getUserFacebookUrl()
	{
		return $this->user_facebook_url;
	}

	/**
	 * Get the [user_twitter_url] column value.
	 * 
	 * @return     string
	 */
	public function getUserTwitterUrl()
	{
		return $this->user_twitter_url;
	}

	/**
	 * Get the [user_website_url] column value.
	 * 
	 * @return     string
	 */
	public function getUserWebsiteUrl()
	{
		return $this->user_website_url;
	}

	/**
	 * Get the [user_status] column value.
	 * 
	 * @return     int
	 */
	public function getUserStatus()
	{
		return $this->user_status;
	}

	/**
	 * Get the [optionally formatted] temporal [user_created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUserCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->user_created_at === null) {
			return null;
		}


		if ($this->user_created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->user_created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->user_created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [user_updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUserUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->user_updated_at === null) {
			return null;
		}


		if ($this->user_updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->user_updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->user_updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [user_type] column value.
	 * 
	 * @return     int
	 */
	public function getUserType()
	{
		return $this->user_type;
	}

	/**
	 * Get the [user_contact_email_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserContactEmailId()
	{
		return $this->user_contact_email_id;
	}

	/**
	 * Get the [user_t_username] column value.
	 * 
	 * @return     string
	 */
	public function getUserTUsername()
	{
		return $this->user_t_username;
	}

	/**
	 * Get the [user_photo_url] column value.
	 * 
	 * @return     string
	 */
	public function getUserPhotoUrl()
	{
		return $this->user_photo_url;
	}

	/**
	 * Get the [user_image] column value.
	 * 
	 * @return     string
	 */
	public function getUserImage()
	{
		return $this->user_image;
	}

	/**
	 * Get the [user_default_timezone] column value.
	 * 
	 * @return     string
	 */
	public function getUserDefaultTimezone()
	{
		return $this->user_default_timezone;
	}

	/**
	 * Get the [optionally formatted] temporal [user_birthday_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUserBirthdayDate($format = 'Y-m-d')
	{
		if ($this->user_birthday_date === null) {
			return null;
		}


		if ($this->user_birthday_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->user_birthday_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->user_birthday_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [user_broadcast_status] column value.
	 * 
	 * @return     int
	 */
	public function getUserBroadcastStatus()
	{
		return $this->user_broadcast_status;
	}

	/**
	 * Get the [user_t_oauth_token] column value.
	 * 
	 * @return     string
	 */
	public function getUserTOauthToken()
	{
		return $this->user_t_oauth_token;
	}

	/**
	 * Get the [user_t_oauth_token_secret] column value.
	 * 
	 * @return     string
	 */
	public function getUserTOauthTokenSecret()
	{
		return $this->user_t_oauth_token_secret;
	}

	/**
	 * Get the [user_ual] column value.
	 * 
	 * @return     string
	 */
	public function getUserUal()
	{
		return $this->user_ual;
	}

	/**
	 * Get the [user_optin] column value.
	 * 
	 * @return     int
	 */
	public function getUserOptin()
	{
		return $this->user_optin;
	}

	/**
	 * Get the [optionally formatted] temporal [user_optin_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUserOptinDate($format = 'Y-m-d H:i:s')
	{
		if ($this->user_optin_date === null) {
			return null;
		}


		if ($this->user_optin_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->user_optin_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->user_optin_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [user_tagline] column value.
	 * 
	 * @return     string
	 */
	public function getUserTagline()
	{
		return $this->user_tagline;
	}

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = UserPeer::USER_ID;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [user_fb_uid] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserFbUid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_fb_uid !== $v) {
			$this->user_fb_uid = $v;
			$this->modifiedColumns[] = UserPeer::USER_FB_UID;
		}

		return $this;
	} // setUserFbUid()

	/**
	 * Set the value of [user_t_uid] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserTUid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_t_uid !== $v) {
			$this->user_t_uid = $v;
			$this->modifiedColumns[] = UserPeer::USER_T_UID;
		}

		return $this;
	} // setUserTUid()

	/**
	 * Set the value of [user_full_name] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserFullName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_full_name !== $v) {
			$this->user_full_name = $v;
			$this->modifiedColumns[] = UserPeer::USER_FULL_NAME;
		}

		return $this;
	} // setUserFullName()

	/**
	 * Set the value of [user_fname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserFname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_fname !== $v) {
			$this->user_fname = $v;
			$this->modifiedColumns[] = UserPeer::USER_FNAME;
		}

		return $this;
	} // setUserFname()

	/**
	 * Set the value of [user_lname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserLname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_lname !== $v) {
			$this->user_lname = $v;
			$this->modifiedColumns[] = UserPeer::USER_LNAME;
		}

		return $this;
	} // setUserLname()

	/**
	 * Set the value of [user_username] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_username !== $v) {
			$this->user_username = $v;
			$this->modifiedColumns[] = UserPeer::USER_USERNAME;
		}

		return $this;
	} // setUserUsername()

	/**
	 * Set the value of [user_email] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_email !== $v) {
			$this->user_email = $v;
			$this->modifiedColumns[] = UserPeer::USER_EMAIL;
		}

		return $this;
	} // setUserEmail()

	/**
	 * Set the value of [user_editable_email] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserEditableEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_editable_email !== $v) {
			$this->user_editable_email = $v;
			$this->modifiedColumns[] = UserPeer::USER_EDITABLE_EMAIL;
		}

		return $this;
	} // setUserEditableEmail()

	/**
	 * Set the value of [user_password] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_password !== $v) {
			$this->user_password = $v;
			$this->modifiedColumns[] = UserPeer::USER_PASSWORD;
		}

		return $this;
	} // setUserPassword()

	/**
	 * Set the value of [user_password_legacy] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserPasswordLegacy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_password_legacy !== $v) {
			$this->user_password_legacy = $v;
			$this->modifiedColumns[] = UserPeer::USER_PASSWORD_LEGACY;
		}

		return $this;
	} // setUserPasswordLegacy()

	/**
	 * Set the value of [user_bio] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserBio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_bio !== $v) {
			$this->user_bio = $v;
			$this->modifiedColumns[] = UserPeer::USER_BIO;
		}

		return $this;
	} // setUserBio()

	/**
	 * Set the value of [user_facebook_url] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserFacebookUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_facebook_url !== $v) {
			$this->user_facebook_url = $v;
			$this->modifiedColumns[] = UserPeer::USER_FACEBOOK_URL;
		}

		return $this;
	} // setUserFacebookUrl()

	/**
	 * Set the value of [user_twitter_url] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserTwitterUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_twitter_url !== $v) {
			$this->user_twitter_url = $v;
			$this->modifiedColumns[] = UserPeer::USER_TWITTER_URL;
		}

		return $this;
	} // setUserTwitterUrl()

	/**
	 * Set the value of [user_website_url] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserWebsiteUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_website_url !== $v) {
			$this->user_website_url = $v;
			$this->modifiedColumns[] = UserPeer::USER_WEBSITE_URL;
		}

		return $this;
	} // setUserWebsiteUrl()

	/**
	 * Set the value of [user_status] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_status !== $v) {
			$this->user_status = $v;
			$this->modifiedColumns[] = UserPeer::USER_STATUS;
		}

		return $this;
	} // setUserStatus()

	/**
	 * Sets the value of [user_created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->user_created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->user_created_at !== null && $tmpDt = new DateTime($this->user_created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->user_created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::USER_CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUserCreatedAt()

	/**
	 * Sets the value of [user_updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->user_updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->user_updated_at !== null && $tmpDt = new DateTime($this->user_updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->user_updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::USER_UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUserUpdatedAt()

	/**
	 * Set the value of [user_type] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_type !== $v) {
			$this->user_type = $v;
			$this->modifiedColumns[] = UserPeer::USER_TYPE;
		}

		return $this;
	} // setUserType()

	/**
	 * Set the value of [user_contact_email_id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserContactEmailId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_contact_email_id !== $v) {
			$this->user_contact_email_id = $v;
			$this->modifiedColumns[] = UserPeer::USER_CONTACT_EMAIL_ID;
		}

		return $this;
	} // setUserContactEmailId()

	/**
	 * Set the value of [user_t_username] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserTUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_t_username !== $v) {
			$this->user_t_username = $v;
			$this->modifiedColumns[] = UserPeer::USER_T_USERNAME;
		}

		return $this;
	} // setUserTUsername()

	/**
	 * Set the value of [user_photo_url] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserPhotoUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_photo_url !== $v) {
			$this->user_photo_url = $v;
			$this->modifiedColumns[] = UserPeer::USER_PHOTO_URL;
		}

		return $this;
	} // setUserPhotoUrl()

	/**
	 * Set the value of [user_image] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_image !== $v) {
			$this->user_image = $v;
			$this->modifiedColumns[] = UserPeer::USER_IMAGE;
		}

		return $this;
	} // setUserImage()

	/**
	 * Set the value of [user_default_timezone] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserDefaultTimezone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_default_timezone !== $v) {
			$this->user_default_timezone = $v;
			$this->modifiedColumns[] = UserPeer::USER_DEFAULT_TIMEZONE;
		}

		return $this;
	} // setUserDefaultTimezone()

	/**
	 * Sets the value of [user_birthday_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserBirthdayDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->user_birthday_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->user_birthday_date !== null && $tmpDt = new DateTime($this->user_birthday_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->user_birthday_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = UserPeer::USER_BIRTHDAY_DATE;
			}
		} // if either are not null

		return $this;
	} // setUserBirthdayDate()

	/**
	 * Set the value of [user_broadcast_status] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserBroadcastStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_broadcast_status !== $v || $this->isNew()) {
			$this->user_broadcast_status = $v;
			$this->modifiedColumns[] = UserPeer::USER_BROADCAST_STATUS;
		}

		return $this;
	} // setUserBroadcastStatus()

	/**
	 * Set the value of [user_t_oauth_token] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserTOauthToken($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_t_oauth_token !== $v) {
			$this->user_t_oauth_token = $v;
			$this->modifiedColumns[] = UserPeer::USER_T_OAUTH_TOKEN;
		}

		return $this;
	} // setUserTOauthToken()

	/**
	 * Set the value of [user_t_oauth_token_secret] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserTOauthTokenSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_t_oauth_token_secret !== $v) {
			$this->user_t_oauth_token_secret = $v;
			$this->modifiedColumns[] = UserPeer::USER_T_OAUTH_TOKEN_SECRET;
		}

		return $this;
	} // setUserTOauthTokenSecret()

	/**
	 * Set the value of [user_ual] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserUal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_ual !== $v) {
			$this->user_ual = $v;
			$this->modifiedColumns[] = UserPeer::USER_UAL;
		}

		return $this;
	} // setUserUal()

	/**
	 * Set the value of [user_optin] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserOptin($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_optin !== $v) {
			$this->user_optin = $v;
			$this->modifiedColumns[] = UserPeer::USER_OPTIN;
		}

		return $this;
	} // setUserOptin()

	/**
	 * Sets the value of [user_optin_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserOptinDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->user_optin_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->user_optin_date !== null && $tmpDt = new DateTime($this->user_optin_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->user_optin_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::USER_OPTIN_DATE;
			}
		} // if either are not null

		return $this;
	} // setUserOptinDate()

	/**
	 * Set the value of [user_tagline] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUserTagline($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_tagline !== $v) {
			$this->user_tagline = $v;
			$this->modifiedColumns[] = UserPeer::USER_TAGLINE;
		}

		return $this;
	} // setUserTagline()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->user_broadcast_status !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->user_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->user_fb_uid = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->user_t_uid = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->user_full_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->user_fname = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->user_lname = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->user_username = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->user_email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->user_editable_email = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->user_password = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->user_password_legacy = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->user_bio = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->user_facebook_url = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->user_twitter_url = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->user_website_url = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->user_status = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->user_created_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->user_updated_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->user_type = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->user_contact_email_id = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->user_t_username = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->user_photo_url = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->user_image = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->user_default_timezone = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->user_birthday_date = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->user_broadcast_status = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->user_t_oauth_token = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->user_t_oauth_token_secret = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->user_ual = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->user_optin = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->user_optin_date = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->user_tagline = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 32; // 32 = UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating User object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUser:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UserPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUser:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUser:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUser:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UserPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UserPeer::USER_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setUserId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getUserId();
				break;
			case 1:
				return $this->getUserFbUid();
				break;
			case 2:
				return $this->getUserTUid();
				break;
			case 3:
				return $this->getUserFullName();
				break;
			case 4:
				return $this->getUserFname();
				break;
			case 5:
				return $this->getUserLname();
				break;
			case 6:
				return $this->getUserUsername();
				break;
			case 7:
				return $this->getUserEmail();
				break;
			case 8:
				return $this->getUserEditableEmail();
				break;
			case 9:
				return $this->getUserPassword();
				break;
			case 10:
				return $this->getUserPasswordLegacy();
				break;
			case 11:
				return $this->getUserBio();
				break;
			case 12:
				return $this->getUserFacebookUrl();
				break;
			case 13:
				return $this->getUserTwitterUrl();
				break;
			case 14:
				return $this->getUserWebsiteUrl();
				break;
			case 15:
				return $this->getUserStatus();
				break;
			case 16:
				return $this->getUserCreatedAt();
				break;
			case 17:
				return $this->getUserUpdatedAt();
				break;
			case 18:
				return $this->getUserType();
				break;
			case 19:
				return $this->getUserContactEmailId();
				break;
			case 20:
				return $this->getUserTUsername();
				break;
			case 21:
				return $this->getUserPhotoUrl();
				break;
			case 22:
				return $this->getUserImage();
				break;
			case 23:
				return $this->getUserDefaultTimezone();
				break;
			case 24:
				return $this->getUserBirthdayDate();
				break;
			case 25:
				return $this->getUserBroadcastStatus();
				break;
			case 26:
				return $this->getUserTOauthToken();
				break;
			case 27:
				return $this->getUserTOauthTokenSecret();
				break;
			case 28:
				return $this->getUserUal();
				break;
			case 29:
				return $this->getUserOptin();
				break;
			case 30:
				return $this->getUserOptinDate();
				break;
			case 31:
				return $this->getUserTagline();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getUserId(),
			$keys[1] => $this->getUserFbUid(),
			$keys[2] => $this->getUserTUid(),
			$keys[3] => $this->getUserFullName(),
			$keys[4] => $this->getUserFname(),
			$keys[5] => $this->getUserLname(),
			$keys[6] => $this->getUserUsername(),
			$keys[7] => $this->getUserEmail(),
			$keys[8] => $this->getUserEditableEmail(),
			$keys[9] => $this->getUserPassword(),
			$keys[10] => $this->getUserPasswordLegacy(),
			$keys[11] => $this->getUserBio(),
			$keys[12] => $this->getUserFacebookUrl(),
			$keys[13] => $this->getUserTwitterUrl(),
			$keys[14] => $this->getUserWebsiteUrl(),
			$keys[15] => $this->getUserStatus(),
			$keys[16] => $this->getUserCreatedAt(),
			$keys[17] => $this->getUserUpdatedAt(),
			$keys[18] => $this->getUserType(),
			$keys[19] => $this->getUserContactEmailId(),
			$keys[20] => $this->getUserTUsername(),
			$keys[21] => $this->getUserPhotoUrl(),
			$keys[22] => $this->getUserImage(),
			$keys[23] => $this->getUserDefaultTimezone(),
			$keys[24] => $this->getUserBirthdayDate(),
			$keys[25] => $this->getUserBroadcastStatus(),
			$keys[26] => $this->getUserTOauthToken(),
			$keys[27] => $this->getUserTOauthTokenSecret(),
			$keys[28] => $this->getUserUal(),
			$keys[29] => $this->getUserOptin(),
			$keys[30] => $this->getUserOptinDate(),
			$keys[31] => $this->getUserTagline(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setUserId($value);
				break;
			case 1:
				$this->setUserFbUid($value);
				break;
			case 2:
				$this->setUserTUid($value);
				break;
			case 3:
				$this->setUserFullName($value);
				break;
			case 4:
				$this->setUserFname($value);
				break;
			case 5:
				$this->setUserLname($value);
				break;
			case 6:
				$this->setUserUsername($value);
				break;
			case 7:
				$this->setUserEmail($value);
				break;
			case 8:
				$this->setUserEditableEmail($value);
				break;
			case 9:
				$this->setUserPassword($value);
				break;
			case 10:
				$this->setUserPasswordLegacy($value);
				break;
			case 11:
				$this->setUserBio($value);
				break;
			case 12:
				$this->setUserFacebookUrl($value);
				break;
			case 13:
				$this->setUserTwitterUrl($value);
				break;
			case 14:
				$this->setUserWebsiteUrl($value);
				break;
			case 15:
				$this->setUserStatus($value);
				break;
			case 16:
				$this->setUserCreatedAt($value);
				break;
			case 17:
				$this->setUserUpdatedAt($value);
				break;
			case 18:
				$this->setUserType($value);
				break;
			case 19:
				$this->setUserContactEmailId($value);
				break;
			case 20:
				$this->setUserTUsername($value);
				break;
			case 21:
				$this->setUserPhotoUrl($value);
				break;
			case 22:
				$this->setUserImage($value);
				break;
			case 23:
				$this->setUserDefaultTimezone($value);
				break;
			case 24:
				$this->setUserBirthdayDate($value);
				break;
			case 25:
				$this->setUserBroadcastStatus($value);
				break;
			case 26:
				$this->setUserTOauthToken($value);
				break;
			case 27:
				$this->setUserTOauthTokenSecret($value);
				break;
			case 28:
				$this->setUserUal($value);
				break;
			case 29:
				$this->setUserOptin($value);
				break;
			case 30:
				$this->setUserOptinDate($value);
				break;
			case 31:
				$this->setUserTagline($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setUserId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUserFbUid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUserTUid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setUserFullName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setUserFname($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUserLname($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUserUsername($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setUserEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setUserEditableEmail($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setUserPassword($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setUserPasswordLegacy($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUserBio($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUserFacebookUrl($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setUserTwitterUrl($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUserWebsiteUrl($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setUserStatus($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setUserCreatedAt($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setUserUpdatedAt($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setUserType($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setUserContactEmailId($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setUserTUsername($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setUserPhotoUrl($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setUserImage($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setUserDefaultTimezone($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setUserBirthdayDate($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setUserBroadcastStatus($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setUserTOauthToken($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setUserTOauthTokenSecret($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setUserUal($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setUserOptin($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setUserOptinDate($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setUserTagline($arr[$keys[31]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserPeer::USER_ID)) $criteria->add(UserPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(UserPeer::USER_FB_UID)) $criteria->add(UserPeer::USER_FB_UID, $this->user_fb_uid);
		if ($this->isColumnModified(UserPeer::USER_T_UID)) $criteria->add(UserPeer::USER_T_UID, $this->user_t_uid);
		if ($this->isColumnModified(UserPeer::USER_FULL_NAME)) $criteria->add(UserPeer::USER_FULL_NAME, $this->user_full_name);
		if ($this->isColumnModified(UserPeer::USER_FNAME)) $criteria->add(UserPeer::USER_FNAME, $this->user_fname);
		if ($this->isColumnModified(UserPeer::USER_LNAME)) $criteria->add(UserPeer::USER_LNAME, $this->user_lname);
		if ($this->isColumnModified(UserPeer::USER_USERNAME)) $criteria->add(UserPeer::USER_USERNAME, $this->user_username);
		if ($this->isColumnModified(UserPeer::USER_EMAIL)) $criteria->add(UserPeer::USER_EMAIL, $this->user_email);
		if ($this->isColumnModified(UserPeer::USER_EDITABLE_EMAIL)) $criteria->add(UserPeer::USER_EDITABLE_EMAIL, $this->user_editable_email);
		if ($this->isColumnModified(UserPeer::USER_PASSWORD)) $criteria->add(UserPeer::USER_PASSWORD, $this->user_password);
		if ($this->isColumnModified(UserPeer::USER_PASSWORD_LEGACY)) $criteria->add(UserPeer::USER_PASSWORD_LEGACY, $this->user_password_legacy);
		if ($this->isColumnModified(UserPeer::USER_BIO)) $criteria->add(UserPeer::USER_BIO, $this->user_bio);
		if ($this->isColumnModified(UserPeer::USER_FACEBOOK_URL)) $criteria->add(UserPeer::USER_FACEBOOK_URL, $this->user_facebook_url);
		if ($this->isColumnModified(UserPeer::USER_TWITTER_URL)) $criteria->add(UserPeer::USER_TWITTER_URL, $this->user_twitter_url);
		if ($this->isColumnModified(UserPeer::USER_WEBSITE_URL)) $criteria->add(UserPeer::USER_WEBSITE_URL, $this->user_website_url);
		if ($this->isColumnModified(UserPeer::USER_STATUS)) $criteria->add(UserPeer::USER_STATUS, $this->user_status);
		if ($this->isColumnModified(UserPeer::USER_CREATED_AT)) $criteria->add(UserPeer::USER_CREATED_AT, $this->user_created_at);
		if ($this->isColumnModified(UserPeer::USER_UPDATED_AT)) $criteria->add(UserPeer::USER_UPDATED_AT, $this->user_updated_at);
		if ($this->isColumnModified(UserPeer::USER_TYPE)) $criteria->add(UserPeer::USER_TYPE, $this->user_type);
		if ($this->isColumnModified(UserPeer::USER_CONTACT_EMAIL_ID)) $criteria->add(UserPeer::USER_CONTACT_EMAIL_ID, $this->user_contact_email_id);
		if ($this->isColumnModified(UserPeer::USER_T_USERNAME)) $criteria->add(UserPeer::USER_T_USERNAME, $this->user_t_username);
		if ($this->isColumnModified(UserPeer::USER_PHOTO_URL)) $criteria->add(UserPeer::USER_PHOTO_URL, $this->user_photo_url);
		if ($this->isColumnModified(UserPeer::USER_IMAGE)) $criteria->add(UserPeer::USER_IMAGE, $this->user_image);
		if ($this->isColumnModified(UserPeer::USER_DEFAULT_TIMEZONE)) $criteria->add(UserPeer::USER_DEFAULT_TIMEZONE, $this->user_default_timezone);
		if ($this->isColumnModified(UserPeer::USER_BIRTHDAY_DATE)) $criteria->add(UserPeer::USER_BIRTHDAY_DATE, $this->user_birthday_date);
		if ($this->isColumnModified(UserPeer::USER_BROADCAST_STATUS)) $criteria->add(UserPeer::USER_BROADCAST_STATUS, $this->user_broadcast_status);
		if ($this->isColumnModified(UserPeer::USER_T_OAUTH_TOKEN)) $criteria->add(UserPeer::USER_T_OAUTH_TOKEN, $this->user_t_oauth_token);
		if ($this->isColumnModified(UserPeer::USER_T_OAUTH_TOKEN_SECRET)) $criteria->add(UserPeer::USER_T_OAUTH_TOKEN_SECRET, $this->user_t_oauth_token_secret);
		if ($this->isColumnModified(UserPeer::USER_UAL)) $criteria->add(UserPeer::USER_UAL, $this->user_ual);
		if ($this->isColumnModified(UserPeer::USER_OPTIN)) $criteria->add(UserPeer::USER_OPTIN, $this->user_optin);
		if ($this->isColumnModified(UserPeer::USER_OPTIN_DATE)) $criteria->add(UserPeer::USER_OPTIN_DATE, $this->user_optin_date);
		if ($this->isColumnModified(UserPeer::USER_TAGLINE)) $criteria->add(UserPeer::USER_TAGLINE, $this->user_tagline);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		$criteria->add(UserPeer::USER_ID, $this->user_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUserId();
	}

	/**
	 * Generic method to set the primary key (user_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUserId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of User (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUserFbUid($this->user_fb_uid);

		$copyObj->setUserTUid($this->user_t_uid);

		$copyObj->setUserFullName($this->user_full_name);

		$copyObj->setUserFname($this->user_fname);

		$copyObj->setUserLname($this->user_lname);

		$copyObj->setUserUsername($this->user_username);

		$copyObj->setUserEmail($this->user_email);

		$copyObj->setUserEditableEmail($this->user_editable_email);

		$copyObj->setUserPassword($this->user_password);

		$copyObj->setUserPasswordLegacy($this->user_password_legacy);

		$copyObj->setUserBio($this->user_bio);

		$copyObj->setUserFacebookUrl($this->user_facebook_url);

		$copyObj->setUserTwitterUrl($this->user_twitter_url);

		$copyObj->setUserWebsiteUrl($this->user_website_url);

		$copyObj->setUserStatus($this->user_status);

		$copyObj->setUserCreatedAt($this->user_created_at);

		$copyObj->setUserUpdatedAt($this->user_updated_at);

		$copyObj->setUserType($this->user_type);

		$copyObj->setUserContactEmailId($this->user_contact_email_id);

		$copyObj->setUserTUsername($this->user_t_username);

		$copyObj->setUserPhotoUrl($this->user_photo_url);

		$copyObj->setUserImage($this->user_image);

		$copyObj->setUserDefaultTimezone($this->user_default_timezone);

		$copyObj->setUserBirthdayDate($this->user_birthday_date);

		$copyObj->setUserBroadcastStatus($this->user_broadcast_status);

		$copyObj->setUserTOauthToken($this->user_t_oauth_token);

		$copyObj->setUserTOauthTokenSecret($this->user_t_oauth_token_secret);

		$copyObj->setUserUal($this->user_ual);

		$copyObj->setUserOptin($this->user_optin);

		$copyObj->setUserOptinDate($this->user_optin_date);

		$copyObj->setUserTagline($this->user_tagline);


		$copyObj->setNew(true);

		$copyObj->setUserId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     User Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUser:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUser::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUser
