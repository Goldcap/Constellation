<?php

/**
 * Base class that represents a row from the 'screening' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:35 PM EDT
 *
 * @package    lib.model.om
 */
abstract class BaseScreening extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ScreeningPeer
	 */
	protected static $peer;

	/**
	 * The value for the screening_id field.
	 * @var        int
	 */
	protected $screening_id;

	/**
	 * The value for the fk_host_id field.
	 * @var        int
	 */
	protected $fk_host_id;

	/**
	 * The value for the fk_film_id field.
	 * @var        int
	 */
	protected $fk_film_id;

	/**
	 * The value for the fk_payment_id field.
	 * @var        int
	 */
	protected $fk_payment_id;

	/**
	 * The value for the fk_program_id field.
	 * @var        int
	 */
	protected $fk_program_id;

	/**
	 * The value for the screening_name field.
	 * @var        string
	 */
	protected $screening_name;

	/**
	 * The value for the screening_date field.
	 * @var        string
	 */
	protected $screening_date;

	/**
	 * The value for the screening_time field.
	 * @var        string
	 */
	protected $screening_time;

	/**
	 * The value for the screening_end_time field.
	 * @var        string
	 */
	protected $screening_end_time;

	/**
	 * The value for the screening_prescreening_time field.
	 * Note: this column has a database default value of: '00:30:00'
	 * @var        string
	 */
	protected $screening_prescreening_time;

	/**
	 * The value for the screening_post_message field.
	 * @var        string
	 */
	protected $screening_post_message;

	/**
	 * The value for the screening_paid_status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_paid_status;

	/**
	 * The value for the screening_seats_occupied field.
	 * @var        int
	 */
	protected $screening_seats_occupied;

	/**
	 * The value for the screening_created_at field.
	 * @var        string
	 */
	protected $screening_created_at;

	/**
	 * The value for the screening_updated_at field.
	 * @var        string
	 */
	protected $screening_updated_at;

	/**
	 * The value for the screening_unique_key field.
	 * @var        string
	 */
	protected $screening_unique_key;

	/**
	 * The value for the screening_status field.
	 * @var        int
	 */
	protected $screening_status;

	/**
	 * The value for the screening_type field.
	 * @var        int
	 */
	protected $screening_type;

	/**
	 * The value for the screening_total_seats field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_total_seats;

	/**
	 * The value for the screening_constellation_image field.
	 * @var        string
	 */
	protected $screening_constellation_image;

	/**
	 * The value for the screening_guest_name field.
	 * @var        string
	 */
	protected $screening_guest_name;

	/**
	 * The value for the screening_guest_image field.
	 * @var        string
	 */
	protected $screening_guest_image;

	/**
	 * The value for the screening_description field.
	 * @var        string
	 */
	protected $screening_description;

	/**
	 * The value for the screening_live_webcam field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_live_webcam;

	/**
	 * The value for the screening_is_admin field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_is_admin;

	/**
	 * The value for the screening_featured field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_featured;

	/**
	 * The value for the screening_highlighted field.
	 * @var        int
	 */
	protected $screening_highlighted;

	/**
	 * The value for the screening_credit_status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_credit_status;

	/**
	 * The value for the screening_default_timezone field.
	 * @var        string
	 */
	protected $screening_default_timezone;

	/**
	 * The value for the screening_receipt_status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_receipt_status;

	/**
	 * The value for the screening_default_timezone_id field.
	 * @var        string
	 */
	protected $screening_default_timezone_id;

	/**
	 * The value for the screening_video_server_hostname field.
	 * @var        string
	 */
	protected $screening_video_server_hostname;

	/**
	 * The value for the screening_video_server_instance_id field.
	 * @var        string
	 */
	protected $screening_video_server_instance_id;

	/**
	 * The value for the screening_video_is_queued field.
	 * @var        int
	 */
	protected $screening_video_is_queued;

	/**
	 * The value for the screening_is_private field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_is_private;

	/**
	 * The value for the screening_has_qanda field.
	 * @var        int
	 */
	protected $screening_has_qanda;

	/**
	 * The value for the screening_still_image field.
	 * @var        string
	 */
	protected $screening_still_image;

	/**
	 * The value for the screening_chat_moderated field.
	 * @var        int
	 */
	protected $screening_chat_moderated;

	/**
	 * The value for the screening_chat_qanda_started field.
	 * @var        int
	 */
	protected $screening_chat_qanda_started;

	/**
	 * The value for the screening_allow_latecomers field.
	 * @var        int
	 */
	protected $screening_allow_latecomers;

	/**
	 * The value for the screening_facebook_text field.
	 * @var        string
	 */
	protected $screening_facebook_text;

	/**
	 * The value for the screening_twitter_text field.
	 * @var        string
	 */
	protected $screening_twitter_text;

	/**
	 * The value for the screening_qa field.
	 * @var        string
	 */
	protected $screening_qa;

	/**
	 * The value for the screening_is_dohbr field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $screening_is_dohbr;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ScreeningPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->screening_prescreening_time = '00:30:00';
		$this->screening_paid_status = 0;
		$this->screening_total_seats = 0;
		$this->screening_live_webcam = 0;
		$this->screening_is_admin = 0;
		$this->screening_featured = 0;
		$this->screening_credit_status = 0;
		$this->screening_receipt_status = 0;
		$this->screening_is_private = 0;
		$this->screening_is_dohbr = 0;
	}

	/**
	 * Initializes internal state of BaseScreening object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [screening_id] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningId()
	{
		return $this->screening_id;
	}

	/**
	 * Get the [fk_host_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkHostId()
	{
		return $this->fk_host_id;
	}

	/**
	 * Get the [fk_film_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkFilmId()
	{
		return $this->fk_film_id;
	}

	/**
	 * Get the [fk_payment_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkPaymentId()
	{
		return $this->fk_payment_id;
	}

	/**
	 * Get the [fk_program_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkProgramId()
	{
		return $this->fk_program_id;
	}

	/**
	 * Get the [screening_name] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningName()
	{
		return $this->screening_name;
	}

	/**
	 * Get the [optionally formatted] temporal [screening_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getScreeningDate($format = 'Y-m-d')
	{
		if ($this->screening_date === null) {
			return null;
		}


		if ($this->screening_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->screening_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->screening_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [screening_time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getScreeningTime($format = 'H:i:s')
	{
		if ($this->screening_time === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->screening_time);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->screening_time, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [screening_end_time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getScreeningEndTime($format = 'Y-m-d H:i:s')
	{
		if ($this->screening_end_time === null) {
			return null;
		}


		if ($this->screening_end_time === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->screening_end_time);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->screening_end_time, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [screening_prescreening_time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getScreeningPrescreeningTime($format = 'H:i:s')
	{
		if ($this->screening_prescreening_time === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->screening_prescreening_time);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->screening_prescreening_time, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [screening_post_message] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningPostMessage()
	{
		return $this->screening_post_message;
	}

	/**
	 * Get the [screening_paid_status] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningPaidStatus()
	{
		return $this->screening_paid_status;
	}

	/**
	 * Get the [screening_seats_occupied] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningSeatsOccupied()
	{
		return $this->screening_seats_occupied;
	}

	/**
	 * Get the [optionally formatted] temporal [screening_created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getScreeningCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->screening_created_at === null) {
			return null;
		}


		if ($this->screening_created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->screening_created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->screening_created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [screening_updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getScreeningUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->screening_updated_at === null) {
			return null;
		}


		if ($this->screening_updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->screening_updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->screening_updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [screening_unique_key] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningUniqueKey()
	{
		return $this->screening_unique_key;
	}

	/**
	 * Get the [screening_status] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningStatus()
	{
		return $this->screening_status;
	}

	/**
	 * Get the [screening_type] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningType()
	{
		return $this->screening_type;
	}

	/**
	 * Get the [screening_total_seats] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningTotalSeats()
	{
		return $this->screening_total_seats;
	}

	/**
	 * Get the [screening_constellation_image] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningConstellationImage()
	{
		return $this->screening_constellation_image;
	}

	/**
	 * Get the [screening_guest_name] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningGuestName()
	{
		return $this->screening_guest_name;
	}

	/**
	 * Get the [screening_guest_image] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningGuestImage()
	{
		return $this->screening_guest_image;
	}

	/**
	 * Get the [screening_description] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningDescription()
	{
		return $this->screening_description;
	}

	/**
	 * Get the [screening_live_webcam] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningLiveWebcam()
	{
		return $this->screening_live_webcam;
	}

	/**
	 * Get the [screening_is_admin] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningIsAdmin()
	{
		return $this->screening_is_admin;
	}

	/**
	 * Get the [screening_featured] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningFeatured()
	{
		return $this->screening_featured;
	}

	/**
	 * Get the [screening_highlighted] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningHighlighted()
	{
		return $this->screening_highlighted;
	}

	/**
	 * Get the [screening_credit_status] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningCreditStatus()
	{
		return $this->screening_credit_status;
	}

	/**
	 * Get the [screening_default_timezone] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningDefaultTimezone()
	{
		return $this->screening_default_timezone;
	}

	/**
	 * Get the [screening_receipt_status] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningReceiptStatus()
	{
		return $this->screening_receipt_status;
	}

	/**
	 * Get the [screening_default_timezone_id] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningDefaultTimezoneId()
	{
		return $this->screening_default_timezone_id;
	}

	/**
	 * Get the [screening_video_server_hostname] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningVideoServerHostname()
	{
		return $this->screening_video_server_hostname;
	}

	/**
	 * Get the [screening_video_server_instance_id] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningVideoServerInstanceId()
	{
		return $this->screening_video_server_instance_id;
	}

	/**
	 * Get the [screening_video_is_queued] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningVideoIsQueued()
	{
		return $this->screening_video_is_queued;
	}

	/**
	 * Get the [screening_is_private] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningIsPrivate()
	{
		return $this->screening_is_private;
	}

	/**
	 * Get the [screening_has_qanda] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningHasQanda()
	{
		return $this->screening_has_qanda;
	}

	/**
	 * Get the [screening_still_image] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningStillImage()
	{
		return $this->screening_still_image;
	}

	/**
	 * Get the [screening_chat_moderated] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningChatModerated()
	{
		return $this->screening_chat_moderated;
	}

	/**
	 * Get the [screening_chat_qanda_started] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningChatQandaStarted()
	{
		return $this->screening_chat_qanda_started;
	}

	/**
	 * Get the [screening_allow_latecomers] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningAllowLatecomers()
	{
		return $this->screening_allow_latecomers;
	}

	/**
	 * Get the [screening_facebook_text] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningFacebookText()
	{
		return $this->screening_facebook_text;
	}

	/**
	 * Get the [screening_twitter_text] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningTwitterText()
	{
		return $this->screening_twitter_text;
	}

	/**
	 * Get the [screening_qa] column value.
	 * 
	 * @return     string
	 */
	public function getScreeningQa()
	{
		return $this->screening_qa;
	}

	/**
	 * Get the [screening_is_dohbr] column value.
	 * 
	 * @return     int
	 */
	public function getScreeningIsDohbr()
	{
		return $this->screening_is_dohbr;
	}

	/**
	 * Set the value of [screening_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_id !== $v) {
			$this->screening_id = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_ID;
		}

		return $this;
	} // setScreeningId()

	/**
	 * Set the value of [fk_host_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setFkHostId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_host_id !== $v) {
			$this->fk_host_id = $v;
			$this->modifiedColumns[] = ScreeningPeer::FK_HOST_ID;
		}

		return $this;
	} // setFkHostId()

	/**
	 * Set the value of [fk_film_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setFkFilmId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_film_id !== $v) {
			$this->fk_film_id = $v;
			$this->modifiedColumns[] = ScreeningPeer::FK_FILM_ID;
		}

		return $this;
	} // setFkFilmId()

	/**
	 * Set the value of [fk_payment_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setFkPaymentId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_payment_id !== $v) {
			$this->fk_payment_id = $v;
			$this->modifiedColumns[] = ScreeningPeer::FK_PAYMENT_ID;
		}

		return $this;
	} // setFkPaymentId()

	/**
	 * Set the value of [fk_program_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setFkProgramId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_program_id !== $v) {
			$this->fk_program_id = $v;
			$this->modifiedColumns[] = ScreeningPeer::FK_PROGRAM_ID;
		}

		return $this;
	} // setFkProgramId()

	/**
	 * Set the value of [screening_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_name !== $v) {
			$this->screening_name = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_NAME;
		}

		return $this;
	} // setScreeningName()

	/**
	 * Sets the value of [screening_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->screening_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->screening_date !== null && $tmpDt = new DateTime($this->screening_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->screening_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = ScreeningPeer::SCREENING_DATE;
			}
		} // if either are not null

		return $this;
	} // setScreeningDate()

	/**
	 * Sets the value of [screening_time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->screening_time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->screening_time !== null && $tmpDt = new DateTime($this->screening_time)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->screening_time = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = ScreeningPeer::SCREENING_TIME;
			}
		} // if either are not null

		return $this;
	} // setScreeningTime()

	/**
	 * Sets the value of [screening_end_time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningEndTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->screening_end_time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->screening_end_time !== null && $tmpDt = new DateTime($this->screening_end_time)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->screening_end_time = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ScreeningPeer::SCREENING_END_TIME;
			}
		} // if either are not null

		return $this;
	} // setScreeningEndTime()

	/**
	 * Sets the value of [screening_prescreening_time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningPrescreeningTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->screening_prescreening_time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->screening_prescreening_time !== null && $tmpDt = new DateTime($this->screening_prescreening_time)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					|| ($dt->format('H:i:s') === '00:30:00') // or the entered value matches the default
					)
			{
				$this->screening_prescreening_time = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = ScreeningPeer::SCREENING_PRESCREENING_TIME;
			}
		} // if either are not null

		return $this;
	} // setScreeningPrescreeningTime()

	/**
	 * Set the value of [screening_post_message] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningPostMessage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_post_message !== $v) {
			$this->screening_post_message = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_POST_MESSAGE;
		}

		return $this;
	} // setScreeningPostMessage()

	/**
	 * Set the value of [screening_paid_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningPaidStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_paid_status !== $v || $this->isNew()) {
			$this->screening_paid_status = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_PAID_STATUS;
		}

		return $this;
	} // setScreeningPaidStatus()

	/**
	 * Set the value of [screening_seats_occupied] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningSeatsOccupied($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_seats_occupied !== $v) {
			$this->screening_seats_occupied = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_SEATS_OCCUPIED;
		}

		return $this;
	} // setScreeningSeatsOccupied()

	/**
	 * Sets the value of [screening_created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->screening_created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->screening_created_at !== null && $tmpDt = new DateTime($this->screening_created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->screening_created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ScreeningPeer::SCREENING_CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setScreeningCreatedAt()

	/**
	 * Sets the value of [screening_updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->screening_updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->screening_updated_at !== null && $tmpDt = new DateTime($this->screening_updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->screening_updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ScreeningPeer::SCREENING_UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setScreeningUpdatedAt()

	/**
	 * Set the value of [screening_unique_key] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningUniqueKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_unique_key !== $v) {
			$this->screening_unique_key = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_UNIQUE_KEY;
		}

		return $this;
	} // setScreeningUniqueKey()

	/**
	 * Set the value of [screening_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_status !== $v) {
			$this->screening_status = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_STATUS;
		}

		return $this;
	} // setScreeningStatus()

	/**
	 * Set the value of [screening_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_type !== $v) {
			$this->screening_type = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_TYPE;
		}

		return $this;
	} // setScreeningType()

	/**
	 * Set the value of [screening_total_seats] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningTotalSeats($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_total_seats !== $v || $this->isNew()) {
			$this->screening_total_seats = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_TOTAL_SEATS;
		}

		return $this;
	} // setScreeningTotalSeats()

	/**
	 * Set the value of [screening_constellation_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningConstellationImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_constellation_image !== $v) {
			$this->screening_constellation_image = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_CONSTELLATION_IMAGE;
		}

		return $this;
	} // setScreeningConstellationImage()

	/**
	 * Set the value of [screening_guest_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningGuestName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_guest_name !== $v) {
			$this->screening_guest_name = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_GUEST_NAME;
		}

		return $this;
	} // setScreeningGuestName()

	/**
	 * Set the value of [screening_guest_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningGuestImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_guest_image !== $v) {
			$this->screening_guest_image = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_GUEST_IMAGE;
		}

		return $this;
	} // setScreeningGuestImage()

	/**
	 * Set the value of [screening_description] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_description !== $v) {
			$this->screening_description = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_DESCRIPTION;
		}

		return $this;
	} // setScreeningDescription()

	/**
	 * Set the value of [screening_live_webcam] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningLiveWebcam($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_live_webcam !== $v || $this->isNew()) {
			$this->screening_live_webcam = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_LIVE_WEBCAM;
		}

		return $this;
	} // setScreeningLiveWebcam()

	/**
	 * Set the value of [screening_is_admin] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningIsAdmin($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_is_admin !== $v || $this->isNew()) {
			$this->screening_is_admin = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_IS_ADMIN;
		}

		return $this;
	} // setScreeningIsAdmin()

	/**
	 * Set the value of [screening_featured] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningFeatured($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_featured !== $v || $this->isNew()) {
			$this->screening_featured = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_FEATURED;
		}

		return $this;
	} // setScreeningFeatured()

	/**
	 * Set the value of [screening_highlighted] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningHighlighted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_highlighted !== $v) {
			$this->screening_highlighted = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_HIGHLIGHTED;
		}

		return $this;
	} // setScreeningHighlighted()

	/**
	 * Set the value of [screening_credit_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningCreditStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_credit_status !== $v || $this->isNew()) {
			$this->screening_credit_status = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_CREDIT_STATUS;
		}

		return $this;
	} // setScreeningCreditStatus()

	/**
	 * Set the value of [screening_default_timezone] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningDefaultTimezone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_default_timezone !== $v) {
			$this->screening_default_timezone = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_DEFAULT_TIMEZONE;
		}

		return $this;
	} // setScreeningDefaultTimezone()

	/**
	 * Set the value of [screening_receipt_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningReceiptStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_receipt_status !== $v || $this->isNew()) {
			$this->screening_receipt_status = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_RECEIPT_STATUS;
		}

		return $this;
	} // setScreeningReceiptStatus()

	/**
	 * Set the value of [screening_default_timezone_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningDefaultTimezoneId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_default_timezone_id !== $v) {
			$this->screening_default_timezone_id = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_DEFAULT_TIMEZONE_ID;
		}

		return $this;
	} // setScreeningDefaultTimezoneId()

	/**
	 * Set the value of [screening_video_server_hostname] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningVideoServerHostname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_video_server_hostname !== $v) {
			$this->screening_video_server_hostname = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_VIDEO_SERVER_HOSTNAME;
		}

		return $this;
	} // setScreeningVideoServerHostname()

	/**
	 * Set the value of [screening_video_server_instance_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningVideoServerInstanceId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_video_server_instance_id !== $v) {
			$this->screening_video_server_instance_id = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_VIDEO_SERVER_INSTANCE_ID;
		}

		return $this;
	} // setScreeningVideoServerInstanceId()

	/**
	 * Set the value of [screening_video_is_queued] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningVideoIsQueued($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_video_is_queued !== $v) {
			$this->screening_video_is_queued = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_VIDEO_IS_QUEUED;
		}

		return $this;
	} // setScreeningVideoIsQueued()

	/**
	 * Set the value of [screening_is_private] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningIsPrivate($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_is_private !== $v || $this->isNew()) {
			$this->screening_is_private = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_IS_PRIVATE;
		}

		return $this;
	} // setScreeningIsPrivate()

	/**
	 * Set the value of [screening_has_qanda] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningHasQanda($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_has_qanda !== $v) {
			$this->screening_has_qanda = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_HAS_QANDA;
		}

		return $this;
	} // setScreeningHasQanda()

	/**
	 * Set the value of [screening_still_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningStillImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_still_image !== $v) {
			$this->screening_still_image = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_STILL_IMAGE;
		}

		return $this;
	} // setScreeningStillImage()

	/**
	 * Set the value of [screening_chat_moderated] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningChatModerated($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_chat_moderated !== $v) {
			$this->screening_chat_moderated = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_CHAT_MODERATED;
		}

		return $this;
	} // setScreeningChatModerated()

	/**
	 * Set the value of [screening_chat_qanda_started] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningChatQandaStarted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_chat_qanda_started !== $v) {
			$this->screening_chat_qanda_started = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_CHAT_QANDA_STARTED;
		}

		return $this;
	} // setScreeningChatQandaStarted()

	/**
	 * Set the value of [screening_allow_latecomers] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningAllowLatecomers($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_allow_latecomers !== $v) {
			$this->screening_allow_latecomers = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_ALLOW_LATECOMERS;
		}

		return $this;
	} // setScreeningAllowLatecomers()

	/**
	 * Set the value of [screening_facebook_text] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningFacebookText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_facebook_text !== $v) {
			$this->screening_facebook_text = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_FACEBOOK_TEXT;
		}

		return $this;
	} // setScreeningFacebookText()

	/**
	 * Set the value of [screening_twitter_text] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningTwitterText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_twitter_text !== $v) {
			$this->screening_twitter_text = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_TWITTER_TEXT;
		}

		return $this;
	} // setScreeningTwitterText()

	/**
	 * Set the value of [screening_qa] column.
	 * 
	 * @param      string $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningQa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screening_qa !== $v) {
			$this->screening_qa = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_QA;
		}

		return $this;
	} // setScreeningQa()

	/**
	 * Set the value of [screening_is_dohbr] column.
	 * 
	 * @param      int $v new value
	 * @return     Screening The current object (for fluent API support)
	 */
	public function setScreeningIsDohbr($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->screening_is_dohbr !== $v || $this->isNew()) {
			$this->screening_is_dohbr = $v;
			$this->modifiedColumns[] = ScreeningPeer::SCREENING_IS_DOHBR;
		}

		return $this;
	} // setScreeningIsDohbr()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->screening_prescreening_time !== '00:30:00') {
				return false;
			}

			if ($this->screening_paid_status !== 0) {
				return false;
			}

			if ($this->screening_total_seats !== 0) {
				return false;
			}

			if ($this->screening_live_webcam !== 0) {
				return false;
			}

			if ($this->screening_is_admin !== 0) {
				return false;
			}

			if ($this->screening_featured !== 0) {
				return false;
			}

			if ($this->screening_credit_status !== 0) {
				return false;
			}

			if ($this->screening_receipt_status !== 0) {
				return false;
			}

			if ($this->screening_is_private !== 0) {
				return false;
			}

			if ($this->screening_is_dohbr !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->screening_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->fk_host_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->fk_film_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->fk_payment_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->fk_program_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->screening_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->screening_date = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->screening_time = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->screening_end_time = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->screening_prescreening_time = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->screening_post_message = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->screening_paid_status = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->screening_seats_occupied = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->screening_created_at = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->screening_updated_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->screening_unique_key = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->screening_status = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->screening_type = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->screening_total_seats = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->screening_constellation_image = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->screening_guest_name = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->screening_guest_image = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->screening_description = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->screening_live_webcam = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->screening_is_admin = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->screening_featured = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->screening_highlighted = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->screening_credit_status = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->screening_default_timezone = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->screening_receipt_status = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->screening_default_timezone_id = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->screening_video_server_hostname = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->screening_video_server_instance_id = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->screening_video_is_queued = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->screening_is_private = ($row[$startcol + 34] !== null) ? (int) $row[$startcol + 34] : null;
			$this->screening_has_qanda = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->screening_still_image = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->screening_chat_moderated = ($row[$startcol + 37] !== null) ? (int) $row[$startcol + 37] : null;
			$this->screening_chat_qanda_started = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->screening_allow_latecomers = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->screening_facebook_text = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->screening_twitter_text = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->screening_qa = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->screening_is_dohbr = ($row[$startcol + 43] !== null) ? (int) $row[$startcol + 43] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 44; // 44 = ScreeningPeer::NUM_COLUMNS - ScreeningPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Screening object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ScreeningPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ScreeningPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ScreeningPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseScreening:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ScreeningPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseScreening:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ScreeningPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseScreening:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseScreening:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ScreeningPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ScreeningPeer::SCREENING_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ScreeningPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setScreeningId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ScreeningPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ScreeningPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ScreeningPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getScreeningId();
				break;
			case 1:
				return $this->getFkHostId();
				break;
			case 2:
				return $this->getFkFilmId();
				break;
			case 3:
				return $this->getFkPaymentId();
				break;
			case 4:
				return $this->getFkProgramId();
				break;
			case 5:
				return $this->getScreeningName();
				break;
			case 6:
				return $this->getScreeningDate();
				break;
			case 7:
				return $this->getScreeningTime();
				break;
			case 8:
				return $this->getScreeningEndTime();
				break;
			case 9:
				return $this->getScreeningPrescreeningTime();
				break;
			case 10:
				return $this->getScreeningPostMessage();
				break;
			case 11:
				return $this->getScreeningPaidStatus();
				break;
			case 12:
				return $this->getScreeningSeatsOccupied();
				break;
			case 13:
				return $this->getScreeningCreatedAt();
				break;
			case 14:
				return $this->getScreeningUpdatedAt();
				break;
			case 15:
				return $this->getScreeningUniqueKey();
				break;
			case 16:
				return $this->getScreeningStatus();
				break;
			case 17:
				return $this->getScreeningType();
				break;
			case 18:
				return $this->getScreeningTotalSeats();
				break;
			case 19:
				return $this->getScreeningConstellationImage();
				break;
			case 20:
				return $this->getScreeningGuestName();
				break;
			case 21:
				return $this->getScreeningGuestImage();
				break;
			case 22:
				return $this->getScreeningDescription();
				break;
			case 23:
				return $this->getScreeningLiveWebcam();
				break;
			case 24:
				return $this->getScreeningIsAdmin();
				break;
			case 25:
				return $this->getScreeningFeatured();
				break;
			case 26:
				return $this->getScreeningHighlighted();
				break;
			case 27:
				return $this->getScreeningCreditStatus();
				break;
			case 28:
				return $this->getScreeningDefaultTimezone();
				break;
			case 29:
				return $this->getScreeningReceiptStatus();
				break;
			case 30:
				return $this->getScreeningDefaultTimezoneId();
				break;
			case 31:
				return $this->getScreeningVideoServerHostname();
				break;
			case 32:
				return $this->getScreeningVideoServerInstanceId();
				break;
			case 33:
				return $this->getScreeningVideoIsQueued();
				break;
			case 34:
				return $this->getScreeningIsPrivate();
				break;
			case 35:
				return $this->getScreeningHasQanda();
				break;
			case 36:
				return $this->getScreeningStillImage();
				break;
			case 37:
				return $this->getScreeningChatModerated();
				break;
			case 38:
				return $this->getScreeningChatQandaStarted();
				break;
			case 39:
				return $this->getScreeningAllowLatecomers();
				break;
			case 40:
				return $this->getScreeningFacebookText();
				break;
			case 41:
				return $this->getScreeningTwitterText();
				break;
			case 42:
				return $this->getScreeningQa();
				break;
			case 43:
				return $this->getScreeningIsDohbr();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ScreeningPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getScreeningId(),
			$keys[1] => $this->getFkHostId(),
			$keys[2] => $this->getFkFilmId(),
			$keys[3] => $this->getFkPaymentId(),
			$keys[4] => $this->getFkProgramId(),
			$keys[5] => $this->getScreeningName(),
			$keys[6] => $this->getScreeningDate(),
			$keys[7] => $this->getScreeningTime(),
			$keys[8] => $this->getScreeningEndTime(),
			$keys[9] => $this->getScreeningPrescreeningTime(),
			$keys[10] => $this->getScreeningPostMessage(),
			$keys[11] => $this->getScreeningPaidStatus(),
			$keys[12] => $this->getScreeningSeatsOccupied(),
			$keys[13] => $this->getScreeningCreatedAt(),
			$keys[14] => $this->getScreeningUpdatedAt(),
			$keys[15] => $this->getScreeningUniqueKey(),
			$keys[16] => $this->getScreeningStatus(),
			$keys[17] => $this->getScreeningType(),
			$keys[18] => $this->getScreeningTotalSeats(),
			$keys[19] => $this->getScreeningConstellationImage(),
			$keys[20] => $this->getScreeningGuestName(),
			$keys[21] => $this->getScreeningGuestImage(),
			$keys[22] => $this->getScreeningDescription(),
			$keys[23] => $this->getScreeningLiveWebcam(),
			$keys[24] => $this->getScreeningIsAdmin(),
			$keys[25] => $this->getScreeningFeatured(),
			$keys[26] => $this->getScreeningHighlighted(),
			$keys[27] => $this->getScreeningCreditStatus(),
			$keys[28] => $this->getScreeningDefaultTimezone(),
			$keys[29] => $this->getScreeningReceiptStatus(),
			$keys[30] => $this->getScreeningDefaultTimezoneId(),
			$keys[31] => $this->getScreeningVideoServerHostname(),
			$keys[32] => $this->getScreeningVideoServerInstanceId(),
			$keys[33] => $this->getScreeningVideoIsQueued(),
			$keys[34] => $this->getScreeningIsPrivate(),
			$keys[35] => $this->getScreeningHasQanda(),
			$keys[36] => $this->getScreeningStillImage(),
			$keys[37] => $this->getScreeningChatModerated(),
			$keys[38] => $this->getScreeningChatQandaStarted(),
			$keys[39] => $this->getScreeningAllowLatecomers(),
			$keys[40] => $this->getScreeningFacebookText(),
			$keys[41] => $this->getScreeningTwitterText(),
			$keys[42] => $this->getScreeningQa(),
			$keys[43] => $this->getScreeningIsDohbr(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ScreeningPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setScreeningId($value);
				break;
			case 1:
				$this->setFkHostId($value);
				break;
			case 2:
				$this->setFkFilmId($value);
				break;
			case 3:
				$this->setFkPaymentId($value);
				break;
			case 4:
				$this->setFkProgramId($value);
				break;
			case 5:
				$this->setScreeningName($value);
				break;
			case 6:
				$this->setScreeningDate($value);
				break;
			case 7:
				$this->setScreeningTime($value);
				break;
			case 8:
				$this->setScreeningEndTime($value);
				break;
			case 9:
				$this->setScreeningPrescreeningTime($value);
				break;
			case 10:
				$this->setScreeningPostMessage($value);
				break;
			case 11:
				$this->setScreeningPaidStatus($value);
				break;
			case 12:
				$this->setScreeningSeatsOccupied($value);
				break;
			case 13:
				$this->setScreeningCreatedAt($value);
				break;
			case 14:
				$this->setScreeningUpdatedAt($value);
				break;
			case 15:
				$this->setScreeningUniqueKey($value);
				break;
			case 16:
				$this->setScreeningStatus($value);
				break;
			case 17:
				$this->setScreeningType($value);
				break;
			case 18:
				$this->setScreeningTotalSeats($value);
				break;
			case 19:
				$this->setScreeningConstellationImage($value);
				break;
			case 20:
				$this->setScreeningGuestName($value);
				break;
			case 21:
				$this->setScreeningGuestImage($value);
				break;
			case 22:
				$this->setScreeningDescription($value);
				break;
			case 23:
				$this->setScreeningLiveWebcam($value);
				break;
			case 24:
				$this->setScreeningIsAdmin($value);
				break;
			case 25:
				$this->setScreeningFeatured($value);
				break;
			case 26:
				$this->setScreeningHighlighted($value);
				break;
			case 27:
				$this->setScreeningCreditStatus($value);
				break;
			case 28:
				$this->setScreeningDefaultTimezone($value);
				break;
			case 29:
				$this->setScreeningReceiptStatus($value);
				break;
			case 30:
				$this->setScreeningDefaultTimezoneId($value);
				break;
			case 31:
				$this->setScreeningVideoServerHostname($value);
				break;
			case 32:
				$this->setScreeningVideoServerInstanceId($value);
				break;
			case 33:
				$this->setScreeningVideoIsQueued($value);
				break;
			case 34:
				$this->setScreeningIsPrivate($value);
				break;
			case 35:
				$this->setScreeningHasQanda($value);
				break;
			case 36:
				$this->setScreeningStillImage($value);
				break;
			case 37:
				$this->setScreeningChatModerated($value);
				break;
			case 38:
				$this->setScreeningChatQandaStarted($value);
				break;
			case 39:
				$this->setScreeningAllowLatecomers($value);
				break;
			case 40:
				$this->setScreeningFacebookText($value);
				break;
			case 41:
				$this->setScreeningTwitterText($value);
				break;
			case 42:
				$this->setScreeningQa($value);
				break;
			case 43:
				$this->setScreeningIsDohbr($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ScreeningPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setScreeningId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFkHostId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFkFilmId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFkPaymentId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFkProgramId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setScreeningName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setScreeningDate($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setScreeningTime($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setScreeningEndTime($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setScreeningPrescreeningTime($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setScreeningPostMessage($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setScreeningPaidStatus($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setScreeningSeatsOccupied($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setScreeningCreatedAt($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setScreeningUpdatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setScreeningUniqueKey($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setScreeningStatus($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setScreeningType($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setScreeningTotalSeats($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setScreeningConstellationImage($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setScreeningGuestName($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setScreeningGuestImage($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setScreeningDescription($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setScreeningLiveWebcam($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setScreeningIsAdmin($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setScreeningFeatured($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setScreeningHighlighted($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setScreeningCreditStatus($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setScreeningDefaultTimezone($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setScreeningReceiptStatus($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setScreeningDefaultTimezoneId($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setScreeningVideoServerHostname($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setScreeningVideoServerInstanceId($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setScreeningVideoIsQueued($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setScreeningIsPrivate($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setScreeningHasQanda($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setScreeningStillImage($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setScreeningChatModerated($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setScreeningChatQandaStarted($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setScreeningAllowLatecomers($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setScreeningFacebookText($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setScreeningTwitterText($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setScreeningQa($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setScreeningIsDohbr($arr[$keys[43]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ScreeningPeer::DATABASE_NAME);

		if ($this->isColumnModified(ScreeningPeer::SCREENING_ID)) $criteria->add(ScreeningPeer::SCREENING_ID, $this->screening_id);
		if ($this->isColumnModified(ScreeningPeer::FK_HOST_ID)) $criteria->add(ScreeningPeer::FK_HOST_ID, $this->fk_host_id);
		if ($this->isColumnModified(ScreeningPeer::FK_FILM_ID)) $criteria->add(ScreeningPeer::FK_FILM_ID, $this->fk_film_id);
		if ($this->isColumnModified(ScreeningPeer::FK_PAYMENT_ID)) $criteria->add(ScreeningPeer::FK_PAYMENT_ID, $this->fk_payment_id);
		if ($this->isColumnModified(ScreeningPeer::FK_PROGRAM_ID)) $criteria->add(ScreeningPeer::FK_PROGRAM_ID, $this->fk_program_id);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_NAME)) $criteria->add(ScreeningPeer::SCREENING_NAME, $this->screening_name);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_DATE)) $criteria->add(ScreeningPeer::SCREENING_DATE, $this->screening_date);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_TIME)) $criteria->add(ScreeningPeer::SCREENING_TIME, $this->screening_time);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_END_TIME)) $criteria->add(ScreeningPeer::SCREENING_END_TIME, $this->screening_end_time);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_PRESCREENING_TIME)) $criteria->add(ScreeningPeer::SCREENING_PRESCREENING_TIME, $this->screening_prescreening_time);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_POST_MESSAGE)) $criteria->add(ScreeningPeer::SCREENING_POST_MESSAGE, $this->screening_post_message);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_PAID_STATUS)) $criteria->add(ScreeningPeer::SCREENING_PAID_STATUS, $this->screening_paid_status);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_SEATS_OCCUPIED)) $criteria->add(ScreeningPeer::SCREENING_SEATS_OCCUPIED, $this->screening_seats_occupied);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_CREATED_AT)) $criteria->add(ScreeningPeer::SCREENING_CREATED_AT, $this->screening_created_at);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_UPDATED_AT)) $criteria->add(ScreeningPeer::SCREENING_UPDATED_AT, $this->screening_updated_at);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_UNIQUE_KEY)) $criteria->add(ScreeningPeer::SCREENING_UNIQUE_KEY, $this->screening_unique_key);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_STATUS)) $criteria->add(ScreeningPeer::SCREENING_STATUS, $this->screening_status);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_TYPE)) $criteria->add(ScreeningPeer::SCREENING_TYPE, $this->screening_type);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_TOTAL_SEATS)) $criteria->add(ScreeningPeer::SCREENING_TOTAL_SEATS, $this->screening_total_seats);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_CONSTELLATION_IMAGE)) $criteria->add(ScreeningPeer::SCREENING_CONSTELLATION_IMAGE, $this->screening_constellation_image);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_GUEST_NAME)) $criteria->add(ScreeningPeer::SCREENING_GUEST_NAME, $this->screening_guest_name);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_GUEST_IMAGE)) $criteria->add(ScreeningPeer::SCREENING_GUEST_IMAGE, $this->screening_guest_image);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_DESCRIPTION)) $criteria->add(ScreeningPeer::SCREENING_DESCRIPTION, $this->screening_description);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_LIVE_WEBCAM)) $criteria->add(ScreeningPeer::SCREENING_LIVE_WEBCAM, $this->screening_live_webcam);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_IS_ADMIN)) $criteria->add(ScreeningPeer::SCREENING_IS_ADMIN, $this->screening_is_admin);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_FEATURED)) $criteria->add(ScreeningPeer::SCREENING_FEATURED, $this->screening_featured);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_HIGHLIGHTED)) $criteria->add(ScreeningPeer::SCREENING_HIGHLIGHTED, $this->screening_highlighted);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_CREDIT_STATUS)) $criteria->add(ScreeningPeer::SCREENING_CREDIT_STATUS, $this->screening_credit_status);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_DEFAULT_TIMEZONE)) $criteria->add(ScreeningPeer::SCREENING_DEFAULT_TIMEZONE, $this->screening_default_timezone);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_RECEIPT_STATUS)) $criteria->add(ScreeningPeer::SCREENING_RECEIPT_STATUS, $this->screening_receipt_status);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_DEFAULT_TIMEZONE_ID)) $criteria->add(ScreeningPeer::SCREENING_DEFAULT_TIMEZONE_ID, $this->screening_default_timezone_id);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_VIDEO_SERVER_HOSTNAME)) $criteria->add(ScreeningPeer::SCREENING_VIDEO_SERVER_HOSTNAME, $this->screening_video_server_hostname);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_VIDEO_SERVER_INSTANCE_ID)) $criteria->add(ScreeningPeer::SCREENING_VIDEO_SERVER_INSTANCE_ID, $this->screening_video_server_instance_id);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_VIDEO_IS_QUEUED)) $criteria->add(ScreeningPeer::SCREENING_VIDEO_IS_QUEUED, $this->screening_video_is_queued);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_IS_PRIVATE)) $criteria->add(ScreeningPeer::SCREENING_IS_PRIVATE, $this->screening_is_private);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_HAS_QANDA)) $criteria->add(ScreeningPeer::SCREENING_HAS_QANDA, $this->screening_has_qanda);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_STILL_IMAGE)) $criteria->add(ScreeningPeer::SCREENING_STILL_IMAGE, $this->screening_still_image);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_CHAT_MODERATED)) $criteria->add(ScreeningPeer::SCREENING_CHAT_MODERATED, $this->screening_chat_moderated);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_CHAT_QANDA_STARTED)) $criteria->add(ScreeningPeer::SCREENING_CHAT_QANDA_STARTED, $this->screening_chat_qanda_started);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_ALLOW_LATECOMERS)) $criteria->add(ScreeningPeer::SCREENING_ALLOW_LATECOMERS, $this->screening_allow_latecomers);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_FACEBOOK_TEXT)) $criteria->add(ScreeningPeer::SCREENING_FACEBOOK_TEXT, $this->screening_facebook_text);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_TWITTER_TEXT)) $criteria->add(ScreeningPeer::SCREENING_TWITTER_TEXT, $this->screening_twitter_text);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_QA)) $criteria->add(ScreeningPeer::SCREENING_QA, $this->screening_qa);
		if ($this->isColumnModified(ScreeningPeer::SCREENING_IS_DOHBR)) $criteria->add(ScreeningPeer::SCREENING_IS_DOHBR, $this->screening_is_dohbr);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ScreeningPeer::DATABASE_NAME);

		$criteria->add(ScreeningPeer::SCREENING_ID, $this->screening_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getScreeningId();
	}

	/**
	 * Generic method to set the primary key (screening_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setScreeningId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Screening (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFkHostId($this->fk_host_id);

		$copyObj->setFkFilmId($this->fk_film_id);

		$copyObj->setFkPaymentId($this->fk_payment_id);

		$copyObj->setFkProgramId($this->fk_program_id);

		$copyObj->setScreeningName($this->screening_name);

		$copyObj->setScreeningDate($this->screening_date);

		$copyObj->setScreeningTime($this->screening_time);

		$copyObj->setScreeningEndTime($this->screening_end_time);

		$copyObj->setScreeningPrescreeningTime($this->screening_prescreening_time);

		$copyObj->setScreeningPostMessage($this->screening_post_message);

		$copyObj->setScreeningPaidStatus($this->screening_paid_status);

		$copyObj->setScreeningSeatsOccupied($this->screening_seats_occupied);

		$copyObj->setScreeningCreatedAt($this->screening_created_at);

		$copyObj->setScreeningUpdatedAt($this->screening_updated_at);

		$copyObj->setScreeningUniqueKey($this->screening_unique_key);

		$copyObj->setScreeningStatus($this->screening_status);

		$copyObj->setScreeningType($this->screening_type);

		$copyObj->setScreeningTotalSeats($this->screening_total_seats);

		$copyObj->setScreeningConstellationImage($this->screening_constellation_image);

		$copyObj->setScreeningGuestName($this->screening_guest_name);

		$copyObj->setScreeningGuestImage($this->screening_guest_image);

		$copyObj->setScreeningDescription($this->screening_description);

		$copyObj->setScreeningLiveWebcam($this->screening_live_webcam);

		$copyObj->setScreeningIsAdmin($this->screening_is_admin);

		$copyObj->setScreeningFeatured($this->screening_featured);

		$copyObj->setScreeningHighlighted($this->screening_highlighted);

		$copyObj->setScreeningCreditStatus($this->screening_credit_status);

		$copyObj->setScreeningDefaultTimezone($this->screening_default_timezone);

		$copyObj->setScreeningReceiptStatus($this->screening_receipt_status);

		$copyObj->setScreeningDefaultTimezoneId($this->screening_default_timezone_id);

		$copyObj->setScreeningVideoServerHostname($this->screening_video_server_hostname);

		$copyObj->setScreeningVideoServerInstanceId($this->screening_video_server_instance_id);

		$copyObj->setScreeningVideoIsQueued($this->screening_video_is_queued);

		$copyObj->setScreeningIsPrivate($this->screening_is_private);

		$copyObj->setScreeningHasQanda($this->screening_has_qanda);

		$copyObj->setScreeningStillImage($this->screening_still_image);

		$copyObj->setScreeningChatModerated($this->screening_chat_moderated);

		$copyObj->setScreeningChatQandaStarted($this->screening_chat_qanda_started);

		$copyObj->setScreeningAllowLatecomers($this->screening_allow_latecomers);

		$copyObj->setScreeningFacebookText($this->screening_facebook_text);

		$copyObj->setScreeningTwitterText($this->screening_twitter_text);

		$copyObj->setScreeningQa($this->screening_qa);

		$copyObj->setScreeningIsDohbr($this->screening_is_dohbr);


		$copyObj->setNew(true);

		$copyObj->setScreeningId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Screening Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ScreeningPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ScreeningPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseScreening:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseScreening::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseScreening
