<?php

/**
 * Base class that represents a row from the 'program' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:34 PM EDT
 *
 * @package    lib.model.om
 */
abstract class BaseProgram extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProgramPeer
	 */
	protected static $peer;

	/**
	 * The value for the program_id field.
	 * @var        int
	 */
	protected $program_id;

	/**
	 * The value for the program_created_at field.
	 * @var        string
	 */
	protected $program_created_at;

	/**
	 * The value for the program_updated_at field.
	 * @var        string
	 */
	protected $program_updated_at;

	/**
	 * The value for the fk_program_sponsor_id field.
	 * @var        int
	 */
	protected $fk_program_sponsor_id;

	/**
	 * The value for the program_name field.
	 * @var        string
	 */
	protected $program_name;

	/**
	 * The value for the program_short_name field.
	 * @var        string
	 */
	protected $program_short_name;

	/**
	 * The value for the fk_film_id field.
	 * @var        int
	 */
	protected $fk_film_id;

	/**
	 * The value for the program_logo field.
	 * @var        string
	 */
	protected $program_logo;

	/**
	 * The value for the program_featured field.
	 * @var        int
	 */
	protected $program_featured;

	/**
	 * The value for the program_production_company field.
	 * @var        string
	 */
	protected $program_production_company;

	/**
	 * The value for the program_start_date field.
	 * @var        string
	 */
	protected $program_start_date;

	/**
	 * The value for the program_end_date field.
	 * @var        string
	 */
	protected $program_end_date;

	/**
	 * The value for the program_preuser field.
	 * @var        int
	 */
	protected $program_preuser;

	/**
	 * The value for the program_total_seats field.
	 * @var        int
	 */
	protected $program_total_seats;

	/**
	 * The value for the program_ticket_price field.
	 * @var        double
	 */
	protected $program_ticket_price;

	/**
	 * The value for the program_hostbyrequest_price field.
	 * @var        double
	 */
	protected $program_hostbyrequest_price;

	/**
	 * The value for the program_setup_price field.
	 * @var        double
	 */
	protected $program_setup_price;

	/**
	 * The value for the program_info field.
	 * @var        string
	 */
	protected $program_info;

	/**
	 * The value for the program_status field.
	 * @var        int
	 */
	protected $program_status;

	/**
	 * The value for the program_still_image field.
	 * @var        string
	 */
	protected $program_still_image;

	/**
	 * The value for the program_background_image field.
	 * @var        string
	 */
	protected $program_background_image;

	/**
	 * The value for the program_geoblocking_enabled field.
	 * @var        int
	 */
	protected $program_geoblocking_enabled;

	/**
	 * The value for the program_geoblocking_type field.
	 * @var        int
	 */
	protected $program_geoblocking_type;

	/**
	 * The value for the program_use_sponsor_codes field.
	 * @var        int
	 */
	protected $program_use_sponsor_codes;

	/**
	 * The value for the program_allow_hostbyrequest field.
	 * @var        int
	 */
	protected $program_allow_hostbyrequest;

	/**
	 * The value for the program_allow_user_hosting field.
	 * @var        int
	 */
	protected $program_allow_user_hosting;

	/**
	 * The value for the program_alternate_template field.
	 * @var        int
	 */
	protected $program_alternate_template;

	/**
	 * The value for the program_alternate_opts field.
	 * @var        string
	 */
	protected $program_alternate_opts;

	/**
	 * The value for the program_share field.
	 * @var        int
	 */
	protected $program_share;

	/**
	 * The value for the program_synopsis field.
	 * @var        string
	 */
	protected $program_synopsis;

	/**
	 * The value for the program_url field.
	 * @var        string
	 */
	protected $program_url;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ProgramPeer';

	/**
	 * Get the [program_id] column value.
	 * 
	 * @return     int
	 */
	public function getProgramId()
	{
		return $this->program_id;
	}

	/**
	 * Get the [optionally formatted] temporal [program_created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getProgramCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->program_created_at === null) {
			return null;
		}


		if ($this->program_created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->program_created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->program_created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [program_updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getProgramUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->program_updated_at === null) {
			return null;
		}


		if ($this->program_updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->program_updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->program_updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [fk_program_sponsor_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkProgramSponsorId()
	{
		return $this->fk_program_sponsor_id;
	}

	/**
	 * Get the [program_name] column value.
	 * 
	 * @return     string
	 */
	public function getProgramName()
	{
		return $this->program_name;
	}

	/**
	 * Get the [program_short_name] column value.
	 * 
	 * @return     string
	 */
	public function getProgramShortName()
	{
		return $this->program_short_name;
	}

	/**
	 * Get the [fk_film_id] column value.
	 * 
	 * @return     int
	 */
	public function getFkFilmId()
	{
		return $this->fk_film_id;
	}

	/**
	 * Get the [program_logo] column value.
	 * 
	 * @return     string
	 */
	public function getProgramLogo()
	{
		return $this->program_logo;
	}

	/**
	 * Get the [program_featured] column value.
	 * 
	 * @return     int
	 */
	public function getProgramFeatured()
	{
		return $this->program_featured;
	}

	/**
	 * Get the [program_production_company] column value.
	 * 
	 * @return     string
	 */
	public function getProgramProductionCompany()
	{
		return $this->program_production_company;
	}

	/**
	 * Get the [optionally formatted] temporal [program_start_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getProgramStartDate($format = 'Y-m-d H:i:s')
	{
		if ($this->program_start_date === null) {
			return null;
		}


		if ($this->program_start_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->program_start_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->program_start_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [program_end_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getProgramEndDate($format = 'Y-m-d H:i:s')
	{
		if ($this->program_end_date === null) {
			return null;
		}


		if ($this->program_end_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->program_end_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->program_end_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [program_preuser] column value.
	 * 
	 * @return     int
	 */
	public function getProgramPreuser()
	{
		return $this->program_preuser;
	}

	/**
	 * Get the [program_total_seats] column value.
	 * 
	 * @return     int
	 */
	public function getProgramTotalSeats()
	{
		return $this->program_total_seats;
	}

	/**
	 * Get the [program_ticket_price] column value.
	 * 
	 * @return     double
	 */
	public function getProgramTicketPrice()
	{
		return $this->program_ticket_price;
	}

	/**
	 * Get the [program_hostbyrequest_price] column value.
	 * 
	 * @return     double
	 */
	public function getProgramHostbyrequestPrice()
	{
		return $this->program_hostbyrequest_price;
	}

	/**
	 * Get the [program_setup_price] column value.
	 * 
	 * @return     double
	 */
	public function getProgramSetupPrice()
	{
		return $this->program_setup_price;
	}

	/**
	 * Get the [program_info] column value.
	 * 
	 * @return     string
	 */
	public function getProgramInfo()
	{
		return $this->program_info;
	}

	/**
	 * Get the [program_status] column value.
	 * 
	 * @return     int
	 */
	public function getProgramStatus()
	{
		return $this->program_status;
	}

	/**
	 * Get the [program_still_image] column value.
	 * 
	 * @return     string
	 */
	public function getProgramStillImage()
	{
		return $this->program_still_image;
	}

	/**
	 * Get the [program_background_image] column value.
	 * 
	 * @return     string
	 */
	public function getProgramBackgroundImage()
	{
		return $this->program_background_image;
	}

	/**
	 * Get the [program_geoblocking_enabled] column value.
	 * 
	 * @return     int
	 */
	public function getProgramGeoblockingEnabled()
	{
		return $this->program_geoblocking_enabled;
	}

	/**
	 * Get the [program_geoblocking_type] column value.
	 * 
	 * @return     int
	 */
	public function getProgramGeoblockingType()
	{
		return $this->program_geoblocking_type;
	}

	/**
	 * Get the [program_use_sponsor_codes] column value.
	 * 
	 * @return     int
	 */
	public function getProgramUseSponsorCodes()
	{
		return $this->program_use_sponsor_codes;
	}

	/**
	 * Get the [program_allow_hostbyrequest] column value.
	 * 
	 * @return     int
	 */
	public function getProgramAllowHostbyrequest()
	{
		return $this->program_allow_hostbyrequest;
	}

	/**
	 * Get the [program_allow_user_hosting] column value.
	 * 
	 * @return     int
	 */
	public function getProgramAllowUserHosting()
	{
		return $this->program_allow_user_hosting;
	}

	/**
	 * Get the [program_alternate_template] column value.
	 * 
	 * @return     int
	 */
	public function getProgramAlternateTemplate()
	{
		return $this->program_alternate_template;
	}

	/**
	 * Get the [program_alternate_opts] column value.
	 * 
	 * @return     string
	 */
	public function getProgramAlternateOpts()
	{
		return $this->program_alternate_opts;
	}

	/**
	 * Get the [program_share] column value.
	 * 
	 * @return     int
	 */
	public function getProgramShare()
	{
		return $this->program_share;
	}

	/**
	 * Get the [program_synopsis] column value.
	 * 
	 * @return     string
	 */
	public function getProgramSynopsis()
	{
		return $this->program_synopsis;
	}

	/**
	 * Get the [program_url] column value.
	 * 
	 * @return     string
	 */
	public function getProgramUrl()
	{
		return $this->program_url;
	}

	/**
	 * Set the value of [program_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_id !== $v) {
			$this->program_id = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_ID;
		}

		return $this;
	} // setProgramId()

	/**
	 * Sets the value of [program_created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->program_created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->program_created_at !== null && $tmpDt = new DateTime($this->program_created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->program_created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProgramPeer::PROGRAM_CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setProgramCreatedAt()

	/**
	 * Sets the value of [program_updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->program_updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->program_updated_at !== null && $tmpDt = new DateTime($this->program_updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->program_updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProgramPeer::PROGRAM_UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setProgramUpdatedAt()

	/**
	 * Set the value of [fk_program_sponsor_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setFkProgramSponsorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_program_sponsor_id !== $v) {
			$this->fk_program_sponsor_id = $v;
			$this->modifiedColumns[] = ProgramPeer::FK_PROGRAM_SPONSOR_ID;
		}

		return $this;
	} // setFkProgramSponsorId()

	/**
	 * Set the value of [program_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_name !== $v) {
			$this->program_name = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_NAME;
		}

		return $this;
	} // setProgramName()

	/**
	 * Set the value of [program_short_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramShortName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_short_name !== $v) {
			$this->program_short_name = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_SHORT_NAME;
		}

		return $this;
	} // setProgramShortName()

	/**
	 * Set the value of [fk_film_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setFkFilmId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fk_film_id !== $v) {
			$this->fk_film_id = $v;
			$this->modifiedColumns[] = ProgramPeer::FK_FILM_ID;
		}

		return $this;
	} // setFkFilmId()

	/**
	 * Set the value of [program_logo] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramLogo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_logo !== $v) {
			$this->program_logo = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_LOGO;
		}

		return $this;
	} // setProgramLogo()

	/**
	 * Set the value of [program_featured] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramFeatured($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_featured !== $v) {
			$this->program_featured = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_FEATURED;
		}

		return $this;
	} // setProgramFeatured()

	/**
	 * Set the value of [program_production_company] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramProductionCompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_production_company !== $v) {
			$this->program_production_company = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_PRODUCTION_COMPANY;
		}

		return $this;
	} // setProgramProductionCompany()

	/**
	 * Sets the value of [program_start_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramStartDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->program_start_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->program_start_date !== null && $tmpDt = new DateTime($this->program_start_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->program_start_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProgramPeer::PROGRAM_START_DATE;
			}
		} // if either are not null

		return $this;
	} // setProgramStartDate()

	/**
	 * Sets the value of [program_end_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramEndDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->program_end_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->program_end_date !== null && $tmpDt = new DateTime($this->program_end_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->program_end_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProgramPeer::PROGRAM_END_DATE;
			}
		} // if either are not null

		return $this;
	} // setProgramEndDate()

	/**
	 * Set the value of [program_preuser] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramPreuser($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_preuser !== $v) {
			$this->program_preuser = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_PREUSER;
		}

		return $this;
	} // setProgramPreuser()

	/**
	 * Set the value of [program_total_seats] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramTotalSeats($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_total_seats !== $v) {
			$this->program_total_seats = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_TOTAL_SEATS;
		}

		return $this;
	} // setProgramTotalSeats()

	/**
	 * Set the value of [program_ticket_price] column.
	 * 
	 * @param      double $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramTicketPrice($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->program_ticket_price !== $v) {
			$this->program_ticket_price = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_TICKET_PRICE;
		}

		return $this;
	} // setProgramTicketPrice()

	/**
	 * Set the value of [program_hostbyrequest_price] column.
	 * 
	 * @param      double $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramHostbyrequestPrice($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->program_hostbyrequest_price !== $v) {
			$this->program_hostbyrequest_price = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_HOSTBYREQUEST_PRICE;
		}

		return $this;
	} // setProgramHostbyrequestPrice()

	/**
	 * Set the value of [program_setup_price] column.
	 * 
	 * @param      double $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramSetupPrice($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->program_setup_price !== $v) {
			$this->program_setup_price = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_SETUP_PRICE;
		}

		return $this;
	} // setProgramSetupPrice()

	/**
	 * Set the value of [program_info] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramInfo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_info !== $v) {
			$this->program_info = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_INFO;
		}

		return $this;
	} // setProgramInfo()

	/**
	 * Set the value of [program_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_status !== $v) {
			$this->program_status = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_STATUS;
		}

		return $this;
	} // setProgramStatus()

	/**
	 * Set the value of [program_still_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramStillImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_still_image !== $v) {
			$this->program_still_image = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_STILL_IMAGE;
		}

		return $this;
	} // setProgramStillImage()

	/**
	 * Set the value of [program_background_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramBackgroundImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_background_image !== $v) {
			$this->program_background_image = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_BACKGROUND_IMAGE;
		}

		return $this;
	} // setProgramBackgroundImage()

	/**
	 * Set the value of [program_geoblocking_enabled] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramGeoblockingEnabled($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_geoblocking_enabled !== $v) {
			$this->program_geoblocking_enabled = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_GEOBLOCKING_ENABLED;
		}

		return $this;
	} // setProgramGeoblockingEnabled()

	/**
	 * Set the value of [program_geoblocking_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramGeoblockingType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_geoblocking_type !== $v) {
			$this->program_geoblocking_type = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_GEOBLOCKING_TYPE;
		}

		return $this;
	} // setProgramGeoblockingType()

	/**
	 * Set the value of [program_use_sponsor_codes] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramUseSponsorCodes($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_use_sponsor_codes !== $v) {
			$this->program_use_sponsor_codes = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_USE_SPONSOR_CODES;
		}

		return $this;
	} // setProgramUseSponsorCodes()

	/**
	 * Set the value of [program_allow_hostbyrequest] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramAllowHostbyrequest($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_allow_hostbyrequest !== $v) {
			$this->program_allow_hostbyrequest = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_ALLOW_HOSTBYREQUEST;
		}

		return $this;
	} // setProgramAllowHostbyrequest()

	/**
	 * Set the value of [program_allow_user_hosting] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramAllowUserHosting($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_allow_user_hosting !== $v) {
			$this->program_allow_user_hosting = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_ALLOW_USER_HOSTING;
		}

		return $this;
	} // setProgramAllowUserHosting()

	/**
	 * Set the value of [program_alternate_template] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramAlternateTemplate($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_alternate_template !== $v) {
			$this->program_alternate_template = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_ALTERNATE_TEMPLATE;
		}

		return $this;
	} // setProgramAlternateTemplate()

	/**
	 * Set the value of [program_alternate_opts] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramAlternateOpts($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_alternate_opts !== $v) {
			$this->program_alternate_opts = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_ALTERNATE_OPTS;
		}

		return $this;
	} // setProgramAlternateOpts()

	/**
	 * Set the value of [program_share] column.
	 * 
	 * @param      int $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramShare($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->program_share !== $v) {
			$this->program_share = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_SHARE;
		}

		return $this;
	} // setProgramShare()

	/**
	 * Set the value of [program_synopsis] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramSynopsis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_synopsis !== $v) {
			$this->program_synopsis = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_SYNOPSIS;
		}

		return $this;
	} // setProgramSynopsis()

	/**
	 * Set the value of [program_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Program The current object (for fluent API support)
	 */
	public function setProgramUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_url !== $v) {
			$this->program_url = $v;
			$this->modifiedColumns[] = ProgramPeer::PROGRAM_URL;
		}

		return $this;
	} // setProgramUrl()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->program_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->program_created_at = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->program_updated_at = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->fk_program_sponsor_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->program_name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->program_short_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->fk_film_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->program_logo = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->program_featured = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->program_production_company = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->program_start_date = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->program_end_date = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->program_preuser = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->program_total_seats = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->program_ticket_price = ($row[$startcol + 14] !== null) ? (double) $row[$startcol + 14] : null;
			$this->program_hostbyrequest_price = ($row[$startcol + 15] !== null) ? (double) $row[$startcol + 15] : null;
			$this->program_setup_price = ($row[$startcol + 16] !== null) ? (double) $row[$startcol + 16] : null;
			$this->program_info = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->program_status = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->program_still_image = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->program_background_image = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->program_geoblocking_enabled = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->program_geoblocking_type = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->program_use_sponsor_codes = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->program_allow_hostbyrequest = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->program_allow_user_hosting = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->program_alternate_template = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->program_alternate_opts = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->program_share = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->program_synopsis = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->program_url = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 31; // 31 = ProgramPeer::NUM_COLUMNS - ProgramPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Program object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProgramPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProgramPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProgramPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProgram:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ProgramPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProgram:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProgramPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProgram:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProgram:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ProgramPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProgramPeer::PROGRAM_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProgramPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setProgramId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProgramPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ProgramPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProgramPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getProgramId();
				break;
			case 1:
				return $this->getProgramCreatedAt();
				break;
			case 2:
				return $this->getProgramUpdatedAt();
				break;
			case 3:
				return $this->getFkProgramSponsorId();
				break;
			case 4:
				return $this->getProgramName();
				break;
			case 5:
				return $this->getProgramShortName();
				break;
			case 6:
				return $this->getFkFilmId();
				break;
			case 7:
				return $this->getProgramLogo();
				break;
			case 8:
				return $this->getProgramFeatured();
				break;
			case 9:
				return $this->getProgramProductionCompany();
				break;
			case 10:
				return $this->getProgramStartDate();
				break;
			case 11:
				return $this->getProgramEndDate();
				break;
			case 12:
				return $this->getProgramPreuser();
				break;
			case 13:
				return $this->getProgramTotalSeats();
				break;
			case 14:
				return $this->getProgramTicketPrice();
				break;
			case 15:
				return $this->getProgramHostbyrequestPrice();
				break;
			case 16:
				return $this->getProgramSetupPrice();
				break;
			case 17:
				return $this->getProgramInfo();
				break;
			case 18:
				return $this->getProgramStatus();
				break;
			case 19:
				return $this->getProgramStillImage();
				break;
			case 20:
				return $this->getProgramBackgroundImage();
				break;
			case 21:
				return $this->getProgramGeoblockingEnabled();
				break;
			case 22:
				return $this->getProgramGeoblockingType();
				break;
			case 23:
				return $this->getProgramUseSponsorCodes();
				break;
			case 24:
				return $this->getProgramAllowHostbyrequest();
				break;
			case 25:
				return $this->getProgramAllowUserHosting();
				break;
			case 26:
				return $this->getProgramAlternateTemplate();
				break;
			case 27:
				return $this->getProgramAlternateOpts();
				break;
			case 28:
				return $this->getProgramShare();
				break;
			case 29:
				return $this->getProgramSynopsis();
				break;
			case 30:
				return $this->getProgramUrl();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProgramPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getProgramId(),
			$keys[1] => $this->getProgramCreatedAt(),
			$keys[2] => $this->getProgramUpdatedAt(),
			$keys[3] => $this->getFkProgramSponsorId(),
			$keys[4] => $this->getProgramName(),
			$keys[5] => $this->getProgramShortName(),
			$keys[6] => $this->getFkFilmId(),
			$keys[7] => $this->getProgramLogo(),
			$keys[8] => $this->getProgramFeatured(),
			$keys[9] => $this->getProgramProductionCompany(),
			$keys[10] => $this->getProgramStartDate(),
			$keys[11] => $this->getProgramEndDate(),
			$keys[12] => $this->getProgramPreuser(),
			$keys[13] => $this->getProgramTotalSeats(),
			$keys[14] => $this->getProgramTicketPrice(),
			$keys[15] => $this->getProgramHostbyrequestPrice(),
			$keys[16] => $this->getProgramSetupPrice(),
			$keys[17] => $this->getProgramInfo(),
			$keys[18] => $this->getProgramStatus(),
			$keys[19] => $this->getProgramStillImage(),
			$keys[20] => $this->getProgramBackgroundImage(),
			$keys[21] => $this->getProgramGeoblockingEnabled(),
			$keys[22] => $this->getProgramGeoblockingType(),
			$keys[23] => $this->getProgramUseSponsorCodes(),
			$keys[24] => $this->getProgramAllowHostbyrequest(),
			$keys[25] => $this->getProgramAllowUserHosting(),
			$keys[26] => $this->getProgramAlternateTemplate(),
			$keys[27] => $this->getProgramAlternateOpts(),
			$keys[28] => $this->getProgramShare(),
			$keys[29] => $this->getProgramSynopsis(),
			$keys[30] => $this->getProgramUrl(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProgramPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setProgramId($value);
				break;
			case 1:
				$this->setProgramCreatedAt($value);
				break;
			case 2:
				$this->setProgramUpdatedAt($value);
				break;
			case 3:
				$this->setFkProgramSponsorId($value);
				break;
			case 4:
				$this->setProgramName($value);
				break;
			case 5:
				$this->setProgramShortName($value);
				break;
			case 6:
				$this->setFkFilmId($value);
				break;
			case 7:
				$this->setProgramLogo($value);
				break;
			case 8:
				$this->setProgramFeatured($value);
				break;
			case 9:
				$this->setProgramProductionCompany($value);
				break;
			case 10:
				$this->setProgramStartDate($value);
				break;
			case 11:
				$this->setProgramEndDate($value);
				break;
			case 12:
				$this->setProgramPreuser($value);
				break;
			case 13:
				$this->setProgramTotalSeats($value);
				break;
			case 14:
				$this->setProgramTicketPrice($value);
				break;
			case 15:
				$this->setProgramHostbyrequestPrice($value);
				break;
			case 16:
				$this->setProgramSetupPrice($value);
				break;
			case 17:
				$this->setProgramInfo($value);
				break;
			case 18:
				$this->setProgramStatus($value);
				break;
			case 19:
				$this->setProgramStillImage($value);
				break;
			case 20:
				$this->setProgramBackgroundImage($value);
				break;
			case 21:
				$this->setProgramGeoblockingEnabled($value);
				break;
			case 22:
				$this->setProgramGeoblockingType($value);
				break;
			case 23:
				$this->setProgramUseSponsorCodes($value);
				break;
			case 24:
				$this->setProgramAllowHostbyrequest($value);
				break;
			case 25:
				$this->setProgramAllowUserHosting($value);
				break;
			case 26:
				$this->setProgramAlternateTemplate($value);
				break;
			case 27:
				$this->setProgramAlternateOpts($value);
				break;
			case 28:
				$this->setProgramShare($value);
				break;
			case 29:
				$this->setProgramSynopsis($value);
				break;
			case 30:
				$this->setProgramUrl($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProgramPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setProgramId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProgramCreatedAt($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProgramUpdatedAt($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFkProgramSponsorId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setProgramName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setProgramShortName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFkFilmId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setProgramLogo($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setProgramFeatured($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setProgramProductionCompany($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setProgramStartDate($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setProgramEndDate($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setProgramPreuser($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setProgramTotalSeats($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setProgramTicketPrice($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setProgramHostbyrequestPrice($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setProgramSetupPrice($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setProgramInfo($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setProgramStatus($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setProgramStillImage($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setProgramBackgroundImage($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setProgramGeoblockingEnabled($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setProgramGeoblockingType($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setProgramUseSponsorCodes($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setProgramAllowHostbyrequest($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setProgramAllowUserHosting($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setProgramAlternateTemplate($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setProgramAlternateOpts($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setProgramShare($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setProgramSynopsis($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setProgramUrl($arr[$keys[30]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProgramPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProgramPeer::PROGRAM_ID)) $criteria->add(ProgramPeer::PROGRAM_ID, $this->program_id);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_CREATED_AT)) $criteria->add(ProgramPeer::PROGRAM_CREATED_AT, $this->program_created_at);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_UPDATED_AT)) $criteria->add(ProgramPeer::PROGRAM_UPDATED_AT, $this->program_updated_at);
		if ($this->isColumnModified(ProgramPeer::FK_PROGRAM_SPONSOR_ID)) $criteria->add(ProgramPeer::FK_PROGRAM_SPONSOR_ID, $this->fk_program_sponsor_id);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_NAME)) $criteria->add(ProgramPeer::PROGRAM_NAME, $this->program_name);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_SHORT_NAME)) $criteria->add(ProgramPeer::PROGRAM_SHORT_NAME, $this->program_short_name);
		if ($this->isColumnModified(ProgramPeer::FK_FILM_ID)) $criteria->add(ProgramPeer::FK_FILM_ID, $this->fk_film_id);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_LOGO)) $criteria->add(ProgramPeer::PROGRAM_LOGO, $this->program_logo);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_FEATURED)) $criteria->add(ProgramPeer::PROGRAM_FEATURED, $this->program_featured);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_PRODUCTION_COMPANY)) $criteria->add(ProgramPeer::PROGRAM_PRODUCTION_COMPANY, $this->program_production_company);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_START_DATE)) $criteria->add(ProgramPeer::PROGRAM_START_DATE, $this->program_start_date);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_END_DATE)) $criteria->add(ProgramPeer::PROGRAM_END_DATE, $this->program_end_date);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_PREUSER)) $criteria->add(ProgramPeer::PROGRAM_PREUSER, $this->program_preuser);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_TOTAL_SEATS)) $criteria->add(ProgramPeer::PROGRAM_TOTAL_SEATS, $this->program_total_seats);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_TICKET_PRICE)) $criteria->add(ProgramPeer::PROGRAM_TICKET_PRICE, $this->program_ticket_price);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_HOSTBYREQUEST_PRICE)) $criteria->add(ProgramPeer::PROGRAM_HOSTBYREQUEST_PRICE, $this->program_hostbyrequest_price);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_SETUP_PRICE)) $criteria->add(ProgramPeer::PROGRAM_SETUP_PRICE, $this->program_setup_price);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_INFO)) $criteria->add(ProgramPeer::PROGRAM_INFO, $this->program_info);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_STATUS)) $criteria->add(ProgramPeer::PROGRAM_STATUS, $this->program_status);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_STILL_IMAGE)) $criteria->add(ProgramPeer::PROGRAM_STILL_IMAGE, $this->program_still_image);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_BACKGROUND_IMAGE)) $criteria->add(ProgramPeer::PROGRAM_BACKGROUND_IMAGE, $this->program_background_image);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_GEOBLOCKING_ENABLED)) $criteria->add(ProgramPeer::PROGRAM_GEOBLOCKING_ENABLED, $this->program_geoblocking_enabled);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_GEOBLOCKING_TYPE)) $criteria->add(ProgramPeer::PROGRAM_GEOBLOCKING_TYPE, $this->program_geoblocking_type);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_USE_SPONSOR_CODES)) $criteria->add(ProgramPeer::PROGRAM_USE_SPONSOR_CODES, $this->program_use_sponsor_codes);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_ALLOW_HOSTBYREQUEST)) $criteria->add(ProgramPeer::PROGRAM_ALLOW_HOSTBYREQUEST, $this->program_allow_hostbyrequest);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_ALLOW_USER_HOSTING)) $criteria->add(ProgramPeer::PROGRAM_ALLOW_USER_HOSTING, $this->program_allow_user_hosting);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_ALTERNATE_TEMPLATE)) $criteria->add(ProgramPeer::PROGRAM_ALTERNATE_TEMPLATE, $this->program_alternate_template);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_ALTERNATE_OPTS)) $criteria->add(ProgramPeer::PROGRAM_ALTERNATE_OPTS, $this->program_alternate_opts);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_SHARE)) $criteria->add(ProgramPeer::PROGRAM_SHARE, $this->program_share);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_SYNOPSIS)) $criteria->add(ProgramPeer::PROGRAM_SYNOPSIS, $this->program_synopsis);
		if ($this->isColumnModified(ProgramPeer::PROGRAM_URL)) $criteria->add(ProgramPeer::PROGRAM_URL, $this->program_url);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProgramPeer::DATABASE_NAME);

		$criteria->add(ProgramPeer::PROGRAM_ID, $this->program_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getProgramId();
	}

	/**
	 * Generic method to set the primary key (program_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setProgramId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Program (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProgramCreatedAt($this->program_created_at);

		$copyObj->setProgramUpdatedAt($this->program_updated_at);

		$copyObj->setFkProgramSponsorId($this->fk_program_sponsor_id);

		$copyObj->setProgramName($this->program_name);

		$copyObj->setProgramShortName($this->program_short_name);

		$copyObj->setFkFilmId($this->fk_film_id);

		$copyObj->setProgramLogo($this->program_logo);

		$copyObj->setProgramFeatured($this->program_featured);

		$copyObj->setProgramProductionCompany($this->program_production_company);

		$copyObj->setProgramStartDate($this->program_start_date);

		$copyObj->setProgramEndDate($this->program_end_date);

		$copyObj->setProgramPreuser($this->program_preuser);

		$copyObj->setProgramTotalSeats($this->program_total_seats);

		$copyObj->setProgramTicketPrice($this->program_ticket_price);

		$copyObj->setProgramHostbyrequestPrice($this->program_hostbyrequest_price);

		$copyObj->setProgramSetupPrice($this->program_setup_price);

		$copyObj->setProgramInfo($this->program_info);

		$copyObj->setProgramStatus($this->program_status);

		$copyObj->setProgramStillImage($this->program_still_image);

		$copyObj->setProgramBackgroundImage($this->program_background_image);

		$copyObj->setProgramGeoblockingEnabled($this->program_geoblocking_enabled);

		$copyObj->setProgramGeoblockingType($this->program_geoblocking_type);

		$copyObj->setProgramUseSponsorCodes($this->program_use_sponsor_codes);

		$copyObj->setProgramAllowHostbyrequest($this->program_allow_hostbyrequest);

		$copyObj->setProgramAllowUserHosting($this->program_allow_user_hosting);

		$copyObj->setProgramAlternateTemplate($this->program_alternate_template);

		$copyObj->setProgramAlternateOpts($this->program_alternate_opts);

		$copyObj->setProgramShare($this->program_share);

		$copyObj->setProgramSynopsis($this->program_synopsis);

		$copyObj->setProgramUrl($this->program_url);


		$copyObj->setNew(true);

		$copyObj->setProgramId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Program Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProgramPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProgramPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProgram:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProgram::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProgram
