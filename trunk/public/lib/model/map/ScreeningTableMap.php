<?php


/**
 * This class defines the structure of the 'screening' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:35 PM EDT
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class ScreeningTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.ScreeningTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('screening');
		$this->setPhpName('Screening');
		$this->setClassname('Screening');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('SCREENING_ID', 'ScreeningId', 'INTEGER', true, 11, null);
		$this->addColumn('FK_HOST_ID', 'FkHostId', 'INTEGER', false, 11, null);
		$this->addColumn('FK_FILM_ID', 'FkFilmId', 'INTEGER', false, 11, null);
		$this->addColumn('FK_PAYMENT_ID', 'FkPaymentId', 'INTEGER', false, 11, null);
		$this->addColumn('FK_PROGRAM_ID', 'FkProgramId', 'INTEGER', false, 11, null);
		$this->addColumn('SCREENING_NAME', 'ScreeningName', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_DATE', 'ScreeningDate', 'DATE', false, null, null);
		$this->addColumn('SCREENING_TIME', 'ScreeningTime', 'TIME', false, null, null);
		$this->addColumn('SCREENING_END_TIME', 'ScreeningEndTime', 'TIMESTAMP', false, null, null);
		$this->addColumn('SCREENING_PRESCREENING_TIME', 'ScreeningPrescreeningTime', 'TIME', false, null, '00:30:00');
		$this->addColumn('SCREENING_POST_MESSAGE', 'ScreeningPostMessage', 'LONGVARCHAR', false, null, null);
		$this->addColumn('SCREENING_PAID_STATUS', 'ScreeningPaidStatus', 'TINYINT', false, 1, 0);
		$this->addColumn('SCREENING_SEATS_OCCUPIED', 'ScreeningSeatsOccupied', 'INTEGER', false, 11, null);
		$this->addColumn('SCREENING_CREATED_AT', 'ScreeningCreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('SCREENING_UPDATED_AT', 'ScreeningUpdatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('SCREENING_UNIQUE_KEY', 'ScreeningUniqueKey', 'VARCHAR', false, 15, null);
		$this->addColumn('SCREENING_STATUS', 'ScreeningStatus', 'TINYINT', false, 1, null);
		$this->addColumn('SCREENING_TYPE', 'ScreeningType', 'TINYINT', false, 1, null);
		$this->addColumn('SCREENING_TOTAL_SEATS', 'ScreeningTotalSeats', 'INTEGER', false, 11, 0);
		$this->addColumn('SCREENING_CONSTELLATION_IMAGE', 'ScreeningConstellationImage', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_GUEST_NAME', 'ScreeningGuestName', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_GUEST_IMAGE', 'ScreeningGuestImage', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_DESCRIPTION', 'ScreeningDescription', 'LONGVARCHAR', false, null, null);
		$this->addColumn('SCREENING_LIVE_WEBCAM', 'ScreeningLiveWebcam', 'TINYINT', false, 1, 0);
		$this->addColumn('SCREENING_IS_ADMIN', 'ScreeningIsAdmin', 'TINYINT', false, 1, 0);
		$this->addColumn('SCREENING_FEATURED', 'ScreeningFeatured', 'TINYINT', false, 1, 0);
		$this->addColumn('SCREENING_HIGHLIGHTED', 'ScreeningHighlighted', 'TINYINT', false, 4, null);
		$this->addColumn('SCREENING_CREDIT_STATUS', 'ScreeningCreditStatus', 'TINYINT', false, 1, 0);
		$this->addColumn('SCREENING_DEFAULT_TIMEZONE', 'ScreeningDefaultTimezone', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_RECEIPT_STATUS', 'ScreeningReceiptStatus', 'TINYINT', false, 1, 0);
		$this->addColumn('SCREENING_DEFAULT_TIMEZONE_ID', 'ScreeningDefaultTimezoneId', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_VIDEO_SERVER_HOSTNAME', 'ScreeningVideoServerHostname', 'VARCHAR', false, 120, null);
		$this->addColumn('SCREENING_VIDEO_SERVER_INSTANCE_ID', 'ScreeningVideoServerInstanceId', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_VIDEO_IS_QUEUED', 'ScreeningVideoIsQueued', 'INTEGER', false, 11, null);
		$this->addColumn('SCREENING_IS_PRIVATE', 'ScreeningIsPrivate', 'TINYINT', false, 1, 0);
		$this->addColumn('SCREENING_HAS_QANDA', 'ScreeningHasQanda', 'TINYINT', false, 1, null);
		$this->addColumn('SCREENING_STILL_IMAGE', 'ScreeningStillImage', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_CHAT_MODERATED', 'ScreeningChatModerated', 'TINYINT', false, 4, null);
		$this->addColumn('SCREENING_CHAT_QANDA_STARTED', 'ScreeningChatQandaStarted', 'TINYINT', false, 4, null);
		$this->addColumn('SCREENING_ALLOW_LATECOMERS', 'ScreeningAllowLatecomers', 'TINYINT', false, 4, null);
		$this->addColumn('SCREENING_FACEBOOK_TEXT', 'ScreeningFacebookText', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_TWITTER_TEXT', 'ScreeningTwitterText', 'VARCHAR', false, 255, null);
		$this->addColumn('SCREENING_QA', 'ScreeningQa', 'LONGVARCHAR', false, null, null);
		$this->addColumn('SCREENING_IS_DOHBR', 'ScreeningIsDohbr', 'TINYINT', false, 1, 0);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // ScreeningTableMap
