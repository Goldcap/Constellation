<?php


/**
 * This class defines the structure of the 'user' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:36 PM EDT
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class UserTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.UserTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('user');
		$this->setPhpName('User');
		$this->setClassname('User');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('USER_ID', 'UserId', 'INTEGER', true, 11, null);
		$this->addColumn('USER_FB_UID', 'UserFbUid', 'VARCHAR', false, 32, null);
		$this->addColumn('USER_T_UID', 'UserTUid', 'VARCHAR', false, 32, null);
		$this->addColumn('USER_FULL_NAME', 'UserFullName', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_FNAME', 'UserFname', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_LNAME', 'UserLname', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_USERNAME', 'UserUsername', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_EMAIL', 'UserEmail', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_EDITABLE_EMAIL', 'UserEditableEmail', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_PASSWORD', 'UserPassword', 'VARCHAR', false, 79, null);
		$this->addColumn('USER_PASSWORD_LEGACY', 'UserPasswordLegacy', 'VARCHAR', false, 79, null);
		$this->addColumn('USER_BIO', 'UserBio', 'LONGVARCHAR', false, null, null);
		$this->addColumn('USER_FACEBOOK_URL', 'UserFacebookUrl', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_TWITTER_URL', 'UserTwitterUrl', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_WEBSITE_URL', 'UserWebsiteUrl', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_STATUS', 'UserStatus', 'TINYINT', false, 1, null);
		$this->addColumn('USER_CREATED_AT', 'UserCreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('USER_UPDATED_AT', 'UserUpdatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('USER_TYPE', 'UserType', 'TINYINT', false, 1, null);
		$this->addColumn('USER_CONTACT_EMAIL_ID', 'UserContactEmailId', 'INTEGER', false, 11, null);
		$this->addColumn('USER_T_USERNAME', 'UserTUsername', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_PHOTO_URL', 'UserPhotoUrl', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_IMAGE', 'UserImage', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_DEFAULT_TIMEZONE', 'UserDefaultTimezone', 'VARCHAR', false, 100, null);
		$this->addColumn('USER_BIRTHDAY_DATE', 'UserBirthdayDate', 'DATE', false, null, null);
		$this->addColumn('USER_BROADCAST_STATUS', 'UserBroadcastStatus', 'TINYINT', false, 2, 0);
		$this->addColumn('USER_T_OAUTH_TOKEN', 'UserTOauthToken', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_T_OAUTH_TOKEN_SECRET', 'UserTOauthTokenSecret', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_UAL', 'UserUal', 'VARCHAR', false, 255, null);
		$this->addColumn('USER_OPTIN', 'UserOptin', 'TINYINT', false, 4, null);
		$this->addColumn('USER_OPTIN_DATE', 'UserOptinDate', 'TIMESTAMP', false, null, null);
		$this->addColumn('USER_TAGLINE', 'UserTagline', 'VARCHAR', false, 255, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // UserTableMap
