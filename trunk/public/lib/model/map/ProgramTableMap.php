<?php


/**
 * This class defines the structure of the 'program' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:34 PM EDT
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class ProgramTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.ProgramTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('program');
		$this->setPhpName('Program');
		$this->setClassname('Program');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('PROGRAM_ID', 'ProgramId', 'INTEGER', true, 11, null);
		$this->addColumn('PROGRAM_CREATED_AT', 'ProgramCreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('PROGRAM_UPDATED_AT', 'ProgramUpdatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('FK_PROGRAM_SPONSOR_ID', 'FkProgramSponsorId', 'INTEGER', false, 11, null);
		$this->addColumn('PROGRAM_NAME', 'ProgramName', 'VARCHAR', false, 255, null);
		$this->addColumn('PROGRAM_SHORT_NAME', 'ProgramShortName', 'VARCHAR', false, 255, null);
		$this->addColumn('FK_FILM_ID', 'FkFilmId', 'INTEGER', false, 11, null);
		$this->addColumn('PROGRAM_LOGO', 'ProgramLogo', 'VARCHAR', false, 255, null);
		$this->addColumn('PROGRAM_FEATURED', 'ProgramFeatured', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_PRODUCTION_COMPANY', 'ProgramProductionCompany', 'VARCHAR', false, 255, null);
		$this->addColumn('PROGRAM_START_DATE', 'ProgramStartDate', 'TIMESTAMP', false, null, null);
		$this->addColumn('PROGRAM_END_DATE', 'ProgramEndDate', 'TIMESTAMP', false, null, null);
		$this->addColumn('PROGRAM_PREUSER', 'ProgramPreuser', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_TOTAL_SEATS', 'ProgramTotalSeats', 'INTEGER', false, 11, null);
		$this->addColumn('PROGRAM_TICKET_PRICE', 'ProgramTicketPrice', 'FLOAT', false, null, null);
		$this->addColumn('PROGRAM_HOSTBYREQUEST_PRICE', 'ProgramHostbyrequestPrice', 'FLOAT', false, null, null);
		$this->addColumn('PROGRAM_SETUP_PRICE', 'ProgramSetupPrice', 'FLOAT', false, null, null);
		$this->addColumn('PROGRAM_INFO', 'ProgramInfo', 'LONGVARCHAR', false, null, null);
		$this->addColumn('PROGRAM_STATUS', 'ProgramStatus', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_STILL_IMAGE', 'ProgramStillImage', 'VARCHAR', false, 255, null);
		$this->addColumn('PROGRAM_BACKGROUND_IMAGE', 'ProgramBackgroundImage', 'VARCHAR', false, 255, null);
		$this->addColumn('PROGRAM_GEOBLOCKING_ENABLED', 'ProgramGeoblockingEnabled', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_GEOBLOCKING_TYPE', 'ProgramGeoblockingType', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_USE_SPONSOR_CODES', 'ProgramUseSponsorCodes', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_ALLOW_HOSTBYREQUEST', 'ProgramAllowHostbyrequest', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_ALLOW_USER_HOSTING', 'ProgramAllowUserHosting', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_ALTERNATE_TEMPLATE', 'ProgramAlternateTemplate', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_ALTERNATE_OPTS', 'ProgramAlternateOpts', 'VARCHAR', false, 255, null);
		$this->addColumn('PROGRAM_SHARE', 'ProgramShare', 'TINYINT', false, 4, null);
		$this->addColumn('PROGRAM_SYNOPSIS', 'ProgramSynopsis', 'LONGVARCHAR', false, null, null);
		$this->addColumn('PROGRAM_URL', 'ProgramUrl', 'LONGVARCHAR', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // ProgramTableMap
