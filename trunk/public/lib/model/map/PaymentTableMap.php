<?php


/**
 * This class defines the structure of the 'payment' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu 26 Apr 2012 01:25:34 PM EDT
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PaymentTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PaymentTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('payment');
		$this->setPhpName('Payment');
		$this->setClassname('Payment');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('PAYMENT_ID', 'PaymentId', 'INTEGER', true, 11, null);
		$this->addColumn('FK_FILM_ID', 'FkFilmId', 'INTEGER', false, 11, null);
		$this->addColumn('FK_SCREENING_ID', 'FkScreeningId', 'INTEGER', false, 11, null);
		$this->addColumn('FK_SCREENING_NAME', 'FkScreeningName', 'VARCHAR', false, 255, null);
		$this->addColumn('FK_AUDIENCE_ID', 'FkAudienceId', 'INTEGER', false, 11, null);
		$this->addColumn('FK_SUBSCRIPTION_ID', 'FkSubscriptionId', 'INTEGER', false, 11, null);
		$this->addColumn('FK_USER_ID', 'FkUserId', 'INTEGER', false, 11, null);
		$this->addColumn('PAYMENT_UNIQUE_CODE', 'PaymentUniqueCode', 'VARCHAR', false, 20, null);
		$this->addColumn('PAYMENT_TYPE', 'PaymentType', 'VARCHAR', false, 20, null);
		$this->addColumn('PAYMENT_FIRST_NAME', 'PaymentFirstName', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_LAST_NAME', 'PaymentLastName', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_EMAIL', 'PaymentEmail', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_B_ADDR_1', 'PaymentBAddr1', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_B_ADDR_2', 'PaymentBAddr2', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_B_CITY', 'PaymentBCity', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_B_STATE', 'PaymentBState', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_B_ZIPCODE', 'PaymentBZipcode', 'VARCHAR', false, 20, null);
		$this->addColumn('PAYMENT_B_COUNTRY', 'PaymentBCountry', 'VARCHAR', false, 5, null);
		$this->addColumn('PAYMENT_STATUS', 'PaymentStatus', 'TINYINT', false, 4, null);
		$this->addColumn('PAYMENT_AMOUNT', 'PaymentAmount', 'FLOAT', false, 10, null);
		$this->addColumn('PAYMENT_DESCRIPTION', 'PaymentDescription', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_CARD_TYPE', 'PaymentCardType', 'VARCHAR', false, 20, null);
		$this->addColumn('PAYMENT_LAST_FOUR_CC_DIGITS', 'PaymentLastFourCcDigits', 'VARCHAR', false, 4, null);
		$this->addColumn('PAYMENT_CVV2', 'PaymentCvv2', 'VARCHAR', false, 4, null);
		$this->addColumn('PAYMENT_CC_EXP', 'PaymentCcExp', 'VARCHAR', false, 6, null);
		$this->addColumn('PAYMENT_CREATED_AT', 'PaymentCreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('PAYMENT_UPDATED_AT', 'PaymentUpdatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('PAYMENT_IP', 'PaymentIp', 'VARCHAR', false, 16, null);
		$this->addColumn('PAYMENT_SITE_ID', 'PaymentSiteId', 'VARCHAR', false, 10, null);
		$this->addColumn('PAYMENT_TRANSACTION_ID', 'PaymentTransactionId', 'VARCHAR', false, 255, null);
		$this->addColumn('PAYMENT_FRAUD_SCORE', 'PaymentFraudScore', 'INTEGER', false, 11, null);
		$this->addColumn('PAYMENT_MAXMIND_OBJECT', 'PaymentMaxmindObject', 'LONGVARCHAR', false, null, null);
		$this->addColumn('PAYMENT_ORDER_PROCESSOR', 'PaymentOrderProcessor', 'VARCHAR', false, 50, null);
		$this->addColumn('PAYMENT_INVITES', 'PaymentInvites', 'INTEGER', false, 11, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // PaymentTableMap
