// Flash STREAM RELAYER v1,0
// by Javier Peletier <jpeletie@akamai.com> (c) Akamai 2009
// Akamai confidential. Customer NDA required.
// AKAMAI CONTRIBUTION LICENSE: If you use or change this code, you accept to contribute the changes back to Akamai.

// This application is provided AS IS, without warranty of any kind.

// This FMS application subscribes to an already public stream and republishes it in the Akamai network
// Specially useful to connect a Wowza server to Akamai.
// config.asc file contains the parameters required to use this application


load("md5.asc");
load("config.asc");


var source_nc;
var source_ns;


var nc;
var ns;

var tc;
var status="DISCONNECTED";


application.onAppStart = function () {
    trace ("onAppStart called");
		setInterval(this, "tick", 1000);
		retryConnection();
		
};

application.onStatus = function(info){
    trace("Application.onStatus: "+info.code + ", " +info.details);
};


application.tick = function ()
{
	tc++;
	
	if (status != "RELAYING" && tc > CONNECTION_TIMEOUT)
	{
		trace("Not connected. Retrying connection...");
		retryConnection();
	}

	if(tc > 1000000)
		tc = CONNECTION_TIMEOUT;

}


function retryConnection()
{
		tc=0;
		
		if(source_nc)
		{
			source_nc.onStatus=new Function();
			source_nc=null;
		}
		
		if(nc)
		{
			nc.setChallenge =new Function();
			nc.onClientLogin =new Function();
			nc.onFCPublish =new Function();
			nc.onStatus =new Function();
			nc=null;
		}
		
		if(ns)
		{
			ns.onStatus= new Function();
			ns=null;
		}
		
		status="DISCONNECTED";
		
		source_ns = Stream.get(AKAMAI_STREAM);

		source_nc= new NetConnection();
		source_nc.onStatus = source_nc_onStatus;
		
		source_nc.connect(SOURCE_URL);

}

function source_nc_onStatus(info)
{
	switch(info.code)
	{
		case "NetConnection.Connect.Success" :
			{
				trace("Connected to source stream");
				source_ns.play(SOURCE_STREAM,0,-1,true,source_nc);
				application.publish(source_ns);
			};break;
		
		case "NetConnection.Connect.Closed" :
			{
				trace("Source connection was lost");
				//retryConnection();
				status="DISCONNECTED";
			};break;
				
			case "NetConnection.Connect.Failed" :
			{
				trace("Cannot connect to source");
				//retryConnection();
				status="DISCONNECTED";
			};break;	
	}

}




application.publish = function(myStream) {
	
	trace(myStream.name + " is publishing into application " + application.name);

	// This is an example of using the multi-point publish feature to republish
	// streams to another application instance on the local server.

		nc = new NetConnection();
		
		nc.password=AKAMAI_PASSWORD;
		nc.sessionkey="encoder:1.2.3.4:" + AKAMAI_CPCODE;
		nc.sourceStream=myStream;
		nc.streamType=AKAMAI_ENTRYPOINT_TYPE;
		
		nc.setChallenge = NetConnection_setChallenge;
		nc.onClientLogin = NetConnection_onClientLogin;
		nc.onFCPublish = NetConnection_onFCPublish;
		nc.onStatus = NetConnection_onStatus;
	
		var target_url;
		
		if (AKAMAI_ENTRYPOINT_TYPE == "primary")
			target_url = "rtmp://p.ep" + AKAMAI_STREAM_ID + ".i.akamaientrypoint.net/EntryPoint/";
		else 
			target_url = "rtmp://b.ep" + AKAMAI_STREAM_ID + ".i.akamaientrypoint.net/EntryPoint/";
	
		nc.connect(target_url,nc.sessionkey,"","2.0" );
		

	
}

function NetConnection_onStatus(info)
{
	trace("NetConnection_onStatus: " + info.code);
	
	switch(info.code)
	{
		case "NetConnection.Connect.Success" :
			{

			};break;
		
		case "NetConnection.Connect.Closed" :
			{
				trace("Target connection was lost");
				//retryConnection();
				status="DISCONNECTED";
			};break;
				
			case "NetConnection.Connect.Failed" :
			{
				trace("Cannot connect to target");
				//retryConnection();
				status="DISCONNECTED";
			};break;	
	}

}


function NetConnection_setChallenge(sessionid, challenge) 
{
	trace(sessionid + "," + challenge);
	this.sessionkey = this.sessionkey+":"+sessionid;
	this.password = hex_md5(challenge+":"+this.password+hex_md5(this.sessionkey+":"+challenge+":"+this.password));
	trace("challenge-response: " + this.password);
	this.call("ClientLogin", null, this.sessionkey, this.password);
	
}


function NetConnection_onClientLogin(info) 
{
			switch (info.code) 
			{
				case "Akamai.Connect.Success" :
					trace("Connection login successful");
					this.call("FCPublish", null, this.sourceStream.name, this.sessionkey, this.password, this.streamType);
					break;
				case "Akamai.Connect.Rejected" :
					trace("Connection login rejected");
					break;
			}
};

function NetConnection_onFCPublish(info) 
{
		if (info.code == "NetStream.Publish.Start") {
			ns = new NetStream(this);
		
			// called when the server NetStream object has a status
			ns.onStatus = NetStream_onStatus;
			
			ns.setBufferTime(BUFFER_LENGTH);
			
			ns.attach(this.sourceStream);
			ns.publish( this.sourceStream.name, "live" );
		
		} else if (info.code == "NetStream.Publish.BadName") {
			
			trace(info.code+", "+info.description);
		}
}

function NetStream_onStatus(info)
{
	trace("Stream Status: " + info.code)
	if (info.code == "NetStream.Publish.Start")
	{	
		trace("The stream is now publishing");
		status = "RELAYING";
	}
}


application.onUnpublish = function( client, myStream ) {
	trace(myStream.name + " is unpublishing");
}


Client.prototype.FCPublish = function(name)
{
	trace("FCPublish: " + name);
}


// called by Adobe Media Encoder before unpublishing a stream.
// The encoder has a bug where the streamname is not passed in.
Client.prototype.FCUnpublish = function(name)
{
    trace("FCUnpublish " + name);
}


