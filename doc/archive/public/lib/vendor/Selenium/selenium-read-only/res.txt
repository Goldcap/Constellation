(in /var/www/html/sites/dev.constellation.tv/public/lib/vendor/Selenium/selenium-read-only)
New python executable in build/python/bin/python
Installing setuptools.............done.
Installing pip...............done.
Unpacking ./third_party/py/simplejson-2.2.1.tar.gz
  Running setup.py egg_info for package from file:///var/www/html/sites/dev.constellation.tv/public/lib/vendor/Selenium/selenium-read-only/third_party/py/simplejson-2.2.1.tar.gz
Unpacking ./third_party/py/py-1.4.5.zip
  Running setup.py egg_info for package from file:///var/www/html/sites/dev.constellation.tv/public/lib/vendor/Selenium/selenium-read-only/third_party/py/py-1.4.5.zip
Unpacking ./third_party/py/pytest-2.0.3.zip
  Running setup.py egg_info for package from file:///var/www/html/sites/dev.constellation.tv/public/lib/vendor/Selenium/selenium-read-only/third_party/py/pytest-2.0.3.zip
Unpacking ./third_party/py/rdflib-3.1.0.tar.gz
  Running setup.py egg_info for package from file:///var/www/html/sites/dev.constellation.tv/public/lib/vendor/Selenium/selenium-read-only/third_party/py/rdflib-3.1.0.tar.gz
Cleaning up...
running build
running build_py
running egg_info
writing requirements to selenium.egg-info/requires.txt
writing selenium.egg-info/PKG-INFO
writing top-level names to selenium.egg-info/top_level.txt
writing dependency_links to selenium.egg-info/dependency_links.txt
reading manifest template 'MANIFEST.in'
warning: no files found matching 'docs/api/py/index.rst'
writing manifest file 'selenium.egg-info/SOURCES.txt'
copying py/selenium/webdriver/firefox/webdriver.xpi -> build/lib/selenium/webdriver/firefox
============================= test session starts ==============================
platform linux2 -- Python 2.6.0 -- pytest-2.0.3
collecting ... collected 312 items

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py EEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py EEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_clicks.py E
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py EEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py EEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py EEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py EEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py EEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py EEEEEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.py EEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py EEEEEEEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py EEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.py EEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py EEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_launcher.py EFF
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py EEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_profile_tests.py EEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.py EEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_element_handling.py EE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py EEEEEEEEEEEEEEEEEEEEEEExxx
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_stale_references.py EEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py EEEEEEEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEE
build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py EEEEEEEEE

==================================== ERRORS ====================================
 ERROR at setup of FirefoxAlertsTest.testAlertShouldNotAllowAdditionalCommandsIfDimissed 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxAlertsTest.testHandlesTwoAlertsFromOneInteraction __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAlertsTest.testPromptShouldUseDefaultValueIfNoKeysSent 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____ ERROR at setup of FirefoxAlertsTest.testSettingTheValueOfAnAlertThrows ____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxAlertsTest.testShouldAllowAUserToAcceptAPrompt ____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxAlertsTest.testShouldAllowAUserToDismissAPrompt ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAlertsTest.testShouldAllowAUserToSetTheValueOfAPrompt 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAlertsTest.testShouldAllowTheUserToGetTheTextOfAnAlert 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAlertsTest.testShouldAllowUsersToAcceptAnAlertManually 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAlertsTest.testShouldAllowUsersToAcceptAnAlertWithNoTextManually 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAlertsTest.testShouldAllowUsersToDismissAnAlertManually 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAlertsTest.testShouldBeAbleToOverrideTheWindowAlertMethod 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAlertsTest.webserver = webserver
>       FirefoxAlertsTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x274c710>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x274c450>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x274c510>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x274c690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_________ ERROR at setup of FirefoxApiExampleTest.testChangeWindowSize _________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_alerts' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.pyc'>

    def teardown_module(module):
>       FirefoxAlertsTest.driver.quit()
E       AttributeError: type object 'FirefoxAlertsTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_alerts.py:35: AttributeError
__ ERROR at setup of FirefoxApiExampleTest.testExecuteScriptAndReturnElement ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
______ ERROR at setup of FirefoxApiExampleTest.testExecuteScriptWithArgs _______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxApiExampleTest.testExecuteScriptWithElementArgs ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxApiExampleTest.testExecuteScriptWithMultipleArgs ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxApiExampleTest.testExecuteSimpleScript ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxApiExampleTest.testFindElementByIdInElementContext __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxApiExampleTest.testFindElementByTagName _______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxApiExampleTest.testFindElementByTagNameWithinElement _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxApiExampleTest.testFindElementByXpathInElementContext 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxApiExampleTest.testFindElementByXpathInElementContextNotFound 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxApiExampleTest.testFindElementByXpathThrowNoSuchElementException 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxApiExampleTest.testFindElementsByLinkTextInElementContext 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxApiExampleTest.testFindElementsByName ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxApiExampleTest.testFindElementsByNameInElementContext 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxApiExampleTest.testFindElementsByPartialLinkText ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxApiExampleTest.testFindElementsByXPath ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxApiExampleTest.testFindElementsByXpath ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___________ ERROR at setup of FirefoxApiExampleTest.testGetAttribute ___________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__________ ERROR at setup of FirefoxApiExampleTest.testGetCurrentUrl ___________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxApiExampleTest.testGetImplicitAttribute _______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_____________ ERROR at setup of FirefoxApiExampleTest.testGetTitle _____________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxApiExampleTest.testIsElementDisplayed ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____________ ERROR at setup of FirefoxApiExampleTest.testIsEnabled _____________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxApiExampleTest.testIsSelectedAndToggle ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxApiExampleTest.testMoveWindowPosition ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_____________ ERROR at setup of FirefoxApiExampleTest.testNavigate _____________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxApiExampleTest.testShouldBeAbleToEnterDataIntoFormFields 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxApiExampleTest.testSwitchFrameByName _________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__________ ERROR at setup of FirefoxApiExampleTest.testSwitchToWindow __________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxApiExampleTest.webserver = webserver
>       FirefoxApiExampleTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x279ab10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x279a850>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x279a3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x279ad90>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxChildrenFindingTest.testShouldBeAbleToFindAnElementByCssSelector 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_api' from '/var/www/...-read-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.pyc'>

    def teardown_module(module):
>       FirefoxApiExampleTest.driver.quit()
E       AttributeError: type object 'FirefoxApiExampleTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_api.py:35: AttributeError
 ERROR at setup of FirefoxChildrenFindingTest.testShouldBeAbleToFindMultipleElementsByCssSelector 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementByClassName _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementById ____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementByIdWhenMultipleMatchesExist 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementByIdWhenNoMatchInContext 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementByLinkText _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementByName ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementByTagName __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementByXPath ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementsByClassName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementsById ____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementsByName ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementsByTagName _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxChildrenFindingTest.testShouldFindElementsByXpath __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxChildrenFindingTest.testShouldNotFindElementByXPath _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxChildrenFindingTest.testShouldNotFindElementsByXpath _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxChildrenFindingTest.webserver = webserver
>       FirefoxChildrenFindingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2823a10>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28231d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2823590>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2823790>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxClickTest.testAddingACookieThatExpiredInThePast ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_children_finding' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.pyc'>

    def teardown_module(module):
>       FirefoxChildrenFindingTest.driver.quit()
E       AttributeError: type object 'FirefoxChildrenFindingTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_children_finding.py:35: AttributeError
______________ ERROR at setup of FirefoxCookieTest.testAddCookie _______________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCookieTest.webserver = webserver
>       FirefoxCookieTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893690>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2893750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxCookieTest.testAddingACookieThatExpiredInThePast ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCookieTest.webserver = webserver
>       FirefoxCookieTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893690>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2893750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___________ ERROR at setup of FirefoxCookieTest.testDeleteAllCookie ____________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCookieTest.webserver = webserver
>       FirefoxCookieTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893690>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2893750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_____________ ERROR at setup of FirefoxCookieTest.testDeleteCookie _____________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCookieTest.webserver = webserver
>       FirefoxCookieTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893690>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2893750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____________ ERROR at setup of FirefoxCookieTest.testGetAllCookies _____________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCookieTest.webserver = webserver
>       FirefoxCookieTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893690>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2893750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxCookieTest.testShouldGetCookieByName _________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCookieTest.webserver = webserver
>       FirefoxCookieTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893690>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2893750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCookieTest.testShouldNotDeleteCookiesWithASimilarName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCookieTest.webserver = webserver
>       FirefoxCookieTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893690>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2893750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2893390>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2893290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testClearingAnElementShouldCauseTheOnChangeHandlerToFire 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_cookie' from '/var/w...ad-only/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.pyc'>

    def teardown_module(module):
>       FirefoxCookieTest.driver.quit()
E       AttributeError: type object 'FirefoxCookieTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_cookie.py:36: AttributeError
 ERROR at setup of FirefoxCorrectEventFiringTests.testMouseEventsShouldBubbleUpToContainingElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldEmitClickEventWhenClickingOnATextInputElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldEmitOnChangeEventsWhenChangingTheStateOfACheckbox 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldEmitOnChangeEventsWhenSelectingElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldFireClickEventWhenClicking 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldFireMouseDownEventWhenClicking 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldFireMouseUpEventWhenClicking 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxCorrectEventFiringTests.testShouldIssueClickEvents __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldIssueMouseDownEvents 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxCorrectEventFiringTests.testShouldIssueMouseUpEvents _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxCorrectEventFiringTests.webserver = webserver
>       FirefoxCorrectEventFiringTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x28b5f50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x28b5d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28b5410>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28b5f10>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldBeAbleToFindAnElementByCssSelector 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_correct_event_firing...lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.pyc'>

    def teardown_module(module):
>       FirefoxCorrectEventFiringTests.driver.quit()
E       AttributeError: type object 'FirefoxCorrectEventFiringTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_correct_event_firing.py:35: AttributeError
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldBeAbleToFindMultipleElementsByCssSelector 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementByClassName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementById _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementByLinkText 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementByName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementByPartialLinkText 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementByTagName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementByXPath 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementsByClassName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementsById _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementsByLinkText 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementsByName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementsByPartialLinkText 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementsByTagName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxDriverElementFindingTests.testShouldFindElementsByXPath 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxDriverElementFindingTests.webserver = webserver
>       FirefoxDriverElementFindingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e210>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292ec90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e3d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e690>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testCanReturnATextApproximationOfTheStyleAttribute 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_driver_element_findi...b/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.pyc'>

    def teardown_module(module):
>       FirefoxDriverElementFindingTests.driver.quit()
E       AttributeError: type object 'FirefoxDriverElementFindingTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_driver_element_finding.py:35: AttributeError
 ERROR at setup of FirefoxElementAttributeTests.testElementsShouldBeDisabledIfTheyAreDisabledUsingRandomDisabledStrings 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxElementAttributeTests.testShouldGetNumericAtribute __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldIndicateTheElementsThatAreDisabledAreNotis_enabled 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldIndicateWhenASelectIsDisabled 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldIndicateWhenATextAreaIsDisabled 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnEmptyAttributeValuesWhenPresentAndTheValueIsActuallyEmpty 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnNullWhenGettingTheValueOfAnAttributeThatIsNotListed 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnTheContentsOfATextAreaAsItsValue 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnTheValueOfCheckedForACheckboxEvenIfItLacksThatAttribute 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnTheValueOfSelectedForOptionsInSelectsEvenIfTheyLackThatAttribute 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnTheValueOfSelectedForRadioButtonsEvenIfTheyLackThatAttribute 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnTheValueOfTheDisabledAttributeAsFalseIfNotSet 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnTheValueOfTheIndexAttrbuteEvenIfItIsMissing 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldReturnValueOfClassAttributeOfAnElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDisabledStrings 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxElementAttributeTests.testShouldTreatReadonlyAsAValue 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxElementAttributeTests.webserver = webserver
>       FirefoxElementAttributeTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x292e850>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x292edd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x292e4d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x292e510>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToExecuteAsynchronousScripts 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_element_attribute' f...ld/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.pyc'>

    def teardown_module(module):
>       FirefoxElementAttributeTests.driver.quit()
E       AttributeError: type object 'FirefoxElementAttributeTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_element_attribute.py:35: AttributeError
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToPassMultipleArgumentsToAsyncScripts 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToReturnAnArrayLiteralFromAnAsyncScript 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToReturnAnArrayObjectFromAnAsyncScript 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToReturnArraysOfPrimitivesFromAsyncScripts 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToReturnArraysOfWebElementsFromAsyncScripts 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToReturnJavascriptPrimitivesFromAsyncScripts_NeitherNoneNorUndefined 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToReturnJavascriptPrimitivesFromAsyncScripts_NullAndUndefined 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldBeAbleToReturnWebElementsFromAsyncScripts 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldCatchErrorsWhenExecutingInitialScript 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldDetectPageLoadsWhileWaitingOnAnAsyncScriptAndReturnAnError 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldNotTimeoutIfCallbackInvokedImmediately 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldNotTimeoutIfScriptCallsbackInsideAZeroTimeout 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldTimeoutIfScriptDoesNotInvokeCallback 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldTimeoutIfScriptDoesNotInvokeCallbackWithAZeroTimeout 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingAsyncJavaScriptTests.testShouldTimeoutIfScriptDoesNotInvokeCallbackWithLongTimeout 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingAsyncJavaScriptTests.webserver = webserver
>       FirefoxExecutingAsyncJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x294ed90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x294ee90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x294ec90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x294e2d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testJavascriptStringHandlingShouldWorkAsExpected 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_async_java...m/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.pyc'>

    def teardown_module(module):
>       FirefoxExecutingAsyncJavaScriptTests.driver.quit()
E       AttributeError: type object 'FirefoxExecutingAsyncJavaScriptTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_async_javascript_test.py:35: AttributeError
 ERROR at setup of FirefoxExecutingJavaScriptTests.testPassingAndReturningADoubleShouldReturnADecimal 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testPassingAndReturningALongShouldReturnAWholeNumber 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToCallFunctionsDefinedOnThePage 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToCreateAPersistentValue 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToExecuteSimpleJavascriptAndAStringsArray 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToExecuteSimpleJavascriptAndReturnABoolean 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToExecuteSimpleJavascriptAndReturnAString 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToExecuteSimpleJavascriptAndReturnAWebElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToExecuteSimpleJavascriptAndReturnAnArray 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToExecuteSimpleJavascriptAndReturnAnInteger 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToPassABooleanAnAsArgument 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToPassACollectionAsArgument 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToPassANumberAnAsArgument 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToPassAStringAnAsArgument 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToPassAWebElementAsArgument 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToPassAnArrayAsArgument 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldBeAbleToPassInMoreThanOneArgument 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldThrowAnExceptionIfAnArgumentIsNotValid 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxExecutingJavaScriptTests.testShouldThrowAnExceptionWhenTheJavascriptIsBad 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxExecutingJavaScriptTests.webserver = webserver
>       FirefoxExecutingJavaScriptTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dc950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc390>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dccd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x29dc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxWebDriverWaitTest.testShouldExplicitlyWaitForASingleElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_executing_javascript...elenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.pyc'>

    def teardown_module(module):
>       FirefoxExecutingJavaScriptTests.driver.quit()
E       AttributeError: type object 'FirefoxExecutingJavaScriptTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_executing_javascript_test.py:35: AttributeError
 ERROR at setup of FirefoxWebDriverWaitTest.testShouldExplicitlyWaituntilAtLeastOneElementIsFoundWhenSearchingForMany 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_explicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxWebDriverWaitTest.webserver = webserver
>       FirefoxWebDriverWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2a6e990>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc490>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2a6e890>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2a6e890>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxWebDriverWaitTest.testShouldFailToFindElementsWhenExplicitWaiting 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_explicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxWebDriverWaitTest.webserver = webserver
>       FirefoxWebDriverWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2a6e990>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc490>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2a6e890>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2a6e890>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxWebDriverWaitTest.testShouldStillFailToFindAnElementWithExplicitWait 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_explicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxWebDriverWaitTest.webserver = webserver
>       FirefoxWebDriverWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2a6e990>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29dc490>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2a6e890>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2a6e890>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2a6e590>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testClickingOnUnclickableElementsDoesNothing 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_explicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.pyc'>

    def teardown_module(module):
>       FirefoxWebDriverWaitTest.driver.quit()
E       AttributeError: type object 'FirefoxWebDriverWaitTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_explicit_waits.py:34: AttributeError
 ERROR at setup of FirefoxFormHandlingTests.testEmptyTextBoxesShouldReturnAnEmptyStringNotNull 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testRadioShouldNotBeSelectedAfterSelectingSibling 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testSendingKeyboardEventsShouldAppendTextInInputs 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToClearTextFromInputElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToClearTextFromTextAreas 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToClickImageButtons 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToEnterTextIntoATextAreaBySettingItsValue 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToSelectACheckBox _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToSelectARadioButton 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToSelectARadioButtonByClickingOnIt 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxFormHandlingTests.testShouldBeAbleToSubmitForms ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldClickOnSubmitInputElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxFormHandlingTests.testShouldEnterDataIntoFormFields _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldNotBeAbleToSubmitAFormThatDoesNotExist 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldReturnStateOfRadioButtonsBeforeInteration 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldSubmitAFormWhenAnyElementWihinThatFormIsSubmitted 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldSubmitAFormWhenAnyInputElementWithinThatFormIsSubmitted 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldThrowAnExceptionWhenSelectingAnUnselectableElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testShouldToggleTheCheckedStateOfACheckbox 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testTogglingACheckboxShouldReturnItsCurrentState 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFormHandlingTests.testTogglingAnOptionShouldToggleOptionsInAMultiSelect 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFormHandlingTests.webserver = webserver
>       FirefoxFormHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2893890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x29d2050>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x28a3b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x28a3c50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testFrameSearchesShouldBeRelativeToTheCurrentlySelectedFrame 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_form_handling' from .../build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.pyc'>

    def teardown_module(module):
>       FirefoxFormHandlingTests.driver.quit()
E       AttributeError: type object 'FirefoxFormHandlingTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_form_handling.py:35: AttributeError
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldAllowAUserToSwitchFromAnIframeBackToTheMainContentOfThePage 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSelectChildFrames 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAFrameByItsID 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAFrameByItsIndex 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAFrameByItsName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAFrameUsingAPreviouslyLocatedWebElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAnIFrameUsingAPreviouslyLocatedWebElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAnIframeByItsID 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAnIframeByItsIndex 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldBeAbleToSwitchToAnIframeByItsName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldEnsureElementIsAFrameBeforeSwitching 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldReturnFrameTitleNotWindowTitle 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldThrowAnExceptionWhenAFrameCannotBeFound 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldThrowAnExceptionWhenAFrameCannotBeFoundByIndex 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testShouldThrowFrameNotFoundExceptionLookingUpSubFramesWithSuperFrameNames 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxFrameSwitchingTest.testThatWeShouldNotAutoSwitchFocusToAnIFrameWhenAPageContainingThemIsLoaded 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxFrameSwitchingTest.webserver = webserver
>       FirefoxFrameSwitchingTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2ae7c50>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2ae7290>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2ae7210>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2ae79d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxImplicitWaitTest.testShouldImplicitlyWaitForASingleElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_frame_switching' fro...uild/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.pyc'>

    def teardown_module(module):
>       FirefoxFrameSwitchingTest.driver.quit()
E       AttributeError: type object 'FirefoxFrameSwitchingTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_frame_switching.py:35: AttributeError
 ERROR at setup of FirefoxImplicitWaitTest.testShouldImplicitlyWaitUntilAtLeastOneElementIsFoundWhenSearchingForMany 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_implicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxImplicitWaitTest.webserver = webserver
>       FirefoxImplicitWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b56250>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56ed0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxImplicitWaitTest.testShouldReturnAfterFirstAttemptToFindManyAfterDisablingImplicitWaits 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_implicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxImplicitWaitTest.webserver = webserver
>       FirefoxImplicitWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b56250>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56ed0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxImplicitWaitTest.testShouldReturnAfterFirstAttemptToFindOneAfterDisablingImplicitWaits 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_implicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxImplicitWaitTest.webserver = webserver
>       FirefoxImplicitWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b56250>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56ed0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxImplicitWaitTest.testShouldStillFailToFindAnElemenstWhenImplicitWaitsAreEnabled 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_implicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxImplicitWaitTest.webserver = webserver
>       FirefoxImplicitWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b56250>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56ed0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxImplicitWaitTest.testShouldStillFailToFindAnElementWhenImplicitWaitsAreEnabled 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_implicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxImplicitWaitTest.webserver = webserver
>       FirefoxImplicitWaitTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b56250>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56ed0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56bd0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56cd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAdvancedUserInteractionTest.testCannotMoveToANullLocator 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_implicit_waits' from...build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.pyc'>

    def teardown_module(module):
>       FirefoxImplicitWaitTest.driver.quit()
E       AttributeError: type object 'FirefoxImplicitWaitTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_implicit_waits.py:35: AttributeError
____ ERROR at setup of FirefoxAdvancedUserInteractionTest.testContextClick _____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAdvancedUserInteractionTest.webserver = webserver
>       FirefoxAdvancedUserInteractionTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b63950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_____ ERROR at setup of FirefoxAdvancedUserInteractionTest.testDoubleClick _____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAdvancedUserInteractionTest.webserver = webserver
>       FirefoxAdvancedUserInteractionTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b63950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_____ ERROR at setup of FirefoxAdvancedUserInteractionTest.testDragAndDrop _____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAdvancedUserInteractionTest.webserver = webserver
>       FirefoxAdvancedUserInteractionTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b63950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAdvancedUserInteractionTest.testDraggingElementWithMouseMovesItToAnotherList 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAdvancedUserInteractionTest.webserver = webserver
>       FirefoxAdvancedUserInteractionTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b63950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____ ERROR at setup of FirefoxAdvancedUserInteractionTest.testMoveAndClick _____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAdvancedUserInteractionTest.webserver = webserver
>       FirefoxAdvancedUserInteractionTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b63950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAdvancedUserInteractionTest.testMovingMouseBackAndForthPastViewPort 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAdvancedUserInteractionTest.webserver = webserver
>       FirefoxAdvancedUserInteractionTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b63950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxAdvancedUserInteractionTest.testSelectingMultipleItems 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxAdvancedUserInteractionTest.webserver = webserver
>       FirefoxAdvancedUserInteractionTest.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b63950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63750>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b635d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63fd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____________ ERROR at setup of FirefoxLauncherTests.testDoubleClose ____________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_interactions' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.pyc'>

    def teardown_module(module):
>       FirefoxAdvancedUserInteractionTest.driver.quit()
E       AttributeError: type object 'FirefoxAdvancedUserInteractionTest' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_interactions.py:34: AttributeError
 ERROR at setup of FirefoxPageLoadingTests.testShouldBeAbleToGetAFragmentOnTheCurrentPage 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxPageLoadingTests.testShouldBeAbleToNavigateBackInTheBrowserHistory 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxPageLoadingTests.testShouldBeAbleToNavigateBackInTheBrowserHistoryInPresenceOfIframes 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxPageLoadingTests.testShouldBeAbleToNavigateForwardsInTheBrowserHistory 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at setup of FirefoxPageLoadingTests.testShouldBeAbleToRefreshAPage ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxPageLoadingTests.testShouldReturnWhenGettingAUrlThatDoesNotConnect 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxPageLoadingTests.testShouldReturnWhenGettingAUrlThatDoesNotResolve 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxPageLoadingTests.testShouldWaitForDocumentToBeLoaded _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxPageLoadingTests.webserver = webserver
>       FirefoxPageLoadingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b567d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56810>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b56190>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56290>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____ ERROR at setup of TestFirefoxProfile.test_that_we_can_accept_a_profile ____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_page_loading' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.pyc'>

    def teardown_module(module):
>       FirefoxPageLoadingTests.driver.quit()
E       AttributeError: type object 'FirefoxPageLoadingTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_page_loading.py:35: AttributeError
_____ ERROR at setup of TestFirefoxProfile.test_that_we_delete_the_profile _____

self = <selenium.test.selenium.webdriver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf1440>
method = <bound method TestFirefoxProfile.test_that_we_delete_the_profile of <selenium....driver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf1440>>

    def setup_method(self, method):
>       self.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_profile_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x29dcbd0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b56d10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dc650>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x29dc650>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b56710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___ ERROR at teardown of TestFirefoxProfile.test_that_we_delete_the_profile ____

self = <selenium.test.selenium.webdriver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf1440>
method = <bound method TestFirefoxProfile.test_that_we_delete_the_profile of <selenium....driver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf1440>>

    def teardown_method(self, method):
        try:
            self.driver.quit()
        except:
            pass #don't care since we may have killed the browser above
>       self.webserver.stop()
E       AttributeError: TestFirefoxProfile instance has no attribute 'webserver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_profile_tests.py:62: AttributeError
_ ERROR at setup of TestFirefoxProfile.test_profiles_do_not_share_preferences __

self = <selenium.test.selenium.webdriver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf55f0>
method = <bound method TestFirefoxProfile.test_profiles_do_not_share_preferences of <se...driver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf55f0>>

    def setup_method(self, method):
>       self.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_profile_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2b56450>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63c10>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b63810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63a50>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63a50>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2b63810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2b63a50>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at teardown of TestFirefoxProfile.test_profiles_do_not_share_preferences 

self = <selenium.test.selenium.webdriver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf55f0>
method = <bound method TestFirefoxProfile.test_profiles_do_not_share_preferences of <se...driver.firefox.test_ff_profile_tests.TestFirefoxProfile instance at 0x2bf55f0>>

    def teardown_method(self, method):
        try:
            self.driver.quit()
        except:
            pass #don't care since we may have killed the browser above
>       self.webserver.stop()
E       AttributeError: TestFirefoxProfile instance has no attribute 'webserver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_profile_tests.py:62: AttributeError
 ERROR at setup of FirefoxRenderedWebElementTests.testShouldAllowInheritedStylesToBeUsed 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_rendered_webelement'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxRenderedWebElementTests.webserver = webserver
>       FirefoxRenderedWebElementTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2aa1890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b3cfd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2aa14d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2aa14d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxRenderedWebElementTests.testShouldCorrectlyIdentifyThatAnElementHasWidth 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_rendered_webelement'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxRenderedWebElementTests.webserver = webserver
>       FirefoxRenderedWebElementTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2aa1890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b3cfd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2aa14d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2aa14d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxRenderedWebElementTests.testShouldPickUpStyleOfAnElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_rendered_webelement'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxRenderedWebElementTests.webserver = webserver
>       FirefoxRenderedWebElementTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2aa1890>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b3cfd0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2aa14d0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2aa14d0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2aa1610>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testShouldBeAbleToChangeTheSelectedOptionInASelect 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_rendered_webelement'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.pyc'>

    def teardown_module(module):
>       FirefoxRenderedWebElementTests.driver.quit()
E       AttributeError: type object 'FirefoxRenderedWebElementTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_rendered_webelement.py:35: AttributeError
 ERROR at setup of FirefoxSelectElementHandlingTests.testShouldBeAbleToSelectMoreThanOneOptionFromASelectWhichAllowsMultipleChoices 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_element_handl.../selenium/test/selenium/webdriver/firefox/test_ff_select_element_handling.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_element_handling.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc490>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bccc90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcce50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcccd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcccd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcce50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcccd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectAllMultiple __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_element_handl.../selenium/test/selenium/webdriver/firefox/test_ff_select_element_handling.pyc'>

    def teardown_module(module):
>       FirefoxSelectElementHandlingTests.driver.quit()
E       AttributeError: type object 'FirefoxSelectElementHandlingTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_element_handling.py:35: AttributeError
__ ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectAllSingle ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectByIndexMultiple 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectByIndexSingle _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectByValueMultiple 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectByValueSingle _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectByVisibleTextMultiple 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testDeselectByVisibleTextSingle 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testGetAllSelectedOptionsMultiple 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testGetAllSelectedOptionsSingle 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testGetFirstSelectedOptionMultiple 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testGetFirstSelectedOptionSingle 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
______ ERROR at setup of FirefoxSelectElementHandlingTests.testGetOptions ______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testRaisesExceptionForInvalidTagName 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByIndexMultiple _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByIndexSingle __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByValueMultiple _

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByValueSingle __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByVisibleTextMultiple 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByVisibleTextMultiplePartialText 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByVisibleTextSholdNormalizeSpaces 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByVisibleTextSingle 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxSelectElementHandlingTests.testSelectByVisibleTextSinglePartialText 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxSelectElementHandlingTests.webserver = webserver
>       FirefoxSelectElementHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bcc410>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bd68d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bcc790>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bcc8d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
___________ ERROR at setup of FirefoxStaleReferenceTests.testOldPage ___________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_select_support_class...lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.pyc'>

    def teardown_module(module):
>       FirefoxSelectElementHandlingTests.driver.quit()
E       AttributeError: type object 'FirefoxSelectElementHandlingTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_select_support_class.py:34: AttributeError
 ERROR at setup of FirefoxStaleReferenceTests.testShouldNotCrashWhenCallingGetSizeOnAnObsoleteElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_stale_references' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_stale_references.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxStaleReferenceTests.webserver = webserver
>       FirefoxStaleReferenceTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_stale_references.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c568d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2c80e50>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c56b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c56210>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c56210>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c56b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c56210>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxStaleReferenceTests.testShouldNotCrashWhenQueryingTheAttributeOfAStaleElement 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_stale_references' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_stale_references.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxStaleReferenceTests.webserver = webserver
>       FirefoxStaleReferenceTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_stale_references.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c568d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2c80e50>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c56b90>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c56210>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c56210>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c56b90>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c56210>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testHavingInlineElementsShouldNotAffectHowTextIsReturned 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_stale_references' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_stale_references.pyc'>

    def teardown_module(module):
>       FirefoxStaleReferenceTests.driver.quit()
E       AttributeError: type object 'FirefoxStaleReferenceTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_stale_references.py:35: AttributeError
____ ERROR at setup of FirefoxTextHandlingTests.testReadALargeAmountOfData _____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldBeAbleToEnterDatesAfterFillingInOtherValuesFirst 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldBeAbleToSetMoreThanOneLineOfTextInATextArea 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldCollapseMultipleWhitespaceCharactersIntoASingleSpace 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldConvertANonBreakingSpaceIntoANormalSpaceCharacter 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxTextHandlingTests.testShouldGetTextFromTableCells __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldGetTextWhichIsAValidComplexJSONObject 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldGetTextWhichIsAValidJSONObject 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldHandleSiblingBlockLevelElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldHandleWhitespaceInInlineElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxTextHandlingTests.testShouldIgnoreScriptElements ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_ ERROR at setup of FirefoxTextHandlingTests.testShouldOnlyIncludeVisibleText __

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldRepresentABlockLevelElementAsANewline 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldReturnEmptyStringWhenTagIsSelfClosing 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldReturnEmptyStringWhenTextIsEmpty 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldReturnEmptyStringWhenTextIsOnlySpaces 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldReturnTheEntireTextContentOfChildElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldReturnTheEntireTextOfInlineElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldReturnTheTextContentOfASingleElementWithNoChildren 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTextHandlingTests.testShouldTreatANonBreakingSpaceAsAnyOtherWhitespaceCharacterWhenCollapsingWhitespace 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxTextHandlingTests.testShouldTrimText _________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTextHandlingTests.webserver = webserver
>       FirefoxTextHandlingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2c80950>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1090>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2c80350>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2c80710>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__________ ERROR at setup of FirefoxTypingTests.testAllPrintableKeys ___________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_text_handling_tests'.../lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.pyc'>

    def teardown_module(module):
>       FirefoxTextHandlingTests.driver.quit()
E       AttributeError: type object 'FirefoxTextHandlingTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_text_handling_tests.py:35: AttributeError
______ ERROR at setup of FirefoxTypingTests.testArrowKeysAndPageUpAndDown ______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____ ERROR at setup of FirefoxTypingTests.testArrowKeysShouldNotBePrintable ____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxTypingTests.testDeleteAndBackspaceKeys ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_________ ERROR at setup of FirefoxTypingTests.testLowerCaseAlphaKeys __________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
______ ERROR at setup of FirefoxTypingTests.testNumberpadAndFunctionKeys _______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_________ ERROR at setup of FirefoxTypingTests.testNumericNonShiftKeys _________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__________ ERROR at setup of FirefoxTypingTests.testNumericShiftKeys ___________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxTypingTests.testShiftSelectionDeletes ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testShouldBeAbleToMixUpperAndLowerCaseLetters 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxTypingTests.testShouldBeAbleToTypeCapitalLetters ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
____ ERROR at setup of FirefoxTypingTests.testShouldBeAbleToTypeQuoteMarks _____

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__ ERROR at setup of FirefoxTypingTests.testShouldBeAbleToTypeTheAtCharacter ___

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_____ ERROR at setup of FirefoxTypingTests.testShouldBeAbleToUseArrowKeys ______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_______ ERROR at setup of FirefoxTypingTests.testShouldFireKeyDownEvents _______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
______ ERROR at setup of FirefoxTypingTests.testShouldFireKeyPressEvents _______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
________ ERROR at setup of FirefoxTypingTests.testShouldFireKeyUpEvents ________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testShouldReportKeyCodeOfArrowKeysUpDownEvents 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_________ ERROR at setup of FirefoxTypingTests.testShouldTypeAnInteger _________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testShouldTypeIntoInputElementsThatHaveNoTypeAttribute 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_____ ERROR at setup of FirefoxTypingTests.testShouldTypeLowerCaseLetters ______

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
__________ ERROR at setup of FirefoxTypingTests.testSpecialSpaceKeys ___________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
_________ ERROR at setup of FirefoxTypingTests.testUppercaseAlphaKeys __________

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testWillSimulateAKeyDownWhenEnteringTextIntoInputElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testWillSimulateAKeyDownWhenEnteringTextIntoTextAreas 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testWillSimulateAKeyPressWhenEnteringTextIntoInputElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testWillSimulateAKeyPressWhenEnteringTextIntoTextAreas 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.T
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testWillSimulateAKeyUpWhenEnteringTextIntoInputElements 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxTypingTests.testWillSimulateAKeyUpWhenEnteringTextIntoTextAreas 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxTypingTests.webserver = webserver
>       FirefoxTypingTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2cf1310>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2cf1d90>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2cf1c50>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2cf11d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testHiddenInputElementsAreNeverVisible 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_typing_tests' from '...y/build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.pyc'>

    def teardown_module(module):
>       FirefoxTypingTests.driver.quit()
E       AttributeError: type object 'FirefoxTypingTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_typing_tests.py:35: AttributeError
 ERROR at setup of FirefoxVisibilityTests.testShouldAllowTheUserToTellIfAnElementIsDisplayedOrNot 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testShouldCountElementsAsVisibleIfStylePropertyHasBeenSet 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testShouldModifyTheVisibilityOfAnElementDynamically 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testShouldNotBeAbleToSelectAnElementThatIsNotDisplayed 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testShouldNotBeAbleToToggleAnElementThatIsNotDisplayed 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testShouldNotBeAbleToTypeAnElementThatIsNotDisplayed 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
 ERROR at setup of FirefoxVisibilityTests.testVisibilityShouldTakeIntoAccountParentVisibility 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def setup_module(module):
        webserver = SimpleWebServer()
        webserver.start()
        FirefoxVisibilityTests.webserver = webserver
>       FirefoxVisibilityTests.driver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2d8aad0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2d9d6d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2d8a810>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2d8a1d0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
______________________ ERROR at teardown of test session _______________________

self = <CallInfo when='teardown' exception: type object 'FirefoxVisibilityTests' has no attribute 'driver'>
func = <bound method SetupState.teardown_all of <_pytest.runner.SetupState object at 0x1e97cd0>>
when = 'teardown'

    def __init__(self, func, when):
        #: context of invocation: one of "setup", "call",
        #: "teardown", "memocollect"
        self.when = when
        try:
>           self.result = func()

build/python/lib/python2.6/site-packages/_pytest/runner.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.runner.SetupState object at 0x1e97cd0>

    def teardown_all(self):
        while self.stack:
>           self._pop_and_teardown()

build/python/lib/python2.6/site-packages/_pytest/runner.py:278: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.runner.SetupState object at 0x1e97cd0>

    def _pop_and_teardown(self):
        colitem = self.stack.pop()
>       self._teardown_with_finalization(colitem)

build/python/lib/python2.6/site-packages/_pytest/runner.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.runner.SetupState object at 0x1e97cd0>
colitem = <Module 'build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py'>

    def _teardown_with_finalization(self, colitem):
        self._callfinalizers(colitem)
        if colitem:
>           colitem.teardown()

build/python/lib/python2.6/site-packages/_pytest/runner.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Module 'build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py'>

    def teardown(self):
        if hasattr(self.obj, 'teardown_module'):
            #XXX: nose compat hack, move to nose plugin
            # if it takes a positional arg, its probably a py.test style one
            # so we pass the current module object
            if inspect.getargspec(self.obj.teardown_module)[0]:
>               self.obj.teardown_module(self.obj)

build/python/lib/python2.6/site-packages/_pytest/python.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

module = <module 'selenium.test.selenium.webdriver.firefox.test_ff_visibility_tests' fr...ild/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.pyc'>

    def teardown_module(module):
>       FirefoxVisibilityTests.driver.quit()
E       AttributeError: type object 'FirefoxVisibilityTests' has no attribute 'driver'

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_visibility_tests.py:35: AttributeError
=================================== FAILURES ===================================
________________ FirefoxLauncherTests.testLaunchAndCloseBrowser ________________

self = <selenium.test.selenium.webdriver.firefox.test_ff_launcher.FirefoxLauncherTests testMethod=testLaunchAndCloseBrowser>

    def testLaunchAndCloseBrowser(self):
>       self.webdriver = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_launcher.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bc5a90>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2bc53d0>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bc5ad0>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bc5550>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bc5550>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bc5ad0>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bc5550>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
______ FirefoxLauncherTests.test_we_can_launch_multiple_firefox_instances ______

self = <selenium.test.selenium.webdriver.firefox.test_ff_launcher.FirefoxLauncherTests testMethod=test_we_can_launch_multiple_firefox_instances>

    def test_we_can_launch_multiple_firefox_instances(self):
>       self.webdriver1 = webdriver.Firefox()

build/lib/selenium/test/selenium/webdriver/firefox/test_ff_launcher.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.webdriver.WebDriver object at 0x2bc59d0>
firefox_profile = None, firefox_binary = None, timeout = 30

    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30):
    
        self.binary = firefox_binary
        self.profile = firefox_profile
    
        if self.profile is None:
            self.profile = FirefoxProfile()
    
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        RemoteWebDriver.__init__(self,
            command_executor=ExtensionConnection("127.0.0.1", self.profile,
>           self.binary, timeout),

build/lib/selenium/webdriver/firefox/webdriver.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.extension_connection.ExtensionConnection object at 0x2b63a50>
host = '127.0.0.1'
firefox_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bc5c10>
firefox_binary = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bc5bd0>
timeout = 30

    def __init__(self, host, firefox_profile, firefox_binary=None, timeout=30):
        self.profile = firefox_profile
        self.binary = firefox_binary
        HOST = host
        if self.binary is None:
            self.binary = FirefoxBinary()
    
        if HOST is None:
            HOST = "127.0.0.1"
    
        PORT = utils.free_port()
        self.profile.port = PORT
        self.profile.update_preferences()
    
        self.profile.add_extension()
    
>       self.binary.launch_browser(self.profile)

build/lib/selenium/webdriver/firefox/extension_connection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bc5bd0>
profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x2bc5c10>

    def launch_browser(self, profile):
        """Launches the browser for the given profile name.
            It is assumed the profile already exists.
            """
        self.profile = profile
    
        self._start_from_profile_path(self.profile.path)
>       self._wait_until_connectable()

build/lib/selenium/webdriver/firefox/firefox_binary.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x2bc5bd0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
>               raise WebDriverException("The browser appears to have exited before we could connect")
E               WebDriverException: Message: 'The browser appears to have exited before we could connect'

build/lib/selenium/webdriver/firefox/firefox_binary.py:70: WebDriverException
=============== 2 failed, 3 xfailed, 310 error in 39.79 seconds ================
